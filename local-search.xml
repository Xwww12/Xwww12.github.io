<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2023/02/23/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    <url>/2023/02/23/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p>回溯模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(参数)</span> &#123;<br>    <span class="hljs-keyword">if</span> (终止条件) &#123;<br>        存放结果;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (选择元素) &#123;<br>        添加元素;<br>        dfs();<br>        撤销元素<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回溯法常用排序来剪枝</p><h3 id="二进制枚举"><a href="#二进制枚举" class="headerlink" title="二进制枚举"></a>二进制枚举</h3><p>通过二进制数的0&#x2F;1 表示 选择&#x2F;变换 对应位置上的字符&#x2F;数字</p><p>例如求字符串的所有子集</p><p>若字符串长为3，则可以选择或不选择这个位置上的字符来组成子集，有2 ^ 3种构成方式</p><p>可以通过0~2^n的二进制来表示选或者不选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">count</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>    <br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; n); ++i) &#123;<span class="hljs-comment">//1 &lt;&lt; n 等价于 2^n</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (((i &gt;&gt; j) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">// 判断该位上二进制数</span><br>                sb.append(s.charAt(j));<br>            &#125;<br>        &#125;<br>        list.add(sb.toString());<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二进制枚举适合n比较小的题，n大的话得通过dfs的剪枝来降低复杂度</strong></p><p><strong>例题</strong></p><p><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列 - 力扣（LeetCode）</a></p><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p><a href="https://www.runoob.com/data-structures/union-find-basic.html">并查集基础 | 菜鸟教程 (runoob.com)</a></p><p>模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        parent[x] = x;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找x对应的集合编号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (parent[x] != x)<br>            parent[x] = find(parent[x]);<br>        <span class="hljs-keyword">return</span> parent[x];<br>    &#125;<br><br>    <span class="hljs-comment">// 查看p，q是否属于同一个集合</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isConnected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br><br>    <span class="hljs-comment">// 合并两个元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        x = find(x);<br>        y = find(y);<br>        <span class="hljs-keyword">if</span> (x != y) &#123;<br>            parent[x] = parent[y];<br>            size--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例题</strong></p><p><a href="https://leetcode.cn/problems/minimum-score-of-a-path-between-two-cities/">6255. 两个城市间路径的最小分数 - 力扣（LeetCode）</a></p><h3 id="格雷码"><a href="#格雷码" class="headerlink" title="格雷码"></a>格雷码</h3><p><a href="https://leetcode.cn/problems/gray-code/">89. 格雷编码 - 力扣（LeetCode）</a></p><p>在格雷码中，任意两个相邻的代码只有一位二进制数不同，最大码与最小码之间也仅一位不同</p><p>转换方式：普通二进制记为Bn-1 Bn-2 … B0，格雷码记为Gn-1 Gn-2 … G0       </p><p>Gn-1 &#x3D; Bn-1;</p><p>Gi &#x3D; Bi+1 异或 Bi  (0 &lt;&#x3D; i &lt;&#x3D; n - 2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">grayCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">int</span>)Math.pow(<span class="hljs-number">2</span>, n); ++i) &#123;<br>        res.add((i &gt;&gt; <span class="hljs-number">1</span>) ^ i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题</title>
    <link href="/2023/02/21/%E5%85%B6%E4%BB%96/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/02/21/%E5%85%B6%E4%BB%96/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h4><p>问题1：128个元素最多二分几次找到目标</p><p>答：128 &#x3D; 2^7，最多7次</p><p>问题2：100000000000个元素最多二分几次找到目标</p><p>答：</p><p>​公式：<font color="red">logb(a) &#x3D; logc(a) &#x2F; logc(b)</font></p><p>​log2(100000000000) &#x3D; log10(100000000000) &#x2F; log10(2)，向上取整</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h5 id="经典排序算法"><a href="#经典排序算法" class="headerlink" title="经典排序算法"></a>经典排序算法</h5><p><strong>冒泡排序</strong>：每次相邻两个元素比较，一趟选出一个最大&#x2F;最小的元素</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 优化过的冒泡，记录最后一次交换索引作为下轮冒泡的比较次数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>;<span class="hljs-comment">// 记录每次循环比较的次数</span><br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 记录最后一次交换的索引</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) &#123;<br>                swap(arr, i, i + <span class="hljs-number">1</span>);<br>                last = i;<br>            &#125;<br>        &#125;<br>        n = last;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>选择排序</strong>：每次选择一个最大&#x2F;最小元素，放到已排序区域的末尾</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selection</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; ++i) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> i;<span class="hljs-comment">// 最小元素下标</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> s + <span class="hljs-number">1</span>; j &lt; arr.length; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (arr[s] &gt; arr[j])<br>                s = j;<br>        &#125;<br>        swap(arr, s, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>插入排序</strong>：遍历每个元素，插入到已排序区域中适合的位置</p><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; ++i) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; --j) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; tmp) &#123;<br>                arr[j + <span class="hljs-number">1</span>] = arr[j];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        arr[j + <span class="hljs-number">1</span>] = tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>希尔排序</strong>：开始选定一个间隙n，每轮排序间隔n的元素，之后减小n再排序，直到n&#x3D;1。这么做大的元素会更快的往右边靠，减少之后的移动次数。</p><p><strong>快速排序</strong>：每轮找一个基准点进行分区，比基准点小的放到基准点左边，大的放到基准点右边。直到分区内元素个数小于等于1。</p><ol><li><p>单边循环快排</p><ol><li><p>以最右边元素作为基准点</p></li><li><p>i，j指针指向左边界的元素</p></li><li><p>j往右移，当找到比基准点小的元素就和i交换，i++</p></li><li><p>当交换完后i和基准点交换，这样基准点左边的元素就比基准点小</p></li></ol><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br>    quick(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<br>        <span class="hljs-keyword">return</span>;<br> <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> partition(arr, l, r);<br>    partition(arr, l, p - <span class="hljs-number">1</span>);<br>    partition(arr, p + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-comment">// 分区，返回中间下标</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<br>        <span class="hljs-keyword">return</span> l;<br><span class="hljs-type">int</span> <span class="hljs-variable">pv</span> <span class="hljs-operator">=</span> a[r];<span class="hljs-comment">// 基准点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> l; j &lt; r; ++j) &#123;<br>        <span class="hljs-keyword">if</span> (arr[j] &lt; pv) &#123;<br>            swap(arr, i, j);<br>            ++i;<br>        &#125;<br>    &#125;<br>    swap(arr, r, i);<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>双边循环快排(更快一点)</p><ol><li>以最左边元素作为基准点</li><li>i指向左边界，j指向右边界，两边互找</li><li>当i，j相遇时吧基准点和i交换</li></ol><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br>    quick(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<br>        <span class="hljs-keyword">return</span>;<br> <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> partition(arr, l, r);<br>    partition(arr, l, p - <span class="hljs-number">1</span>);<br>    partition(arr, p + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-comment">// 分区，返回中间下标</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pv</span> <span class="hljs-operator">=</span> arr[l];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l, j = r;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-comment">// 这两个while不能交换</span><br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; pv)<br>            --j;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pv)<br>            ++i;<br>        swap(arr, i, j);<br>    &#125;<br>    swap(arr, l, i);<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/else_img/%E6%8E%92%E5%BA%8F.png"></p></li></ol><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><h6 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h6><p>​无参构造刚创建出来的时候容量为0，有参则按传入的值或集合的大小作为容量</p><p>​<strong>add方法</strong>：首次添加元素时会创建一个容量为10的数组，之后每次添加元素容量不足时会按原数组容量的<strong>1.5倍</strong>（向下取整）创建新数组，把原数组的元素复制到新数组中，用新数组替换原数组。</p><p>​<strong>addAll方法</strong>：没有元素时扩容为Math.max(10, 实际元素个数)，有元素时为Math.max(原容量1.5倍, 实际元素个数)。</p><h6 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h6><p>当在使用迭代器时有其它线程修改数组时有两种<strong>策略</strong>：</p><ol><li><strong>fail-fast</strong>：在使用迭代器的线程立即报错</li><li><strong>fail-safe</strong>：发现有人修改了则采取一些对策，例如牺牲一些一致性来让整个遍历完成</li></ol><p><strong>原理</strong></p><p>​fail-fast是在创建迭代器时记录数组被修改的次数，每次获取下一个元素时判断现在数组的修改次数是否和之前记录的保持一致，如果不一致则报错（类似乐观锁）。</p><blockquote><p>ArrayList使用的第一种策略，CopyOnWriteArrayList是第二种策略（对策是添加把原集合复制出来，在新集合上进行修改，修改好后指向新集合。创建迭代器时会指向当前集合，遍历的是旧集合不影响（读写分离））；</p></blockquote><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><h6 id="与ArrayList的比较"><a href="#与ArrayList的比较" class="headerlink" title="与ArrayList的比较"></a>与ArrayList的比较</h6><ul><li>ArrayList<ol><li>基于数组，需要连续内存</li><li>随机访问快</li><li>尾部插入和插入性能可以，其它部分都会移动元素，性能低</li><li>可以利用cpu缓存，局部性原理</li></ol></li><li>LinkedList<ol><li>基于双向链表，无需连续内存</li><li>随机访问慢</li><li>头尾插入删除性能高</li><li>占用内存多</li></ol></li></ul><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><h6 id="链表过长时的解决方法"><a href="#链表过长时的解决方法" class="headerlink" title="链表过长时的解决方法"></a>链表过长时的解决方法</h6><ol><li><p><strong>数组扩容</strong>：put元素后检查，当链表长度大于8或元素总数大于阈值（阈值&#x3D;容量*负载因子）时会发生一次扩容，扩容后链表长度可能还是会大于8。</p><p>​当存的元素hash值都一样的时候扩容也不能缩短链表长度</p></li><li><p><strong>树化</strong>（jdk1.8）：若数组容量小于64时会先尝试扩容，当数组容量超过64且链表长度大于8（阈值）时会树化</p></li></ol><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><ul><li><p><strong>底层数据结构，1.7和1.8有何不同?</strong></p><ul><li>1.7为数组+链表，1.8为数组+(链表 | 红黑树)</li></ul></li><li><p><strong>为何要用红黑树，为何不一上来就树化，树化阈值为何是8，何时会树化，何时会退化成链表</strong></p><ol><li><p>大部分情况下链表长度是不会超过8的，只有在像Dos攻击时被注入大量key相同的元素时链表才会过长。红黑树用来防止链表过长时的性能下降。</p></li><li><p>hash表查找和更新的时间复杂度为O(1)，红黑树为O(log2(n))，且红黑树的TreeNode比链表的Node占用内存大，所以尽量使用链表</p></li><li><p>选择8是为了让树化几率足够小</p></li><li><p>树化条件：链表长度超过阈值 且 数组容量&gt;&#x3D;64</p></li><li><p>退化情况1：<strong>扩容时</strong>树被拆分，树元素个数&lt;&#x3D;6会退化成链表；</p><p>退化情况2：<strong>remove节点时</strong>，检查若root，root.left，root.right，root.left.left中有一个为null，则退化</p></li></ol></li><li><p><strong>索引是如何计算的？hashCode都有了为何还要hash()方法？数组容量为何是2^n？</strong></p><ol><li>调用对象的hashCode()方法获得原始hash，再调用HashMap的hash()方法二次哈希，最后<code> % capacity</code>（和桶的容量求余，等价于 <code>&amp;(capacity - 1)</code>) ）</li><li>为了提高综合高位数据，让哈希分布更加均匀</li><li>计算索引时，如果是2的n次幂可以使用位与运算代替取模，提高效率；扩容时<code>hash &amp; oldCap == 0</code>的元素留在原处，否则<code>新位置=旧位置 + oldCap</code></li></ol></li><li><p><strong>介绍一下put方法流程，1.7和1.8的有何不同？</strong></p><p>HashMap是懒惰创建数组的，首次使用才创建数组；</p><p>计算索引（hashCode() –&gt; hash() –&gt; 和桶大小求模）</p><p>如果桶下标没人占用，则创建Node占位返回</p><p>如果有人占用了</p><ol><li>如果是TreeNode走红黑树逻辑</li><li>如果是普通Node走链表逻辑，如果需要树化则走树化逻辑</li></ol><p>返回前检查容量是否超过阈值，超过则扩容</p><p>不同：</p><ol><li>1.7是头插法，1.8是尾插法</li><li>1.7是元素数量&gt;&#x3D;阈值且没有空位时才扩容，1.8是&gt;阈值时就扩容</li><li>1.8在扩容计算索引时有优化</li></ol></li><li><p><strong>加载因子为何默认0.75？</strong></p><p>在空间占用和查询时间之间取得较好的平衡</p><p>大于0.75，节省空间，但链表长了影响性能</p><p>小于0.75，冲突减少，但扩容频繁空间占用更多</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java虚拟机</title>
    <link href="/2023/02/18/java/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2023/02/18/java/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><p>学习自:<a href="https://shuyi.tech/">陈树义的博客 (shuyi.tech)</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="什么是虚拟机"><a href="#什么是虚拟机" class="headerlink" title="什么是虚拟机"></a>什么是虚拟机</h3><p>​<strong>Java跨平台</strong>：Java 语言并不直接将代码编译成与系统有关的机器码，而是编译成一种特定的语言规范，这种语言规范我们称之为<strong>字节码</strong>。Java 虚拟机会解析字节码文件的内容，并将其翻译为各操作系统能理解的机器码。<strong>实际上 Java 虚拟机运行的是字节码文件</strong></p><p><img src="/img/jvm_img/java%E8%B7%A8%E5%B9%B3%E5%8F%B0.png" alt="一次编译 到处运行"></p><p>​ Java 虚拟机就是一个字节码翻译器，它将字节码文件翻译成各个系统对应的机器码，确保字节码文件能在各个系统正确运行</p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>​编译器分类：前端编译器、JIT 编译器（Just In Time Compiler，即时编译器）和AOT编译器（Ahead of Time Compiler，静态提前编译器）</p><h4 id="前端编译器"><a href="#前端编译器" class="headerlink" title="前端编译器"></a>前端编译器</h4><p>​ JDK 的安装目录里有一个 javac 工具，就是它将 Java 代码翻译成字节码，这个工具我们叫做编译器。相对于后面要讲的其他编译器，其因为处于编译的前期，因此又被成为<strong>前端编译器</strong></p><p><strong>作用</strong></p><p>​源代码 –&gt; 字节码</p><p><strong>过程</strong></p><ol><li>词法分析、语法分析：javac编译器”读懂”源代码，生成语法树</li><li>填充符号表：编译阶段无法知道代码中引用到的其他类的地址，先用一个符号填充，到类加载阶段再替换为真实地址</li><li>分析注解</li><li>生成字节码</li></ol><h4 id="JIT-编译器"><a href="#JIT-编译器" class="headerlink" title="JIT 编译器"></a>JIT 编译器</h4><p>​生成字节码后，可以选择使用java解释器运行，或者使用JIT编译器先将字节码编译成机器码再运行。前者启动速度快但运行速度慢，而后者启动速度慢但运行速度快。为了运行速度以及效率，我们通常采用<strong>两者相结合</strong>的方式进行 Java 代码的编译执行</p><p><strong>作用</strong></p><p>​字节码 –&gt; 机器码</p><p><strong>类型</strong>：</p><p>​HotSpot 虚拟机内置有两种JIT编译器：Client Compiler 和Server Compiler，简称为C1编译模式、C2编译模式。</p><p>​不同：C1编译模式编译速度快、优化保守；C2编译模式编译较慢、优化相对较好。</p><p><strong>参数</strong>：</p><p>​默认是混合起来用的(Mixed Mode)，编译时可使用参数<code>-client</code>或<code>-server</code>指定只使用其中一种</p><p>​<code>-Xint</code>：只解释运行，不编译。</p><p>​<code>-Xcomp</code>：优先编译</p><h4 id="AOT编译器"><a href="#AOT编译器" class="headerlink" title="AOT编译器"></a>AOT编译器</h4><p>​AOT 编译器则能将源代码直接编译为本地机器码，速度快于前端编译器，慢于即时编译器。存在的目的在于Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验。</p><p><strong>作用</strong></p><p>​源代码 –&gt; 机器码</p><h3 id="字节码文件结构"><a href="#字节码文件结构" class="headerlink" title="字节码文件结构"></a>字节码文件结构</h3><p>​《Java 虚拟机规范》规定了 Java 虚拟机结构、Class 类文件结构、字节码指令等内容。</p><p>字节码文件结构是一组以 8 位为最小基础的十六进制数据流。</p><p>字节码由两种基本数据类型组成：</p><ul><li>无符号数：u1、u2、u4、u8 六七分别代表 1 个字节、2 个字节、4 个字节、8 个字节的无符号数</li><li>表：由多个无符号数或其他表组成的数据结构，以<code>_info</code>结尾。字节码文件本质就是一张表</li></ul><p><img src="/img/jvm_img/%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90.png"></p><h4 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h4><p>​Class 文件的第 1 - 4 个字节代表了该文件的魔数（Magic Number），其值固定是：0xCAFEBABE。作用是确定这个文件是否为一个能被虚拟机接受的 Class 文件</p><h4 id="文件版本"><a href="#文件版本" class="headerlink" title="文件版本"></a>文件版本</h4><p>​Class 文件的第 5 - 6 个字节代表了 Class 文件的次版本号（Minor Version），即编译该 Class 文件的 JDK 次版本号。</p><p>​Class 文件的第 7 - 8 个字节代表了 Class 文件的主版本号（Major Version），即编译该 Class 文件的 JDK 主版本号。</p><p>​JDK1.8的十六进制版本号为0000 0034</p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>​占两个字节的constant_pool_count表示常量池中的常量个数</p><p>​<code>cp_info</code>表示整个常量池，里面的结构为<code>常量类型(u2) + 常量的数据结构(不定长) </code>的组合，常量的数据结构共有14 种 类型</p><p>​<img src="/img/jvm_img/%E5%B8%B8%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>​access_flags用于识别一些类或者接口层次的访问信息</p><p>​<img src="/img/jvm_img/%E5%AD%97%E8%8A%82%E7%A0%81%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97.png"></p><p>​访问标志可能是由多个标志名称组成的，如0021是由0x0001 | 0x0020得来的</p><h4 id="类索引、父类索引、接口索引"><a href="#类索引、父类索引、接口索引" class="headerlink" title="类索引、父类索引、接口索引"></a>类索引、父类索引、接口索引</h4><p>​<strong>类索引</strong>：用于确定这个类的全限定名，大小为u2，指向常量池中的常量</p><p>​<strong>父类索引</strong>：引用于确定这个类的父类的全限定名，大小为u2，指向常量池中的常量</p><p>​<strong>接口索引</strong>：用来描述哪个类实现了哪些接口，u2 记录接口数量，后面interfaces记录所有的接口信息</p><h4 id="字段表"><a href="#字段表" class="headerlink" title="字段表"></a>字段表</h4><p>​用于描述接口或者类中声明的变量，字段表的每个字段用一个名为 field_info 的表来表示</p><p>​<img src="/img/jvm_img/%E5%AD%97%E6%AE%B5%E4%BF%A1%E6%81%AF%E8%A1%A8.png"></p><h4 id="方法表"><a href="#方法表" class="headerlink" title="方法表"></a>方法表</h4><p>​用于描述类中的方法信息</p><p>​<img src="/img/jvm_img/%E6%96%B9%E6%B3%95%E4%BF%A1%E6%81%AF%E8%A1%A8.png"></p><h4 id="属性表"><a href="#属性表" class="headerlink" title="属性表"></a>属性表</h4><p>​描述<strong>类</strong>的属性信息</p><h4 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h4><p>​可以通过<code>javap -verbose 文件名.class</code>反编译将字节码文件全部分析出来</p><p>​<img src="/img/jvm_img/%E5%8F%8D%E7%BC%96%E8%AF%91.png"></p><p>​<img src="/img/jvm_img/%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E6%95%B4%E4%BD%93%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><h3 id="虚拟机内存结构"><a href="#虚拟机内存结构" class="headerlink" title="虚拟机内存结构"></a>虚拟机内存结构</h3><p>​字节码文件会加载进虚拟机内存中，进行一系列初始化后运行得出结果。</p><p>​Java 虚拟机的内存结构可以分为公有和私有两部分。公有指的是所有线程都共享的部分，指的是 <strong>Java 堆</strong>、<strong>方法区</strong>、<strong>常量池</strong>。私有指的是每个线程的私有数据，包括：<strong>PC寄存器</strong>、<strong>Java 虚拟机栈</strong>、<strong>本地方法栈</strong>。</p><h4 id="公有部分"><a href="#公有部分" class="headerlink" title="公有部分"></a>公有部分</h4><p>​<strong>java堆</strong>：专门用于 Java 实例对象的内存分配，几乎所有实例对象都在会这里进行内存的分配，有些小对象可能在栈上分配内存</p><p>根据对象存活时间，堆可以分为新生代、老年代、永久代（方法区）</p><p><img src="/img/jvm_img/%E5%A0%86%E7%BB%93%E6%9E%84.png"></p><ol><li><p><strong>新生代</strong>：</p><ul><li>Eden （伊甸）区：Java新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当Eden区内存不够的时候就会触发MinorGC，对新生代区进行一次垃圾回收。</li><li>ServivorTo、ServivorFrom：每次MinorGC都会清理serviorFrom和Eden区的对象，然后将幸存对象<strong>复制到</strong>ServiorTo中（达到老年代指标的对象存到老年代），随后清空Eden和ServicorFrom中的对象，最后交换serviorTo和ServiorFrom。（<strong>复制算法</strong>）</li></ul><p>三个区域的比例Eden：from ：to &#x3D; 8:1:1 ，通过<code>-XX:MaxTenuringThreshold = </code>设置GC多少次晋升到老年代，默认15。</p></li><li><p><strong>老年代</strong>：</p><p>​当老年代的空间不足时会触发MajorGC，首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象（<strong>标记清除法</strong>）</p></li><li><p><strong>方法区</strong>：</p><p>​指内存的永久保存区域，主要存放Class和Meta（元数据）的信息，在Java8中，永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代。元空间与永久代之间最大的区别在于：<strong>元空间并不在虚拟机中，而是使用本地内存</strong></p></li></ol><h4 id="私有部分"><a href="#私有部分" class="headerlink" title="私有部分"></a>私有部分</h4><ol><li><strong>PC 寄存器</strong>：保存线程当前正在执行的方法，任意时刻，一条 Java 虚拟机线程只会执行一个方法的代码，其地址被存在 PC 寄存器中。</li><li><strong>Java 虚拟机栈</strong>：用来存储栈帧，栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息</li><li><strong>本地方法栈</strong>：用于管理本地方法（非java代码的接口）的调用</li></ol><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>指虚拟机将字节码读取进内存，从而进行解析、运行等整个过程</p><p>类加载过程分为：<strong>加载、验证、准备、解析、初始化、使用、卸载</strong></p><p>加载：</p><p>​把代码数据加载到内存中</p><p>验证：</p><p>​校验Class字节码文件格式是否符合JVM规范，加载完字节码后在内存中创建对应的Class对象，之后检查是否有语法错误</p><p><strong>准备</strong>：</p><p>​给类分配内存，只会先给static修饰的变量分配内存并赋予对应类型的0值(0, “”, false,null)，而修饰了final的话则直接赋予用户希望的值</p><p>解析：</p><p>​将引用在常量池中的符号引用替换成直接其在内存中的直接引用</p><p><strong>初始化</strong>：</p><p>​JVM 会根据<strong>语句执行顺序</strong>对类对象进行初始化</p><p>​类初始化：给静态变量赋值，执行静态代码块，有父类会先类初始化父类，main函数所在类会被类初始化</p><p>​对象初始化：会先类初始化。给成员变量赋值，执行普通代码块，执行构造函数</p><p>​整体上就是惰性初始化，只有用到时才进行初始化</p><p>使用：</p><p>​JVM 开始从入口方法开始执行用户的程序代码</p><p>卸载：</p><p>​执行完程序，销毁Class对象，最后JVM也退出内存</p><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><blockquote><p>如果一个对象不再被引用，则会被当做垃圾而回收。</p></blockquote><h4 id="如何知道对象是否被引用"><a href="#如何知道对象是否被引用" class="headerlink" title="如何知道对象是否被引用"></a>如何知道对象是否被引用</h4><ol><li><p>计数方法（已淘汰）：对象被引用时就+1，不再引用就-1。存在的问题：**循环引用(**A引用B，B引用A，但没有被其它对象引用，两者引用都不为0，无法被回收)</p></li><li><p>可达性算法<strong>GC Root Tracing</strong>：从 GC Root 出发，所有可达的对象都是存活的对象，不可达的为垃圾。</p><p>GC Root 就是一组活跃引用的集合，通常GC Root包括：</p><ul><li>所有当前被加载的 Java 类</li><li>Java 类的引用类型静态变量</li><li>Java类的运行时常量池里的引用类型常量</li><li>VM的一些静态数据结构里指向GC堆里的对象的引用</li><li>等等</li></ul></li></ol><h4 id="如何进行垃圾回收"><a href="#如何进行垃圾回收" class="headerlink" title="如何进行垃圾回收"></a>如何进行垃圾回收</h4><ol><li><strong>标记清除法</strong>：标记所有由 GC Root 触发的可达对象，清除所有未被标记的对象。缺点：会有产生内存碎片的问题。</li><li><strong>复制算法</strong>：将原有的内存空间分为两块，每次只使用一块，垃圾回收时将存活的对象复制到另一块，清除当前块内所有对象。缺点：内存没有被完全使用。</li><li><strong>标记压缩算法</strong>：上面两种方法的结合。标记存活对象，复制到内存的一边，清空剩余区域。</li></ol><p>实际是每种方法结合着用。新生代存活对象较少，适合复制算法；老年代存活对象多，适合标记清除法或标记压缩算法，减少对象的移动。</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p><strong>Minor GC&#x2F;Young GC</strong>：从年轻代空间回收内存</p><p><strong>Major GC&#x2F;Old GC</strong>：从老年代空间回收内存</p><p><strong>Full GC</strong>：清理年轻代、老年代和永久代，当发现年轻代空间太小或永久代空间不足时会触发</p><p><strong>Stop-The-World</strong>：在进行垃圾回收时因为标记或清理的需要，必须让所有执行任务的线程停止执行任务，从而让垃圾回收线程回收垃圾的时间间隔</p><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><h4 id="串行回收器（Serial）"><a href="#串行回收器（Serial）" class="headerlink" title="串行回收器（Serial）"></a><strong>串行回收器（Serial）</strong></h4><p>指使用单线程进行垃圾回收的回收器</p><p><strong>分类</strong></p><ol><li><strong>新生代串行回收器</strong>：采用复制算法，垃圾回收时其他线程需要暂停（<strong>Stop-The-World</strong>）</li><li><strong>老年代串行回收器</strong>：采用标记压缩算法，也会Stop-The-World，可以与多种新生代回收器配合使用</li></ol><p><strong>参数</strong></p><ul><li><p><code>-XX:UseSerialGC</code>：新生代、老年代都使用串行回收器。</p></li><li><p><code>-XX:UseParNewGC</code>：新生代使用 ParNew 回收器（多线程），老年代使用串行回收器。</p></li><li><p><code>-XX:UseParallelGC</code>：新生代使用 ParallelGC 回收器（多线程），老年代使用串行回收器。</p></li></ul><h4 id="并行回收器（Parallel）"><a href="#并行回收器（Parallel）" class="headerlink" title="并行回收器（Parallel）"></a>并行回收器（Parallel）</h4><p>指使用多线程进行垃圾回收，可以有效缩短垃圾回收所使用的时间</p><p><strong>分类</strong></p><ol><li><p><strong>新生代ParNew 回收器</strong>：只是简单地将串行回收器多线程化</p><p><strong>启动参数</strong></p><ul><li><code>-XX:+UseParNewGC</code>：新生代使用 ParNew 回收器，老年代使用串行回收器。</li><li><code>-XX:UseConcMarkSweepGC</code>：新生代使用 ParNew 回收器，老年代使用 CMS。</li><li><code>-XX:ParallelGCThreads</code>：指定 ParNew 回收器的工作线程数量。</li></ul></li><li><p><strong>新生代 Parallel GC 回收器</strong>：相比于ParNew更加<strong>注重系统的吞吐量</strong></p><p><strong>设置参数</strong></p><ul><li><code>-XX:+UseAdaptiveSizePolicy</code>：自动调节新生代的大小、Eden 和 Survivor 的比例、晋升老年代的对象年龄等参数</li><li><code>-XX:MaxGCPauseMillis</code>：设置最大垃圾收集停顿时间</li><li><code>-XX:GCTimeRatio</code>：设置吞吐量大小</li></ul><p><strong>启动参数</strong></p><ul><li><code>-XX:+UseParallelGC</code>：新生代使用 Parallel 回收器，老年代使用串行回收器。</li><li><code>-XX:+UseParallelOldGC</code>：新生代使用 ParallelGC 回收器，老年代使用 ParallelOldGC 回收器。</li></ul></li><li><p><strong>老年代 ParallelOldGC 回收器</strong>：注重吞吐量的老年代的回收器</p><p><strong>启动参数</strong></p><ul><li><code>-XX:UseParallelOldGC</code>：新生代使用 ParallelGC 回收器，老年代使用 ParallelOldGC 回收器。</li></ul></li></ol><blockquote><p>jdk1.8 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</p></blockquote><h4 id="CMS-回收器"><a href="#CMS-回收器" class="headerlink" title="CMS 回收器"></a>CMS 回收器</h4><p>Concurrent Mark Sweep（并发标记扫描），CMS 回收器主要<strong>关注系统停顿时间</strong></p><p><strong>工作流程</strong>：</p><p>​<strong>初始标记</strong>：标记所有的根对象，包括根对象直接引用的对象，以及被年轻代中所有存活的对象所引用的老年代对象，会Stop-The-World，时间短</p><p>​<strong>并发标记</strong>：标记所有可达的对象，时间长，和用户线程并行。<strong>此阶段由于与用户线程并发执行，对象的状态可能会发生变化</strong>，JVM会将改变的区域标记为“脏”区（卡片标记）</p><p>​<strong>并发预清理</strong>：标记老年代存活的对象，目的是为了让重新标记阶段的STW尽可能短，和用户线程并行。</p><p>​<code>-XX:-CMSPrecleaningEnabled</code>：关闭并发预处理</p><p>​<strong>最终标记&#x2F;重新标记</strong>：重新扫描堆中的对象，之前的扫描都是并发的，可能跟不上修改速度。目标是完成老年代中所有存活对象的标记，会触发Stop The World</p><p>​<strong>并发清除和并发重置</strong>：用户线程被重新激活，不需要STW，目标是删除不可达的对象，并为下次GC做准备</p><h4 id="G1回收器"><a href="#G1回收器" class="headerlink" title="G1回收器"></a>G1回收器</h4><p>​G1（<strong>Garbage First</strong>，垃圾优先）</p><p>​ JDK 1.7 中使用的全新垃圾回收器，JDK9之后的默认垃圾收集器，是一款面向服务端应用的垃圾收集器</p><p>​<img src="/img/jvm_img/G1%E5%9B%9E%E6%94%B6%E5%99%A8.png"></p><p>​在 G1 回收器中，把堆内存分割为很多不相关的区域(region物理上不连续),把堆分为2048个区域。用不同的region可以来表示Eden、幸存者0区、幸存者1区、老年代等，G1回收器优先回收价值最大的Region</p><p><strong>分区Region</strong></p><ul><li>每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂。可通过<code>-XX :G1HeapRegionSize</code>设定大小</li><li><strong>Humongous</strong>内存区域主要用于存储大对象，如果超过1.5个region, 就放到H</li></ul><p><strong>工作流程</strong>：</p><ul><li>新生代 GC（Young GC）：启动多线程执行年轻代回收，会STW</li><li>老年代并发标记周期（Concurrent Marking）：所有将要被回收的区域会被 G1 记录在一个称之为 Collection Set 的集合中</li><li>混合收集（Mixed GC）：首先针对 Collection Set 中的内存进行回收，在混合回收的时候，也会执行多次新生代 GC 和 混合 GC</li><li>如果需要，可能进行 FullGC</li></ul><h3 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h3><h4 id="堆栈空间配置"><a href="#堆栈空间配置" class="headerlink" title="堆栈空间配置"></a>堆栈空间配置</h4><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-Xms</td><td align="center">初始堆大小</td></tr><tr><td align="center">-Xmx</td><td align="center">最大堆空间</td></tr><tr><td align="center">-Xmn</td><td align="center">设置新生代大小</td></tr><tr><td align="center">-XX:SurvivorRatio</td><td align="center">设置新生代eden空间和from&#x2F;to空间的比例关系</td></tr><tr><td align="center">-XX:PermSize</td><td align="center">方法区（永久代）初始大小（JDK1.7）</td></tr><tr><td align="center">-XX:MaxPermSize</td><td align="center">方法（永久代）区最大大小（JDK1.7）</td></tr><tr><td align="center">-XX:MetaspaceSize</td><td align="center">元空间GC阈值（JDK1.8）</td></tr><tr><td align="center">-XX:MaxMetaspaceSize</td><td align="center">最大元空间大小（JDK1.8）</td></tr><tr><td align="center">-Xss</td><td align="center">栈大小</td></tr><tr><td align="center">-XX:MaxDirectMemorySize</td><td align="center">直接内存大小，默认为最大堆空间</td></tr><tr><td align="center">-XX:+PrintGCDetails</td><td align="center">查看内存区域的分配信息</td></tr></tbody></table><p><strong>实例</strong></p><p><strong>堆配置</strong></p><p><code>java -Xms20m -Xmx30m</code>：设置 JVM 的初始堆大小为 20M，最大堆空间为 30M</p><p><code>java -Xms20m -Xmn10M</code>：设置 JVM 堆初始大小为20M，其中年轻代的大小为 10M</p><p><code>java -Xms20m -Xmn10M -XX:SurvivorRatio=2 -XX:+PrintGCDetails</code>：设置 JVM 堆初始大小为20M；年轻代的大小为 10M，其中比例为eden &#x2F; from &#x3D; eden &#x2F; to &#x3D; 2，即5M：2.5M：2.5M；打印内存区域的分配信息</p><p><code>java -XX:PermSize10m -XX:MaxPermSize50m -XX:+PrintGCDetails</code>：（jdk1.7）设置永久代初始大小为10M，最大50M</p><p><code>java -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=50m -XX:+PrintGCDetails</code>：设置元空间发生 GC 的初始阈值为10M，元空间最大大小为50M，默认为机器内存大小</p><p><strong>栈配置</strong></p><p><code>java -Xss2m</code>：设置栈空间最大为2M</p><p><code>java -XX:MaxDirectMemorySize=50m</code>:设置直接内存大小为50M</p><h4 id="查看参数"><a href="#查看参数" class="headerlink" title="查看参数"></a>查看参数</h4><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-XX:+PrintVMOptions</td><td align="center">程序运行时，打印虚拟机接受到的命令行显式参数。</td></tr><tr><td align="center">XX:+PrintCommandLineFlags</td><td align="center">打印传递给虚拟机的显式和隐式参数。</td></tr><tr><td align="center">-XX:+PrintFlagsFinal</td><td align="center">打印所有的系统参数的值</td></tr></tbody></table><p><strong>实例</strong></p><p><code>java  -XX:+UseSerialGC -XX:+PrintVMOptions</code>：打印显示参数（自己设定的参数）</p><p><code>java  -XX:+UseSerialGC -XX:+PrintCommandLineFlags</code>: 打印显式和隐式参数（默认参数）</p><p><code>java  -XX:+UseSerialGC -XX:+PrintFlagsFinal 文件名  &gt; jvm_flag_final.txt</code>：打印所有系统参数并重定向到</p><p>jvm_flag_final.txt文件中</p><h4 id="追踪类信息参数"><a href="#追踪类信息参数" class="headerlink" title="追踪类信息参数"></a>追踪类信息参数</h4><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-verbose:class</td><td align="center">跟踪类的加载和卸载</td></tr><tr><td align="center">-XX:+TraceClassLoading</td><td align="center">跟踪类的加载</td></tr><tr><td align="center">-XX:+TraceClassUnloading</td><td align="center">跟踪类的卸载</td></tr><tr><td align="center">-XX:+PrintClassHistogram</td><td align="center">显示类信息柱状图</td></tr></tbody></table><h4 id="GC日志参数"><a href="#GC日志参数" class="headerlink" title="GC日志参数"></a>GC日志参数</h4><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><strong>-XX:PrintGC</strong></td><td align="center">打印GC日志</td></tr><tr><td align="center"><strong>-XX:+PrintGCDetails</strong></td><td align="center">打印详细的GC日志。还会在退出前打印堆的详细信息。</td></tr><tr><td align="center">-XX:+PrintHeapAtGC</td><td align="center">每次GC前后打印堆信息。</td></tr><tr><td align="center">-XX:+PrintGCTimeStamps</td><td align="center">打印GC发生的时间。</td></tr><tr><td align="center">-XX:+PrintGCApplicationConcurrentTime</td><td align="center">打印应用程序的执行时间</td></tr><tr><td align="center">-XX:+PrintGCApplicationStoppedTime</td><td align="center">打印应用由于GC而产生的停顿时间</td></tr><tr><td align="center">-XX:+PrintReferenceGC</td><td align="center">跟踪软引用、弱引用、虚引用和Finallize队列。</td></tr><tr><td align="center">-XLoggc</td><td align="center">将GC日志以文件形式输出。</td></tr></tbody></table><p><strong>实例</strong></p><p><code>java -XX:+UseSerialGC -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -XX:+PrintGC Demo</code>：打印简单日志</p><ul><li>-XX:+UseSerialGC 表示强制使用Serial+SerialOld收集器组合</li><li>-Xms20m 表示堆空间初始大小为 20 M。</li><li>-Xmx20m 表示堆空间最大大小为 20 M。</li><li>-Xmn10m 表示新生代大小为 10M。</li><li>-XX:SurvivorRatio&#x3D;8 表示Eden:Survivor&#x3D;8:1</li><li>-XX:PrintGC 打印GC日志</li></ul><p>​<img src="/img/jvm_img/GC%E5%8F%82%E6%95%B01.png" alt="回收前-&gt;回收后(可用)"></p><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><h4 id="jps指令"><a href="#jps指令" class="headerlink" title="jps指令"></a>jps指令</h4><p>jps（Java Virtual Machine Process Status Tool）：列出所有的 Java 进程</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-q</td><td align="center">指定jps只输出进程ID</td></tr><tr><td align="center">-m</td><td align="center">输出传递给Java进程的参数</td></tr><tr><td align="center">-l</td><td align="center">输出主函数的完整路径</td></tr><tr><td align="center">-v</td><td align="center">显示传递给Java虚拟机的参数</td></tr></tbody></table><h4 id="jstat指令"><a href="#jstat指令" class="headerlink" title="jstat指令"></a>jstat指令</h4><p>jstate（Java Virtual Machine Statistics Monitoring Tool）：观察 Java 堆信息的详细情况</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">-class</td><td align="center">监视类装载、卸载数量、总空间以及类装载所耗费的时间</td></tr><tr><td align="center">-gc</td><td align="center">监视Java堆状况，包括Eden区、两个Survivor区、老年代、永久代等的容量、已用空间、GC时间合计等信息</td></tr><tr><td align="center">-gccapacity</td><td align="center">监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大、最小空间</td></tr><tr><td align="center">-gcutil</td><td align="center">监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td></tr><tr><td align="center">-gccause</td><td align="center">与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td></tr><tr><td align="center">-gcnew</td><td align="center">监视新生代GC状况</td></tr><tr><td align="center">-gcnewcapacity</td><td align="center">监视内容与-gcnew基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td align="center">-gcold</td><td align="center">监视老年代GC状况</td></tr><tr><td align="center">-gcoldcapacity</td><td align="center">监视内容与-gcold基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td align="center">-gcpermcapacity</td><td align="center">输出永久代使用到的最大、最小空间</td></tr><tr><td align="center">-compiler</td><td align="center">输出JIT编译器编译过的方法、耗时信息</td></tr><tr><td align="center">-printcompilation</td><td align="center">输出已经被JIT编译的方法</td></tr></tbody></table><p><strong>实例</strong></p><p><code>jstat -gcutil 2366 </code>：查看java进程2366的堆使用情况</p><h4 id="jinfo指令"><a href="#jinfo指令" class="headerlink" title="jinfo指令"></a>jinfo指令</h4><p>查看正在运行的 Java 应用程序的扩展参数</p><h4 id="jmap-命令"><a href="#jmap-命令" class="headerlink" title="jmap 命令"></a>jmap 命令</h4><p>可以生成 Java 程序的 Dump 文件（当程序产生异常时，用来记录当时的程序状态信息），也可以查看堆内对象实例的统计信息、查看 ClassLoader 的信息以及 finalizer 队列</p><h4 id="jhat-命令"><a href="#jhat-命令" class="headerlink" title="jhat 命令"></a>jhat 命令</h4><p>用于分析 Java 应用的对快照内存，可以用来分析jmap生成dump文件</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer</title>
    <link href="/2023/02/18/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/"/>
    <url>/2023/02/18/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指Offer"><a href="#剑指Offer" class="headerlink" title="剑指Offer"></a>剑指Offer</h2><p><a href="https://leetcode.cn/problem-list/e8X3pBZi/">剑指 Offer（专项突击版） - 力扣（LeetCode）</a></p><h3 id="15题（找出所有变位词）"><a href="#15题（找出所有变位词）" class="headerlink" title="15题（找出所有变位词）"></a>15题（找出所有变位词）</h3><p>用滑动窗口+hash可以解。</p><p>再此基础上，可以用统计每种字母数量之差来优化</p><h3 id="20题（回文子串的个数）"><a href="#20题（回文子串的个数）" class="headerlink" title="20题（回文子串的个数）"></a>20题（回文子串的个数）</h3><p>中心扩散法，注意中心可以是一个字母，也可以是两个</p><h3 id="26题（重排链表）"><a href="#26题（重排链表）" class="headerlink" title="26题（重排链表）"></a>26题（重排链表）</h3><p>遇到链表题，可以想到的思路有反转链表(或反转部分链表)，快慢指针（如用于找中点）</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2023/02/15/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/"/>
    <url>/2023/02/15/%E4%B8%AD%E9%97%B4%E4%BB%B6/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><blockquote><p>RabbitMQ是一个被广泛使用的开源消息队列。它是轻量级且易于部署的，它能支持多种消息协议。RabbitMQ可以部署在分布式和联合配置中，以满足高规模、高可用性的需求。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><ol><li><p>首先需要安装Erlang环境</p><ul><li><p>Erlang版本和RabbitMQ版本对照：<a href="https://www.rabbitmq.com/which-erlang.html">RabbitMQ Erlang Version Requirements — RabbitMQ</a></p></li><li><p>下载：<a href="https://www.erlang.org/downloads">Downloads - Erlang&#x2F;OTP</a> 选择安装路径后一路next</p></li></ul></li><li><p>安装RabbitMQ</p><ul><li><p>下载：<a href="https://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ — RabbitMQ</a> 选择安装路径后一路next</p></li><li><p>下载完进入sbin目录，cmd窗口输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br></code></pre></td></tr></table></figure><p>下载插件</p></li><li><p>点击sbin目录下的rabbitmq-service.bat启动</p></li><li><p>访问：<a href="http://localhost:15672/">http://localhost:15672</a> 打开控制面板，默认账户：guest，默认密码：guest</p></li></ul></li></ol><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>见微服务&#x2F;消息队列</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>详细见微服务&#x2F;消息队列</p><h3 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>功能：下订单时发送一条消息到延时队列中，若超时未付款则转发消息到真正取消订单的消息队列中</p><ol start="0"><li><p>在RabbitMQ的控制面板创建用户，账号密码为mall，创建虚拟目录&#x2F;mall，给mall用户&#x2F;mall的所有权限</p></li><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">rabbitmq:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment"># rabbitmq的连接地址</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># rabbitmq的连接端口号</span><br>        <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/mall</span> <span class="hljs-comment"># rabbitmq的虚拟host</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">mall</span> <span class="hljs-comment"># rabbitmq的用户名</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">mall</span> <span class="hljs-comment"># rabbitmq的密码</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置类，用于创建交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.dto;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">QueueEnum</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息通知队列</span><br><span class="hljs-comment">     */</span><br>    QUEUE_ORDER_CANCEL(<span class="hljs-string">&quot;mall.order.direct&quot;</span>, <span class="hljs-string">&quot;mall.order.cancel&quot;</span>, <span class="hljs-string">&quot;mall.order.cancel&quot;</span>),<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息通知ttl队列</span><br><span class="hljs-comment">     */</span><br>    QUEUE_TTL_ORDER_CANCEL(<span class="hljs-string">&quot;mall.order.direct.ttl&quot;</span>, <span class="hljs-string">&quot;mall.order.cancel.ttl&quot;</span>, <span class="hljs-string">&quot;mall.order.cancel.ttl&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String exchange;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队列名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 路由键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String routeKey;<br><br>    QueueEnum(String exchange, String name, String routeKey) &#123;<br>        <span class="hljs-built_in">this</span>.exchange = exchange;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.routeKey = routeKey;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义交换机和消息队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMqConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  订单消息实际消费队列所绑定的交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">orderDirect</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (DirectExchange) ExchangeBuilder<br>            .directExchange(QueueEnum.QUEUE_ORDER_CANCEL.getExchange()) <span class="hljs-comment">// 定向交换机，设定名称</span><br>            .durable(<span class="hljs-literal">true</span>)  <span class="hljs-comment">// 是否持久化</span><br>            .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单延迟队列队列所绑定的交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">orderTTLDirect</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (DirectExchange) ExchangeBuilder<br>            .directExchange(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getExchange()) <span class="hljs-comment">// 定向交换机，设定名称</span><br>            .durable(<span class="hljs-literal">true</span>)  <span class="hljs-comment">// 是否持久化</span><br>            .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单实际消费队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">orderQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(QueueEnum.QUEUE_ORDER_CANCEL.getName());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单延迟队列（死信队列）</span><br><span class="hljs-comment">     * 当订单超时后被转发到订单队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">orderTTLQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder<br>            .durable(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getName())<br>            .withArgument(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, QueueEnum.QUEUE_ORDER_CANCEL.getExchange())<span class="hljs-comment">//到期后转发的交换机</span><br>            .withArgument(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, QueueEnum.QUEUE_ORDER_CANCEL.getRouteKey())<span class="hljs-comment">//到期后转发的路由键</span><br>            .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将订单队列绑定到交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">orderBinding</span><span class="hljs-params">(DirectExchange orderDirect, Queue orderQueue)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder<br>            .bind(orderQueue)<br>            .to(orderDirect)<br>            .with(QueueEnum.QUEUE_ORDER_CANCEL.getRouteKey());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将订单延迟队列绑定到交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    Binding <span class="hljs-title function_">orderTtlBinding</span><span class="hljs-params">(DirectExchange orderTTLDirect,Queue orderTTLQueue)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder<br>            .bind(orderTTLQueue)<br>            .to(orderTTLDirect)<br>            .with(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getRouteKey());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>编写消息的生产者和消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取消订单消息生产者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CancelOrderSender</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> AmqpTemplate amqpTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(Long orderId, <span class="hljs-keyword">final</span> Long delayTime)</span> &#123;<br>        <span class="hljs-comment">// 消息处理器，设置超时时间</span><br>        <span class="hljs-type">MessagePostProcessor</span> <span class="hljs-variable">messagePostProcessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessagePostProcessor</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">postProcessMessage</span><span class="hljs-params">(Message message)</span> <span class="hljs-keyword">throws</span> AmqpException &#123;<br>                message.getMessageProperties().setExpiration(String.valueOf(delayTime));<br>                <span class="hljs-keyword">return</span> message;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 发送消息</span><br>        amqpTemplate.convertAndSend(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getExchange(), <span class="hljs-comment">// 发送到的交换机</span><br>                QueueEnum.QUEUE_TTL_ORDER_CANCEL.getRouteKey(), <span class="hljs-comment">// 路由Key</span><br>                orderId,    <span class="hljs-comment">// 消息</span><br>                messagePostProcessor    <span class="hljs-comment">// 消息处理器</span><br>        );<br>        log.info(<span class="hljs-string">&quot;订单id:&#123;&#125;&quot;</span>, orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取消订单消息消费者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CancelOrderReceiver</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OmsPortalOrderService omsPortalOrderService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;mall.order.cancel&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        omsPortalOrderService.cancelOrder(orderId);<br>        log.info(<span class="hljs-string">&quot;处理取消订单消息的id:&#123;&#125;&quot;</span>, orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OmsPortalOrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OmsPortalOrderService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CancelOrderSender cancelOrderSender;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">generateOrder</span><span class="hljs-params">(OrderParam orderParam)</span> &#123;<br>        <span class="hljs-comment">// 下单操作，生成订单和订单id</span><br>        log.info(<span class="hljs-string">&quot;下单操作....&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br>        <span class="hljs-comment">// 下完单后发送一个延迟消息，若期间没有付款则取消订单</span><br>        sendDelayMessageCancelOrder(orderId);<br>        <span class="hljs-keyword">return</span> CommonResult.success(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;下单成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelOrder</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;取消订单，id:&#123;&#125;&quot;</span>, orderId);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendDelayMessageCancelOrder</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        <span class="hljs-comment">// 30秒</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">delayTimes</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span> * <span class="hljs-number">1000L</span>;<br>        cancelOrderSender.sendMessage(orderId, delayTimes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;订单管理&quot;)</span><br><span class="hljs-meta">@RestController(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OmsPortalOrderController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> OmsPortalOrderService omsPortalOrderService;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;根据购物车信息生成订单&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/generateOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">generateOrder</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderParam orderParam)</span> &#123;<br>        <span class="hljs-keyword">return</span> omsPortalOrderService.generateOrder(orderParam);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>中间件</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2023/02/14/%E4%B8%AD%E9%97%B4%E4%BB%B6/Mongodb/"/>
    <url>/2023/02/14/%E4%B8%AD%E9%97%B4%E4%BB%B6/Mongodb/</url>
    
    <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><blockquote><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><p>Mongo是一种NoSql数据库，：</p><p>1.对数据库高并发读写。</p><p>2、对海量数据的高效率存储和访问。</p><p>3、对数据库的高可扩展性和高可用性</p></blockquote><p> <a href="https://spring.io/projects/spring-data-mongodb#learn">官方文档</a></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><strong>适用场景</strong></p><p>1、网站数据：Mongo非常适合实时的插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</p><p>2、缓存：由于性能很高，Mongo也适合作为信息基础设施的缓存层。在系统重启之后，由M ongo搭建的持久化缓存层可以避免下层的数据源过载。</p><p>3、大尺寸，低价值的数据：使用传统的关系型数据库存储一些数据时可能会比较昂贵， 在此之前，很多时候程序员往往会选择传统的文件进行存储。</p><p>4、高伸缩性的场景：Mongo非常适合由数十或数百台服务器组成的数据库。Mongo的路线图中已经包含对Map Reduce弓摩的内置支持。</p><p>5、用于对象及 JSON数据的存储：Mongo的BSON数据格式非常适合文档化格式的存储 及查询。</p><p><strong>不适用场合</strong></p><p>1、高度事务性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</p><p>2、传统的商业智能应用：针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><ol><li><p>下载mongodb</p><ul><li><a href="https://www.mongodb.com/try/download/community">官网下载</a> 选择msi</li><li>进入引导界面，选择Custom自定义安装路径</li><li>之后会默认让安装compass可视化工具，可以不下载之后下第三方的</li><li>一路next</li></ul></li><li><p>安装为服务</p><ul><li>通过msi下载的mongdb会自动生成data和log目录</li></ul><p><img src="/img/mongodb_img/%E7%9B%AE%E5%BD%951.png"></p><ul><li><p>还会在bin目录下自动生成mongod.cfg配置文件，里面写了data和log目录的位置</p><p><img src="/img/mongodb_img/%E7%9B%AE%E5%BD%952.png"></p></li><li><p>进入bin目录，执行以下代码，将mongodb注册为服务</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mongod <span class="hljs-attr">--config</span> mongod<span class="hljs-selector-class">.cfg</span> <span class="hljs-attr">--install</span> <span class="hljs-attr">--serviceName</span> <span class="hljs-string">&quot;MongoDB&quot;</span> <span class="hljs-attr">--journal</span><br></code></pre></td></tr></table></figure></li><li><p>服务相关命令（管理员身份运行）</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos">启动服务：<span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> MongoDB<br>关闭服务：<span class="hljs-built_in">net</span> stop MongoDB<br>移除服务（bin目录下）：mongod.exe --remove<br></code></pre></td></tr></table></figure></li></ul></li><li><p>下载可视化工具</p><p><a href="https://studio3t.com/download-studio3t-free">Download Studio 3T for MongoDB | Windows, macOS &amp; Linux</a></p><ul><li>下载完解压，再安装</li><li>测试连接localhost:27017</li></ul></li></ol><h4 id="通过docker安装"><a href="#通过docker安装" class="headerlink" title="通过docker安装"></a>通过docker安装</h4><ul><li><p>拉取镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull mongo:latest<br></code></pre></td></tr></table></figure></li><li><p>创建和启动容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --restart=always -p <span class="hljs-number">27017</span>:<span class="hljs-number">27017</span> --name mymongo -v <span class="hljs-regexp">/data/</span>db:<span class="hljs-regexp">/data/</span>db -d mongo<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 进入容器</span><br>docker exec -it mymongo <span class="hljs-regexp">/bin/</span>bash<br><span class="hljs-comment"># 使用mongoDB客户端进行操作</span><br>mongo<br><span class="hljs-comment"># 查询所有数据库</span><br>show dbs<br></code></pre></td></tr></table></figure></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><table><thead><tr><th>SQL术语&#x2F;概念</th><th>MongoDB术语&#x2F;概念</th><th>解释&#x2F;说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td><strong>collection</strong></td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td><strong>document</strong></td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs stata"># 在mongoDB客户端下进行操作<br><br>1、 <span class="hljs-keyword">Help</span>查看命令提示 <br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">help</span>();<br><br>2、 切换/创建数据库<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">test</span><br>如果数据库不存在，则创建数据库，否则切换到指定数据库<br><br>3、 查询所有数据库 <br>show dbs;<br><br>4、 删除当前使用数据库 <br><span class="hljs-keyword">db</span>.dropDatabase();<br><br>5、 查看当前使用的数据库 <br><span class="hljs-keyword">db</span>.getName();<br><br>6、 显示当前<span class="hljs-keyword">db</span>状态 <br><span class="hljs-keyword">db</span>.stats();<br><br>7、 当前<span class="hljs-keyword">db</span>版本 <br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">version</span>();<br><br>8、 查看当前<span class="hljs-keyword">db</span>的链接机器地址 <br><span class="hljs-keyword">db</span>.getMongo〇;<br></code></pre></td></tr></table></figure><p><strong>集合</strong></p><blockquote><p>对应关系型数据库中的表</p></blockquote><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas">1、 创建一个集合（<span class="hljs-keyword">table</span>)<br>db.createCollectio<span class="hljs-meta">n</span>( <span class="hljs-string">&quot;collName&quot;</span>);<br>2、 得到指定名称的集合（<span class="hljs-keyword">table</span> )<br>db.getCollectio<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;user&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>记录</strong></p><blockquote><p>对应关系型数据库中的字段</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 1.插入数据</span><br>&gt; db.User.save(&#123;name:<span class="hljs-string">&#x27;zhangsan&#x27;</span>,age:21,sex:true&#125;)<br>&gt; db.User.<span class="hljs-built_in">find</span>()<br><br><span class="hljs-comment"># 2.查询</span><br><span class="hljs-comment"># 2.1查询所有</span><br>db.User.<span class="hljs-built_in">find</span>()<br><span class="hljs-comment"># 2.2条件查询</span><br>db.User.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-string">&#x27;name&#x27;</span>:1&#125;)<br><span class="hljs-comment"># 2.3指定字段</span><br>db.User.<span class="hljs-built_in">find</span>(&#123;age:21&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>:1,<span class="hljs-string">&#x27;age&#x27;</span>:1&#125;)<br><span class="hljs-comment"># 2.4排序</span><br>db.User.<span class="hljs-built_in">find</span>().sort(&#123;age:1&#125;)<br><span class="hljs-comment"># 2.5分页查询</span><br>db.User.<span class="hljs-built_in">find</span>().skip(0).limit(3)<br>.<br>.<br>.<br><br></code></pre></td></tr></table></figure><h3 id="SpringBoot-整合MongoDB"><a href="#SpringBoot-整合MongoDB" class="headerlink" title="SpringBoot 整合MongoDB"></a>SpringBoot 整合MongoDB</h3><blockquote><p>spring-data-mongodb提供了MongoTemplate与MongoRepository两种方式访问mongodb，MongoRepository操作简单，MongoTemplate操作灵活，可以灵活适用这两种方式操作mongodb，MongoRepository的缺点是不够灵活，MongoTemplate正好可以弥补不足。</p></blockquote><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Document</td><td>标示映射到Mongodb文档上的领域对象</td></tr><tr><td>@Id</td><td>将相应字段设置为主键</td></tr><tr><td>@Indexed</td><td>标示某个字段为Mongodb的索引字段，提高该字段的检索速度</td></tr><tr><td>@Query</td><td>可以用Mongodb的JSON查询语句进行查询</td></tr></tbody></table><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="MongoTemplate"><a href="#MongoTemplate" class="headerlink" title="MongoTemplate"></a>MongoTemplate</h5><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br><span class="hljs-comment"># 连接地址 端口号 连接的数据库</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://127.0.0.1:27017/mall-port</span><br></code></pre></td></tr></table></figure></li><li><p>添加实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(&quot;User&quot;)</span>   <span class="hljs-comment">//对应MongoDb中的表名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String createDate;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试使用</p><p>插入、查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMongoDBApplicationTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-comment">// insert 插入数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;test&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;111@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mongoTemplate.insert(user);<br>        System.out.println(user1);<br>    &#125;<br><br>    <span class="hljs-comment">// findAll 查询所有数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; all = mongoTemplate.findAll(User.class);<br>        System.out.println(all);<br>    &#125;<br><br>    <span class="hljs-comment">// findById 通过id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mongoTemplate.findById(<span class="hljs-string">&quot;634c047f1bda8149e63ff1ee&quot;</span>, User.class);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">// 条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 构建条件</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria<br>                .where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;test&quot;</span>)<br>                .and(<span class="hljs-string">&quot;age&quot;</span>).is(<span class="hljs-number">20</span>));<br>        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">// 模糊条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findLikeUserList</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 构建正则</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;est&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;.*&quot;</span>, name, <span class="hljs-string">&quot;*$&quot;</span>);<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);<br>        <span class="hljs-comment">// 构建条件</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria<br>                .where(<span class="hljs-string">&quot;name&quot;</span>).regex(pattern));<br>        List&lt;User&gt; userList = mongoTemplate.find(query, User.class);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">// 分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findPageUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-comment">// 构建正则</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;est&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s%s%s&quot;</span>, <span class="hljs-string">&quot;.*&quot;</span>, name, <span class="hljs-string">&quot;*$&quot;</span>);<br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex, Pattern.CASE_INSENSITIVE);<br>        <span class="hljs-comment">// 构建条件</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria<br>                .where(<span class="hljs-string">&quot;name&quot;</span>).regex(pattern));<br><br>        <span class="hljs-comment">// 分页构建</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> mongoTemplate.count(query, User.class);    <span class="hljs-comment">//记录数</span><br>        <span class="hljs-comment">// skip(当前页的开始下标).limit(查询页数)</span><br>        List&lt;User&gt; userList = mongoTemplate.find(query.skip((current - <span class="hljs-number">1</span>) * size).limit(size), User.class);<br>        System.out.println(<span class="hljs-string">&quot;总记录数:&quot;</span> + count);<br>        System.out.println(userList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改、删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修改</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mongoTemplate.findById(<span class="hljs-string">&quot;634c047f1bda8149e63ff1ee&quot;</span>, User.class);<br>    user.setName(<span class="hljs-string">&quot;asdasdasd&quot;</span>);<br><br>    <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(user.getId()));<br>    <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>    update.set(<span class="hljs-string">&quot;name&quot;</span>, user.getName());<br>    update.set(<span class="hljs-string">&quot;age&quot;</span>, user.getAge());<br>    update.set(<span class="hljs-string">&quot;email&quot;</span>, user.getEmail());<br><br>    <span class="hljs-comment">// 通过查询条件查询出数据，更新的属性</span><br>    <span class="hljs-type">UpdateResult</span> <span class="hljs-variable">upsert</span> <span class="hljs-operator">=</span> mongoTemplate.upsert(query, update, User.class);<br>    <span class="hljs-comment">// 改变的条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">modifiedCount</span> <span class="hljs-operator">=</span> upsert.getModifiedCount();<br>    System.out.println(modifiedCount);<br>&#125;<br><br><span class="hljs-comment">// 删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(<span class="hljs-string">&quot;634c047f1bda8149e63ff1ee&quot;</span>));<br><br>    <span class="hljs-type">DeleteResult</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> mongoTemplate.remove(query, User.class);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">deletedCount</span> <span class="hljs-operator">=</span> remove.getDeletedCount();<br>    System.out.println(deletedCount);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="MongoRepository"><a href="#MongoRepository" class="headerlink" title="MongoRepository"></a>MongoRepository</h5><ul><li><p>添加Repository类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;User, String&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>CRUD</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMongoDBApplicationTest1</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br><br>    <span class="hljs-comment">// save 插入数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setEmail(<span class="hljs-string">&quot;3332200@qq.com&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> userRepository.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">// findAll 查询所有数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; all = userRepository.findAll();<br>        System.out.println(all);<br>    &#125;<br><br>    <span class="hljs-comment">// findById 通过id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(<span class="hljs-string">&quot;634c06471bda8149e63ff1ef&quot;</span>).get();<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">// 条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 构造查询条件</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">20</span>);<br>        Example&lt;User&gt; userExample = Example.of(user);<br><br>        List&lt;User&gt; users = userRepository.findAll(userExample);<br>        System.out.println(users);<br>    &#125;<br><br>    <span class="hljs-comment">// 模糊条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findLikeUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//创建匹配器，即如何使用查询条件</span><br>        <span class="hljs-type">ExampleMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> ExampleMatcher.matching() <span class="hljs-comment">//构建对象</span><br>                .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING) <span class="hljs-comment">//改变默认字符串匹配方式：模糊查询</span><br>                .withIgnoreCase(<span class="hljs-literal">true</span>); <span class="hljs-comment">//改变默认大小写忽略方式：忽略大小写</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setName(<span class="hljs-string">&quot;三&quot;</span>);<br>        Example&lt;User&gt; userExample = Example.of(user, matcher);<br>        List&lt;User&gt; userList = userRepository.findAll(userExample);<br>        System.out.println(userList);<br>    &#125;<br><br>    <span class="hljs-comment">// 分页查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findPageUserList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><br>        Page&lt;User&gt; pages = userRepository.findAll(page);<br>        System.out.println(pages);<br>    &#125;<br><br>    <span class="hljs-comment">// 修改</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(<span class="hljs-string">&quot;635fc9b4d74a3c02b054754a&quot;</span>).get();<br>        user.setName(<span class="hljs-string">&quot;王五&quot;</span>);<br>        userRepository.save(user);  <span class="hljs-comment">// 有相同id时为修改</span><br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span> &#123;<br>        userRepository.deleteById(<span class="hljs-string">&quot;635fc9b4d74a3c02b054754a&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>springBoot 版本2.7.8</p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring Data MongoDB--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-comment"># 连接地址 端口号 连接的数据库</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://127.0.0.1:27017/mall-port</span><br></code></pre></td></tr></table></figure></li><li><p>编写映射到mongodb的文档对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户商品浏览历史记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberReadHistory</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@Indexed</span><br>    <span class="hljs-keyword">private</span> Long memberId;<br><br>    <span class="hljs-keyword">private</span> String memberNickname;<br><br>    <span class="hljs-keyword">private</span> String memberIcon;<br><br>    <span class="hljs-meta">@Indexed</span><br>    <span class="hljs-keyword">private</span> Long productId;<br><br>    <span class="hljs-keyword">private</span> String productName;<br><br>    <span class="hljs-keyword">private</span> String productPic;<br><br>    <span class="hljs-keyword">private</span> String productSubTitle;<br><br>    <span class="hljs-keyword">private</span> String productPrice;<br><br>    <span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写操作类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MemberReadHistoryRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;MemberReadHistory, String&gt; &#123;<br>    List&lt;MemberReadHistory&gt; <span class="hljs-title function_">findByMemberIdOrderByCreateTimeDesc</span><span class="hljs-params">(Long memberId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Service接口、实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberReadHistoryServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MemberReadHistoryService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> MemberReadHistoryRepository memberReadHistoryRepository;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">create</span><span class="hljs-params">(MemberReadHistory memberReadHistory)</span> &#123;<br>        memberReadHistory.setId(<span class="hljs-literal">null</span>);<br>        memberReadHistory.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        memberReadHistoryRepository.save(memberReadHistory);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;String&gt; ids)</span> &#123;<br>        List&lt;MemberReadHistory&gt; deleteList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String id : ids)&#123;<br>            <span class="hljs-type">MemberReadHistory</span> <span class="hljs-variable">memberReadHistory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberReadHistory</span>();<br>            memberReadHistory.setId(id);<br>            deleteList.add(memberReadHistory);<br>        &#125;<br>        memberReadHistoryRepository.deleteAll(deleteList);<br>        <span class="hljs-keyword">return</span> ids.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;MemberReadHistory&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long memberId)</span> &#123;<br>        <span class="hljs-keyword">return</span> memberReadHistoryRepository.findByMemberIdOrderByCreateTimeDesc(memberId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;会员商品浏览记录管理&quot;)</span><br><span class="hljs-meta">@RestController(&quot;/member/readHistory&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberReadHistoryController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> MemberReadHistoryService memberReadHistoryService;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;创建浏览记录&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/create&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> MemberReadHistory memberReadHistory)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> memberReadHistoryService.create(memberReadHistory);<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> CommonResult.success(count);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> CommonResult.failed();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;删除浏览记录&quot;)</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/delete&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;ids&quot;)</span> List&lt;String&gt; ids)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> memberReadHistoryService.delete(ids);<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> CommonResult.success(count);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> CommonResult.failed();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;展示浏览记录&quot;)</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> CommonResult&lt;List&lt;MemberReadHistory&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long memberId)</span> &#123;<br>        List&lt;MemberReadHistory&gt; memberReadHistoryList = memberReadHistoryService.list(memberId);<br>        <span class="hljs-keyword">return</span> CommonResult.success(memberReadHistoryList);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>中间件</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch</title>
    <link href="/2023/02/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/Elasticsearch/"/>
    <url>/2023/02/09/%E4%B8%AD%E9%97%B4%E4%BB%B6/Elasticsearch/</url>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>Elasticsearch 是一个分布式、可扩展、实时的搜索与数据分析引擎</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><ol><li><p>官网下载Elasticsearch</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/#elasticsearch">Past Releases of Elastic Stack Software | Elastic</a></p></li><li><p>官网下载kibana(es客户端，版本要和es一致)</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/#kibana">Past Releases of Elastic Stack Software | Elastic</a></p></li><li><p>安装中文分词插件，在es的bin目录下执行以下命令（版本要和es一致）：elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.2/elasticsearch-analysis-ik-6.2.2.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.2/elasticsearch-analysis-ik-6.2.2.zip</a></p></li><li><p>到es和kibana的bin目录下，点击运行elasticsearch.bat和kibana.bat</p></li><li><p>访问<code>localhost:5601</code>打开kibana界面，点击<code>dev tools</code>来输入es的命令</p></li></ol><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><p>见微服务笔记的分布式搜索(1)</p><h3 id="Spring-Data-Elasticsearch"><a href="#Spring-Data-Elasticsearch" class="headerlink" title="Spring Data Elasticsearch"></a>Spring Data Elasticsearch</h3><p>是Spring提供的一种以Spring Data风格来操作数据存储的方式，它可以避免编写大量的样板代码</p><p><a href="https://spring.io/projects/spring-data-elasticsearch#learn">官方文档</a></p><p><strong>实例</strong></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注意这里elasticsearch.version版本一定!!!要和elasticsearch的版本一致--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.17.3<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Spring Data Elasticsearch--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># yml配置elasticsearch客户端地址（可配置项有限）</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">elasticsearch:</span><br>    <span class="hljs-attr">uris:</span> <span class="hljs-string">http://127.0.0.1:9200</span> <span class="hljs-comment"># elasticsearch 连接地址</span><br>    <span class="hljs-comment">#username: elastic # 用户名</span><br>    <span class="hljs-comment">#password: 123456 # 密码</span><br>    <span class="hljs-attr">connection-timeout:</span> <span class="hljs-string">10s</span> <span class="hljs-comment"># 连接超时时间（默认1s）</span><br>    <span class="hljs-attr">socket-timeout:</span> <span class="hljs-string">30s</span> <span class="hljs-comment"># 数据读取超时时间（默认30s）</span><br></code></pre></td></tr></table></figure></li><li><p>编写保存到es中的实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;user&quot;)</span><span class="hljs-comment">// 索引名</span><br><span class="hljs-meta">@Setting(shards = 3, replicas = 0)</span><span class="hljs-comment">// 刷新时间和分片数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-meta">@Field(type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Field(type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String name, Integer age, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写操作类(类似mysql的mapper)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;User, Integer&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserRepository repository;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;上海市闵行区&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> repository.save(user);<br><br>    Optional&lt;User&gt; optionalUser = repository.findById(<span class="hljs-number">1</span>);<br>    System.out.println(optionalUser.get());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Document</td><td>标示映射到Elasticsearch文档上的领域对象</td></tr><tr><td>@Id</td><td>表示是文档的id，文档可以认为是mysql中表行的概念</td></tr><tr><td>@Field</td><td>设置字段类型、是否倒排索引等信息</td></tr><tr><td>@Query</td><td>可以直接写DSL语句</td></tr><tr><td>@Setting</td><td>分片数、刷新时间等参数不再在<code>@Docement</code>中声明，而是在@Setting中声明</td></tr></tbody></table><p><strong>@Field</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Field &#123;<br>  <span class="hljs-comment">//文档中字段的类型</span><br>FieldType <span class="hljs-title function_">type</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> FieldType.Auto;<br>  <span class="hljs-comment">//是否建立倒排索引</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">index</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-comment">//是否进行存储</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">store</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">//分词器名次</span><br>String <span class="hljs-title function_">analyzer</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//为文档自动指定元数据类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FieldType</span> &#123;<br>Text,<span class="hljs-comment">//会进行分词并建了索引的字符类型</span><br>Integer,<br>Long,<br>Date,<br>Float,<br>Double,<br>Boolean,<br>Object,<br>Auto,<span class="hljs-comment">//自动判断字段类型</span><br>Nested,<span class="hljs-comment">//嵌套对象类型</span><br>Ip,<br>Attachment,<br>Keyword<span class="hljs-comment">//不会进行分词建立索引的类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@Query</strong></p><p>可以直接写DSL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Query(&quot;&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?0&quot;&#125;&#125;&#125;&#125;&quot;)</span><br>Page&lt;EsProduct&gt; <span class="hljs-title function_">findByName</span><span class="hljs-params">(String name,Pageable pageable)</span>;<br></code></pre></td></tr></table></figure><h4 id="方法生成机制"><a href="#方法生成机制" class="headerlink" title="方法生成机制"></a>方法生成机制</h4><p>对于操作类接口方法的命名，根据规则可以自动实现</p><table><thead><tr><th align="left">关键词</th><th align="left">示例</th><th align="left">对应es搜索查询字符串</th></tr></thead><tbody><tr><td align="left"><code>And</code></td><td align="left"><code>findByNameAndPrice</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125; &#125;, &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?&quot;, &quot;fields&quot; : [ &quot;price&quot; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Or</code></td><td align="left"><code>findByNameOrPrice</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;should&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125; &#125;, &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?&quot;, &quot;fields&quot; : [ &quot;price&quot; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Is</code></td><td align="left"><code>findByName</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Not</code></td><td align="left"><code>findByNameNot</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must_not&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Between</code></td><td align="left"><code>findByPriceBetween</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?, &quot;to&quot; : ?, &quot;include_lower&quot; : true, &quot;include_upper&quot; : true &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>LessThan</code></td><td align="left"><code>findByPriceLessThan</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null, &quot;to&quot; : ?, &quot;include_lower&quot; : true, &quot;include_upper&quot; : false &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>LessThanEqual</code></td><td align="left"><code>findByPriceLessThanEqual</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null, &quot;to&quot; : ?, &quot;include_lower&quot; : true, &quot;include_upper&quot; : true &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>GreaterThan</code></td><td align="left"><code>findByPriceGreaterThan</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?, &quot;to&quot; : null, &quot;include_lower&quot; : false, &quot;include_upper&quot; : true &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>GreaterThanEqual</code></td><td align="left"><code>findByPriceGreaterThan</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?, &quot;to&quot; : null, &quot;include_lower&quot; : true, &quot;include_upper&quot; : true &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Before</code></td><td align="left"><code>findByPriceBefore</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null, &quot;to&quot; : ?, &quot;include_lower&quot; : true, &quot;include_upper&quot; : true &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>After</code></td><td align="left"><code>findByPriceAfter</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?, &quot;to&quot; : null, &quot;include_lower&quot; : true, &quot;include_upper&quot; : true &#125; &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Like</code></td><td align="left"><code>findByNameLike</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?*&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125;, &quot;analyze_wildcard&quot;: true &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>StartingWith</code></td><td align="left"><code>findByNameStartingWith</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;?*&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125;, &quot;analyze_wildcard&quot;: true &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>EndingWith</code></td><td align="left"><code>findByNameEndingWith</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;*?&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125;, &quot;analyze_wildcard&quot;: true &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>Contains/Containing</code></td><td align="left"><code>findByNameContaining</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;*?*&quot;, &quot;fields&quot; : [ &quot;name&quot; ] &#125;, &quot;analyze_wildcard&quot;: true &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>In</code>（当注释为 FieldType.关键字时）</td><td align="left"><code>findByNameIn(Collection&lt;String&gt;names)</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;terms&quot; : &#123;&quot;name&quot; : [&quot;?&quot;,&quot;?&quot;]&#125;&#125; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>In</code></td><td align="left"><code>findByNameIn(Collection&lt;String&gt;names)</code></td><td align="left"><code>&#123; &quot;query&quot;: &#123;&quot;bool&quot;: &#123;&quot;must&quot;: [&#123;&quot;query_string&quot;:&#123;&quot;query&quot;: &quot;\&quot;?\&quot; \&quot;?\&quot;&quot;, &quot;fields&quot;: [&quot;name&quot;]&#125;&#125;]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>NotIn</code>（当注释为 FieldType.关键字时）</td><td align="left"><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : [ &#123;&quot;terms&quot; : &#123;&quot;name&quot; : [&quot;?&quot;,&quot;?&quot;]&#125;&#125; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>NotIn</code></td><td align="left"><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td><td align="left"><code>&#123;&quot;query&quot;: &#123;&quot;bool&quot;: &#123;&quot;must&quot;: [&#123;&quot;query_string&quot;: &#123;&quot;query&quot;: &quot;NOT(\&quot;?\&quot; \&quot;?\&quot;)&quot;, &quot;fields&quot;: [&quot;name&quot;]&#125;&#125;]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>True</code></td><td align="left"><code>findByAvailableTrue</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;true&quot;, &quot;fields&quot; : [ &quot;available&quot; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>False</code></td><td align="left"><code>findByAvailableFalse</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;false&quot;, &quot;fields&quot; : [ &quot;available&quot; ] &#125; &#125; ] &#125; &#125;&#125;</code></td></tr><tr><td align="left"><code>OrderBy</code></td><td align="left"><code>findByAvailableTrueOrderByNameDesc</code></td><td align="left"><code>&#123; &quot;query&quot; : &#123; &quot;bool&quot; : &#123; &quot;must&quot; : [ &#123; &quot;query_string&quot; : &#123; &quot;query&quot; : &quot;true&quot;, &quot;fields&quot; : [ &quot;available&quot; ] &#125; &#125; ] &#125; &#125;, &quot;sort&quot;:[&#123;&quot;name&quot;:&#123;&quot;order&quot;:&quot;desc&quot;&#125;&#125;] &#125;</code></td></tr><tr><td align="left"><code>Exists</code></td><td align="left"><code>findByNameExists</code></td><td align="left"><code>&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;must&quot;:[&#123;&quot;exists&quot;:&#123;&quot;field&quot;:&quot;name&quot;&#125;&#125;]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>IsNull</code></td><td align="left"><code>findByNameIsNull</code></td><td align="left"><code>&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;must_not&quot;:[&#123;&quot;exists&quot;:&#123;&quot;field&quot;:&quot;name&quot;&#125;&#125;]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>IsNotNull</code></td><td align="left"><code>findByNameIsNotNull</code></td><td align="left"><code>&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;must&quot;:[&#123;&quot;exists&quot;:&#123;&quot;field&quot;:&quot;name&quot;&#125;&#125;]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>IsEmpty</code></td><td align="left"><code>findByNameIsEmpty</code></td><td align="left"><code>&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;must&quot;:[&#123;&quot;bool&quot;:&#123;&quot;must&quot;:[&#123;&quot;exists&quot;:&#123;&quot;field&quot;:&quot;name&quot;&#125;&#125;],&quot;must_not&quot;:[&#123;&quot;wildcard&quot;:&#123;&quot;name&quot;:&#123;&quot;wildcard&quot;:&quot;*&quot;&#125;&#125;&#125;]&#125;&#125;]&#125;&#125;&#125;</code></td></tr><tr><td align="left"><code>IsNotEmpty</code></td><td align="left"><code>findByNameIsNotEmpty</code></td><td align="left"><code>&#123;&quot;query&quot;:&#123;&quot;bool&quot;:&#123;&quot;must&quot;:[&#123;&quot;wildcard&quot;:&#123;&quot;name&quot;:&#123;&quot;wildcard&quot;:&quot;*&quot;&#125;&#125;&#125;]&#125;&#125;&#125;</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>中间件</category>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity</title>
    <link href="/2023/02/08/spring/springSecurity/SpringSecurity/"/>
    <url>/2023/02/08/spring/springSecurity/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><p>SpringSecurity是一个强大的可高度定制的认证和授权框架，对于Spring应用来说它是一套Web安全标准</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>实例</p><p>详细见 –&gt; <a href="https://github.com/Xwww12/mall-learning.git%E7%9A%84%60%E6%95%B4%E5%90%88SpringSecurity%60%E7%9A%84tag">https://github.com/Xwww12/mall-learning.git的`整合SpringSecurity`的tag</a></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringSecurity--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--JWT--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写SpringSecurity配置类</p><blockquote><p>主要配置：需要鉴权的访问路径、获取用户信息方式、密码认证方式、认证token方式、自定义未授权和未登录结果的返回</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Lazy</span>   <span class="hljs-comment">// 防止嵌套</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUmsAdminService adminService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestfulAccessDeniedHandler restfulAccessDeniedHandler;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestAuthenticationEntryPoint restAuthenticationEntryPoint;<br><br>    <span class="hljs-comment">// 用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        httpSecurity.csrf()<br>            .disable()<br>            .sessionManagement()<span class="hljs-comment">// 基于token，所以不需要session</span><br>            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)<br>            .and()<br>            .authorizeRequests()<br>            .antMatchers(HttpMethod.GET, <span class="hljs-comment">// 允许对于网站静态资源的无授权访问</span><br>                         <span class="hljs-string">&quot;/&quot;</span>,<br>                         <span class="hljs-string">&quot;/*.html&quot;</span>,<br>                         <span class="hljs-string">&quot;/favicon.ico&quot;</span>,<br>                         <span class="hljs-string">&quot;/**/*.html&quot;</span>,<br>                         <span class="hljs-string">&quot;/**/*.css&quot;</span>,<br>                         <span class="hljs-string">&quot;/**/*.js&quot;</span>,<br>                         <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>,<br>                         <span class="hljs-string">&quot;/v2/api-docs/**&quot;</span><br>                        )<br>            .permitAll()<br>            .antMatchers(<span class="hljs-string">&quot;/admin/login&quot;</span>, <span class="hljs-string">&quot;/admin/register&quot;</span>)<span class="hljs-comment">// 对登录注册要允许匿名访问</span><br>            .permitAll()<br>            .antMatchers(HttpMethod.OPTIONS)<span class="hljs-comment">//跨域请求会先进行一次options请求</span><br>            .permitAll()<br>            <span class="hljs-comment">//                .antMatchers(&quot;/**&quot;)//测试时全部运行访问</span><br>            <span class="hljs-comment">//                .permitAll()</span><br>            .anyRequest()<span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>            .authenticated();<br>        <span class="hljs-comment">// 禁用缓存</span><br>        httpSecurity.headers().cacheControl();<br>        <span class="hljs-comment">// 添加JWT filter</span><br>        httpSecurity.addFilterBefore(jwtAuthenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);<br>        <span class="hljs-comment">//添加自定义未授权和未登录结果返回</span><br>        httpSecurity.exceptionHandling()<br>            .accessDeniedHandler(restfulAccessDeniedHandler)<br>            .authenticationEntryPoint(restAuthenticationEntryPoint);<br>    &#125;<br><br>    <span class="hljs-comment">// 用于配置UserDetailsService及PasswordEncoder</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService())<br>            .passwordEncoder(passwordEncoder());<br>    &#125;<br><br>    <span class="hljs-comment">// SpringSecurity定义的用于对密码进行编码及比对的接口</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 用于根据用户名获取用户信息</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取登录用户信息</span><br>        <span class="hljs-keyword">return</span> username -&gt; &#123;<br>            <span class="hljs-type">UmsAdmin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getAdminByUsername(username);<br>            <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>                List&lt;UmsPermission&gt; permissionList = adminService.getPermissionList(admin.getId());<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminUserDetails</span>(admin,permissionList);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 在用户名和密码校验前添加的过滤器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JwtAuthenticationTokenFilter <span class="hljs-title function_">jwtAuthenticationTokenFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当访问接口没有权限时，自定义的返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestfulAccessDeniedHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        response.getWriter().println(JSONUtil.parse(CommonResult.forbidden(e.getMessage())));<br>        response.getWriter().flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当未登录或者token失效访问接口时，自定义的返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestAuthenticationEntryPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        response.getWriter().println(JSONUtil.parse(CommonResult.unauthorized(authException.getMessage())));<br>        response.getWriter().flush();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>自定义的用户信息类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminUserDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-keyword">private</span> UmsAdmin umsAdmin;<br>    <span class="hljs-keyword">private</span> List&lt;UmsPermission&gt; permissionList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AdminUserDetails</span><span class="hljs-params">(UmsAdmin umsAdmin, List&lt;UmsPermission&gt; permissionList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.umsAdmin = umsAdmin;<br>        <span class="hljs-built_in">this</span>.permissionList = permissionList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-comment">// 获取当前用户权限</span><br>        <span class="hljs-keyword">return</span> permissionList.stream()<br>            .filter(permissionList -&gt; permissionList.getValue() != <span class="hljs-literal">null</span>)<br>            .map(permission -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(permission.getValue()))<br>            .collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> umsAdmin.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> umsAdmin.getUsername();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> umsAdmin.getStatus().equals(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>验证token</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(JwtAuthenticationTokenFilter.class);<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtTokenUtil jwtTokenUtil;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String tokenHeader;<span class="hljs-comment">// Authorization</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String tokenHead;<span class="hljs-comment">// Bearer</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request,</span><br><span class="hljs-params">                                    HttpServletResponse response,</span><br><span class="hljs-params">                                    FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">authHeader</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-built_in">this</span>.tokenHeader);<br>        <span class="hljs-keyword">if</span> (authHeader != <span class="hljs-literal">null</span> &amp;&amp; authHeader.startsWith(<span class="hljs-built_in">this</span>.tokenHead)) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">authToken</span> <span class="hljs-operator">=</span> authHeader.substring(<span class="hljs-built_in">this</span>.tokenHead.length());<span class="hljs-comment">// The part after &quot;Bearer &quot;</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> jwtTokenUtil.getUserNameFromToken(authToken);<br>            LOGGER.info(<span class="hljs-string">&quot;checking username:&#123;&#125;&quot;</span>, username);<br>            <span class="hljs-keyword">if</span> (username != <span class="hljs-literal">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.userDetailsService.loadUserByUsername(username);<br>                <span class="hljs-keyword">if</span> (jwtTokenUtil.validateToken(authToken, userDetails)) &#123;<br>                    <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="hljs-literal">null</span>, userDetails.getAuthorities());<br>                    authentication.setDetails(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));<br>                    LOGGER.info(<span class="hljs-string">&quot;authenticated user:&#123;&#125;&quot;</span>, username);<br>                    SecurityContextHolder.getContext().setAuthentication(authentication);<br>                &#125;<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在需要鉴权的方法上添加</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;pms:brand:read&#x27;)&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>注意</p><blockquote><p>如果使用了swagger<br>在配置Docket时<br>securitySchemes要传入需要登录认证的路径，否则不会主动带上头信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title function_">securityContexts</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置需要登录认证的路径</span><br>    List&lt;SecurityContext&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    result.add(getContextByPath(<span class="hljs-string">&quot;/brand/.*&quot;</span>));<br>    result.add(getContextByPath(<span class="hljs-string">&quot;/admin/.*&quot;</span>));<br>    result.add(getContextByPath(<span class="hljs-string">&quot;/esProduct/.*&quot;</span>));<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringTask</title>
    <link href="/2023/02/08/spring/springTask/SpringTask/"/>
    <url>/2023/02/08/spring/springTask/SpringTask/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringTask"><a href="#SpringTask" class="headerlink" title="SpringTask"></a>SpringTask</h2><p>SpringTask是Spring自主研发的轻量级<strong>定时任务工具</strong></p><h3 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h3><p><strong>格式</strong>：秒 分 时 日 月 星期</p><table><thead><tr><th>时间元素</th><th>可出现的字符</th><th>有效数值范围</th></tr></thead><tbody><tr><td>Seconds</td><td>, - * &#x2F;</td><td>0-59</td></tr><tr><td>Minutes</td><td>, - * &#x2F;</td><td>0-59</td></tr><tr><td>Hours</td><td>, - * &#x2F;</td><td>0-23</td></tr><tr><td>DayofMonth</td><td>, - * &#x2F; ? L W</td><td>0-31</td></tr><tr><td>Month</td><td>, - * &#x2F;</td><td>1-12</td></tr><tr><td>DayofWeek</td><td>, - * &#x2F; ? L #</td><td>1-7或SUN-SAT</td></tr></tbody></table><p><strong>说明</strong>：</p><table><thead><tr><th>字符</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td>,</td><td>列出枚举值</td><td>在Minutes域使用5,10，表示在5分和10分各触发一次</td></tr><tr><td>-</td><td>表示触发范围</td><td>在Minutes域使用5-10，表示从5分到10分钟每分钟触发一次</td></tr><tr><td>*</td><td>匹配任意值</td><td>在Minutes域使用*, 表示每分钟都会触发一次</td></tr><tr><td>&#x2F;</td><td>起始时间开始触发，每隔固定时间触发一次</td><td>在Minutes域使用5&#x2F;10,表示5分时触发一次，每10分钟再触发一次</td></tr><tr><td>?</td><td>在DayofMonth和DayofWeek中，用于匹配任意值</td><td>在DayofMonth域使用?,表示每天都触发一次</td></tr><tr><td>#</td><td>在DayofMonth中，确定第几个星期几</td><td>1#3表示第三个星期日</td></tr><tr><td>L</td><td>表示最后</td><td>在DayofWeek中使用5L,表示在最后一个星期四触发</td></tr><tr><td>W</td><td>表示有效工作日(周一到周五)</td><td>在DayofMonth使用5W，如果5日是星期六，则将在最近的工作日4日触发一次</td></tr></tbody></table><p><strong>示例</strong>：</p><ol><li><p>每两秒执行一次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0/2 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">*</span><br></code></pre></td></tr></table></figure></li><li><p>每个二、四、六星期的下午两点执行一次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> <span class="hljs-emphasis">* 14 *</span> <span class="hljs-emphasis">* 2,4,6</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>SpringTask已经存在于Spring框架中，无需添加新的依赖</p></li><li><p><code>@EnableScheduling</code>开启定时任务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTaskConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用示例</p><p>每十分钟执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.component;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderTimeOutCancelTask</span> &#123;<br><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0/10 * * * *&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancelTimeOutOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 定时任务</span><br>        log.info(<span class="hljs-string">&quot;task&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
      <category>SpringTask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jwt</title>
    <link href="/2023/02/06/%E5%85%B6%E4%BB%96/Jwt/"/>
    <url>/2023/02/06/%E5%85%B6%E4%BB%96/Jwt/</url>
    
    <content type="html"><![CDATA[<h2 id="Jwt"><a href="#Jwt" class="headerlink" title="Jwt"></a>Jwt</h2><blockquote><p>JWT是JSON WEB TOKEN的缩写，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了<strong>数字签名</strong>，所以是可信任和安全的。</p></blockquote><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>header.payload.signature</p><blockquote><p>header中存放签名的生成算法</p><p>payload存放附加信息</p><p>signature为通过header和payload生成的签名</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>用户登录后，系统生成token返回给用户。</p><p>之后每次调用接口都要在请求中添加Authorization请求头，值为之前的token。</p><p>后台系统通过token来对用户<strong>认证和授权</strong>。</p><p><font color="red">jwt不能防止冒充其他用户</font></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 用到SpringSecurity来传用户信息 --&gt;</span><br><span class="hljs-comment">&lt;!--SpringSecurity依赖配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 自定义jwt key</span><br><span class="hljs-attr">jwt:</span><br>  <span class="hljs-attr">tokenHeader:</span> <span class="hljs-string">Authorization</span> <span class="hljs-comment">#JWT存储的请求头</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">mySecret</span> <span class="hljs-comment">#JWT加解密使用的密钥</span><br>  <span class="hljs-attr">expiration:</span> <span class="hljs-number">604800</span> <span class="hljs-comment">#JWT的超期限时间(60*60*24)</span><br>  <span class="hljs-attr">tokenHead:</span> <span class="hljs-string">Bearer</span>  <span class="hljs-comment">#JWT负载中拿到开头</span><br></code></pre></td></tr></table></figure></li><li><p>编写工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.utils;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.*;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * token工具类</span><br><span class="hljs-comment"> * 获取token、校验token、刷新token过期时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_KEY_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sub&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_KEY_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created&quot;</span>;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secret;  <span class="hljs-comment">// 加密秘钥</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Long expiration;    <span class="hljs-comment">// token保留时间</span><br><br>    <span class="hljs-comment">// 获取token中的用户名</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserNameFormToken</span><span class="hljs-params">(String token)</span> &#123;<br>        String username;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> getClaimsFormToken(token);<br>            username = claims.getSubject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-comment">// 验证token是否有效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validateToken</span><span class="hljs-params">(String token, UserDetails userDetails)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> getUserNameFormToken(token);<br>        <span class="hljs-keyword">return</span> userDetails.getUsername().equals(username) &amp;&amp; isTokenExpired(token);<br>    &#125;<br><br>    <span class="hljs-comment">// 生成Token</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(UserDetails userDetails)</span> &#123;<br>        HashMap&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());<br>        claims.put(CLAIM_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> generateTokenFromClaims(claims);<br>    &#125;<br><br>    <span class="hljs-comment">// 刷新token</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">refreshToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> getClaimsFormToken(token);<br>        claims.put(CLAIM_KEY_CREATED, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> generateTokenFromClaims(claims);<br>    &#125;<br><br>    <span class="hljs-comment">// 验证token是否实效</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTokenExpired</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expireDate</span> <span class="hljs-operator">=</span> getExpireDateFormToken(token);<br>        <span class="hljs-keyword">return</span> expireDate.before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br><br>    <span class="hljs-comment">// 获取Token过期时间</span><br>    <span class="hljs-keyword">private</span> Date <span class="hljs-title function_">getExpireDateFormToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> getClaimsFormToken(token);<br>        <span class="hljs-keyword">return</span> claims.getExpiration();<br>    &#125;<br><br>    <span class="hljs-comment">// 根据负载信息生成Token</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateTokenFromClaims</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span> &#123;<br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setClaims(claims)  <span class="hljs-comment">// 设置token中负载信息</span><br>                .setExpiration(generateExpirationDate())    <span class="hljs-comment">// 设置超时时间</span><br>                .signWith(SignatureAlgorithm.ES512, secret) <span class="hljs-comment">// 设置加密方式</span><br>                .compact();<br>    &#125;<br><br>    <span class="hljs-comment">// 生成Token过期时间</span><br>    <span class="hljs-keyword">private</span> Date <span class="hljs-title function_">generateExpirationDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration * <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取token中的JWT负载</span><br>    <span class="hljs-keyword">private</span> Claims <span class="hljs-title function_">getClaimsFormToken</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            claims = Jwts.parser()<br>                    .setSigningKey(secret)<br>                    .parseClaimsJws(token)<br>                    .getBody();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.info(<span class="hljs-string">&quot;JWT验证失败:&#123;&#125;&quot;</span>, token);<br>        &#125;<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MP代码生成器</title>
    <link href="/2023/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2023/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="MP代码生成器"><a href="#MP代码生成器" class="headerlink" title="MP代码生成器"></a>MP代码生成器</h2><p><a href="https://baomidou.com/pages/779a6e/#%E5%AE%89%E8%A3%85">官网文档</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li><p>导入坐标</p><blockquote><p>注意mybatis-plus-generator的版本必须为3.5.1</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MybatisPlus、MybatisPlus生成器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">8080</span><br>spring:<br>  datasource:<br>    url: jdbc:mysql:<span class="hljs-comment">//localhost:3306/mall?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span><br>    username: root<br>    password: <span class="hljs-number">123456</span><br><br>mybatis:<br>  mapper-locations:<br>    - classpath:mapper<span class="hljs-comment">/*.xml</span><br><span class="hljs-comment">    - classpath*:com/**/</span>mapper<span class="hljs-comment">/*.xml</span><br></code></pre></td></tr></table></figure></li><li><p>编写代码，执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.mallLearning.generator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于生产MBG的代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generator</span> &#123;<br>    <span class="hljs-comment">// 基础信息配置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mall?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PARENT_PACKAGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.xw.mallLearning.generator&quot;</span>;  <span class="hljs-comment">// 包名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PROJECT_ROOT_PATH</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PROJECT_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mall-learning&quot;</span>;     <span class="hljs-comment">// 当前项目名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODULE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mbg&quot;</span>;      <span class="hljs-comment">// 模块名称, 代码会生成在generator/MODULE_NAME下</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行此处</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        simpleGenerator();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加需要自动生成代码的表名, 为空则生成所有表对应代码</span><br>        List&lt;String&gt; tables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        tables.add(<span class="hljs-string">&quot;pms_brand&quot;</span>);<br><br>        <span class="hljs-comment">// 包路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">packagePath</span> <span class="hljs-operator">=</span> PROJECT_ROOT_PATH + <span class="hljs-string">&quot;/&quot;</span> + PROJECT_NAME + <span class="hljs-string">&quot;/src/main/java&quot;</span>;<br>        <span class="hljs-comment">// XML文件的路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mapperXmlPath</span> <span class="hljs-operator">=</span> PROJECT_ROOT_PATH + <span class="hljs-string">&quot;/&quot;</span> + PROJECT_NAME + <span class="hljs-string">&quot;/src/main/resources/mapper&quot;</span>;<br><br>        <span class="hljs-comment">// 开始执行代码生成</span><br>        FastAutoGenerator.create(URL, USERNAME, PASSWORD)<br>            <span class="hljs-comment">// 1. 全局配置</span><br>            .globalConfig(builder -&gt; builder<br>                          <span class="hljs-comment">// 作者名称</span><br>                          .author(<span class="hljs-string">&quot;xw&quot;</span>)<br>                          <span class="hljs-comment">// 开启覆盖已生成的文件。注释掉则关闭覆盖。</span><br>                          .fileOverride()<br>                          <span class="hljs-comment">// 禁止打开输出目录。注释掉则生成完毕后，自动打开生成的文件目录。</span><br>                          .disableOpenDir()<br>                          <span class="hljs-comment">// 指定输出目录。如果指定，Windows生成至D盘根目录下，Linux or MAC 生成至 /tmp 目录下。</span><br>                          .outputDir(packagePath)<br>                          <span class="hljs-comment">// 开启swagger2.注释掉则默认关闭。</span><br>                          <span class="hljs-comment">// .enableSwagger()</span><br>                          <span class="hljs-comment">// 指定时间策略。</span><br>                          .dateType(DateType.TIME_PACK)<br>                          <span class="hljs-comment">// 注释时间策略。</span><br>                          .commentDate(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)<br>                         )<br><br>            <span class="hljs-comment">// 2. 包配置</span><br>            .packageConfig(builder -&gt; builder<br>                           <span class="hljs-comment">// 设置父表名</span><br>                           .parent(PARENT_PACKAGE_NAME)<br>                           .moduleName(MODULE_NAME)<br>                           .entity(<span class="hljs-string">&quot;entity&quot;</span>)<br>                           .service(<span class="hljs-string">&quot;service&quot;</span>)<br>                           .serviceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>)<br>                           .controller(<span class="hljs-string">&quot;controller&quot;</span>)<br>                           .mapper(<span class="hljs-string">&quot;mapper&quot;</span>)<br>                           .xml(<span class="hljs-string">&quot;mapper&quot;</span>)<br>                           <span class="hljs-comment">// mapper.xml 文件的路径。单模块下，其他文件路径默认即可。</span><br>                           .pathInfo(Collections.singletonMap(OutputFile.mapperXml, mapperXmlPath))<br>                          )<br><br>            <span class="hljs-comment">// 3. 策略配置</span><br>            .strategyConfig(builder -&gt; builder.addInclude(tables)<br>                            <span class="hljs-comment">// 阶段1：Entity实体类策略配置</span><br>                            .entityBuilder()<br>                            <span class="hljs-comment">// 开启生成实体时生成字段注解。</span><br>                            <span class="hljs-comment">// 会在实体类的属性前，添加[@TableField(&quot;nickname&quot;)]</span><br>                            .enableTableFieldAnnotation()<br>                            <span class="hljs-comment">// 逻辑删除字段名(数据库)。</span><br>                            <span class="hljs-comment">//.logicDeleteColumnName(&quot;is_delete&quot;)</span><br>                            <span class="hljs-comment">// 逻辑删除属性名(实体)。</span><br>                            <span class="hljs-comment">// 会在实体类的该字段属性前加注解[@TableLogic]</span><br>                            <span class="hljs-comment">//.logicDeletePropertyName(&quot;isDelete&quot;)</span><br>                            <span class="hljs-comment">// 会在实体类的该字段上追加注解[@TableField(value = &quot;create_time&quot;, fill = FieldFill.INSERT)]</span><br>                            .addTableFills(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Column</span>(<span class="hljs-string">&quot;create_time&quot;</span>, FieldFill.INSERT))<br>                            <span class="hljs-comment">// 会在实体类的该字段上追加注解[@TableField(value = &quot;update_time&quot;, fill = FieldFill.INSERT_UPDATE)]</span><br>                            .addTableFills(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Column</span>(<span class="hljs-string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE))<br>                            <span class="hljs-comment">// 阶段2：Mapper策略配置</span><br>                            .mapperBuilder()<br>                            <span class="hljs-comment">// 开启 @Mapper 注解。</span><br>                            <span class="hljs-comment">// 会在mapper接口上添加注解[@Mapper]</span><br>                            .enableMapperAnnotation()<br>                            <span class="hljs-comment">// 启用 BaseResultMap 生成。</span><br>                            <span class="hljs-comment">// 会在mapper.xml文件生成[通用查询映射结果]配置。</span><br>                            .enableBaseResultMap()<br>                            <span class="hljs-comment">// 启用 BaseColumnList。</span><br>                            <span class="hljs-comment">// 会在mapper.xml文件生成[通用查询结果列 ]配置</span><br>                            .enableBaseColumnList()<br>                            <span class="hljs-comment">// 阶段4：Controller策略配置</span><br>                            .controllerBuilder()<br>                            <span class="hljs-comment">// 会在控制类中加[@RestController]注解。</span><br>                            .enableRestStyle()<br>                            <span class="hljs-comment">// 开启驼峰转连字符</span><br>                            .enableHyphenStyle()<br>                            .build()<br>                           )<br><br>            <span class="hljs-comment">// 4. 模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker</span><br>            <span class="hljs-comment">//.templateEngine(new BeetlTemplateEngine())</span><br>            .templateEngine(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FreemarkerTemplateEngine</span>())<br><br>            <span class="hljs-comment">// 5. 执行</span><br>            .execute();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据库</category>
      
      <category>mysql</category>
      
      <category>mybatis-plus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django</title>
    <link href="/2022/12/02/%E5%85%B6%E4%BB%96/python/Django/"/>
    <url>/2022/12/02/%E5%85%B6%E4%BB%96/python/Django/</url>
    
    <content type="html"><![CDATA[<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><blockquote><p>Django 是一个由 <strong>Python</strong> 编写的一个开放源代码的 <strong>Web 应用框架</strong>。</p></blockquote><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>pip</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> django<br></code></pre></td></tr></table></figure><p>pycharm</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">软件包搜D<span class="hljs-function"><span class="hljs-title">jango</span> --&gt;</span> 安装软件包<br></code></pre></td></tr></table></figure><p>安装完后会在Lib目录下下载django源码，在Scripts下生成django-admin.exe用于生成django项目</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>cmd</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 进到要创建项目的目录</span><br>django-<span class="hljs-literal">admin</span> startproject 项目名称<br></code></pre></td></tr></table></figure><p>pycharm</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">文件</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">新建项目</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">Django</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">输入项目名创建项目</span><br></code></pre></td></tr></table></figure><h4 id="项目目录说明"><a href="#项目目录说明" class="headerlink" title="项目目录说明"></a>项目目录说明</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- 项目同名文件夹</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- __init__.py# 空的，标记这个软件包为python软件包</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- asgi.py# 接收网络请求（异步）</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- settings.py# 项目的配置文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- urls.py# 访问路径和函数间的映射关系</span><br><span class="hljs-string"></span>|<span class="hljs-string">   `-- wsgi.py# 接收网络请求（同步）</span><br><span class="hljs-string">`-- manage.py# 项目管理，启动项目，创建app，数据管理</span><br></code></pre></td></tr></table></figure><h4 id="App"><a href="#App" class="headerlink" title="App"></a>App</h4><blockquote><p>类似java中maven项目的模块</p></blockquote><p>创建app</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 在项目目录下</span><br>python manage.py startapp <span class="hljs-variable">&lt;app名&gt;</span><br></code></pre></td></tr></table></figure><p>注册app</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">在settings.<span class="hljs-keyword">py</span>文件的INSTALLED_APPS中添加app的apps.<span class="hljs-keyword">py</span>中的启动类<br></code></pre></td></tr></table></figure><p>app目录结构</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- app名</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- __init__.py</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- admin.py# django默认提供了admin后台管理</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- apps.py# app启动类</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- models.py           # **对数据库操作**</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- tests.py            # 单元测试</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- views.py# **放与请求路径对应的函数**</span><br><span class="hljs-string">`-- manage.py</span><br></code></pre></td></tr></table></figure><h3 id="第一个项目"><a href="#第一个项目" class="headerlink" title="第一个项目"></a>第一个项目</h3><ol><li>创建app</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp HelloWorld<br></code></pre></td></tr></table></figure><ol start="2"><li>settings.py的INSTALLED_APPS中注册app</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;HelloWorld.apps.HelloworldConfig&#x27;</span>,     <span class="hljs-comment"># 注册app</span><br>]<br></code></pre></td></tr></table></figure><ol start="3"><li>urls.py中加入映射</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    <span class="hljs-comment"># 访问路径和函数的映射</span><br>    path(<span class="hljs-string">&#x27;index/&#x27;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure><ol start="4"><li>在views.py中编写对应函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="5"><li>启动</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver<br>或<br>pycharm 中绿色三角<br></code></pre></td></tr></table></figure><ol start="6"><li>页面访问<code>localhost:8000/index</code></li></ol><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><blockquote><p>在app下建立templates目录来放置网页文件</p><p>static目录放静态文件</p></blockquote><p>在函数中使用<code>return render(request, &quot;文件名&quot;)</code>来返回网页</p><p>搜索网页文件顺序</p><ol><li><p>优先项目根目录的templates中找</p><blockquote><p>要在配置文件的TEMPLATES中标识<code>&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)]</code></p></blockquote></li><li><p>根据app注册顺序，在每个app的templates中找</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flask</title>
    <link href="/2022/12/01/%E5%85%B6%E4%BB%96/python/flask/"/>
    <url>/2022/12/01/%E5%85%B6%E4%BB%96/python/flask/</url>
    
    <content type="html"><![CDATA[<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p><strong>后端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><span class="hljs-keyword">import</span> pymysql<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/add/user&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_user</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;add_user.html&quot;</span>)<br><br>    <span class="hljs-comment"># 保存到mysql</span><br>    conn = get_conn()<br>    insert(conn, request)<br>    conn.close()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加成功&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/show/user&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_user</span>():<br>    conn = get_conn()<br>    all_info = get_all(conn)<br>    conn.close()<br>    <span class="hljs-built_in">print</span>(all_info)<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;show_user.html&quot;</span>, data_list=all_info)<br><br><span class="hljs-comment"># 获取游标</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_conn</span>():<br>    conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>                           port=<span class="hljs-number">3306</span>,<br>                           user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                           password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                           charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                           db=<span class="hljs-string">&#x27;pyconn&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> conn<br><br><br><span class="hljs-comment"># 插入数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">conn, request</span>):<br>    info = &#123;<br>        <span class="hljs-string">&quot;user&quot;</span>: request.form.get(<span class="hljs-string">&quot;user&quot;</span>),<br>        <span class="hljs-string">&quot;pwd&quot;</span>: request.form.get(<span class="hljs-string">&quot;pwd&quot;</span>),<br>        <span class="hljs-string">&quot;mobile&quot;</span>: request.form.get(<span class="hljs-string">&quot;mobile&quot;</span>),<br>    &#125;<br>    cursor = conn.cursor()<br>    sql = <span class="hljs-string">&quot;insert into admin(username, password, mobile) values (%s, %s, %s)&quot;</span><br>    cursor.execute(sql, [info[<span class="hljs-string">&quot;user&quot;</span>], info[<span class="hljs-string">&quot;pwd&quot;</span>], info[<span class="hljs-string">&quot;mobile&quot;</span>]])<br>    conn.commit()<br><br><br><span class="hljs-comment"># 获取所有数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all</span>(<span class="hljs-params">conn</span>):<br>    cursor = conn.cursor(pymysql.cursors.DictCursor)<br>    sql = <span class="hljs-string">&quot;select * from admin&quot;</span><br>    cursor.execute(sql)<br>    <span class="hljs-keyword">return</span> cursor.fetchall()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p><strong>前端</strong></p><p>添加用户</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/add/user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mobile&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>展示用户</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        &#123;% for item in data_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.PASSWORD &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.mobile &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python连接数据库</title>
    <link href="/2022/12/01/%E5%85%B6%E4%BB%96/python/python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/12/01/%E5%85%B6%E4%BB%96/python/python%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="python连接数据库"><a href="#python连接数据库" class="headerlink" title="python连接数据库"></a>python连接数据库</h2><h3 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h3><blockquote><p>通过pymysql进行数据库操作</p></blockquote><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.创建连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>                       port=<span class="hljs-number">3306</span>,<br>                       user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                       password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                       charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                       db=<span class="hljs-string">&#x27;pyconn&#x27;</span>)<br><br><span class="hljs-comment"># 2.创建游标（cursor）</span><br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 3.执行sql</span><br>sql = <span class="hljs-string">&quot;&quot;&quot;CREATE TABLE admin(</span><br><span class="hljs-string">id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="hljs-string">username VARCHAR(16) NOT NULL,</span><br><span class="hljs-string">PASSWORD VARCHAR(64) NOT NULL,</span><br><span class="hljs-string">mobile CHAR(11) NOT NULL</span><br><span class="hljs-string">) DEFAULT CHARSET=utf8;&quot;&quot;&quot;</span><br><br>cursor.execute(sql)<br><br><span class="hljs-comment"># 4.断开连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><blockquote><p>要使用connit提交到数据库</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1.创建连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>                       port=<span class="hljs-number">3306</span>,<br>                       user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                       password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                       charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                       db=<span class="hljs-string">&#x27;pyconn&#x27;</span>)<br><span class="hljs-comment"># 2.创建游标（cursor）</span><br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 3.用游标execute执行sql语句</span><br>cursor.execute(<span class="hljs-string">&quot;insert into admin(username, password, mobile) values (&#x27;zs&#x27;,&#x27;123456&#x27;,&#x27;12312345678&#x27;)&quot;</span>)<br>conn.commit()<br><br><span class="hljs-comment"># 4.断开连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不要用拼接字符串来注入变量，而是使用pymysql的占位符</span><br>sql = <span class="hljs-string">&quot;insert into admin(username, password, mobile) values (%s,%s,%s)&quot;</span><br>cursor.execute(sql, [<span class="hljs-string">&#x27;ls&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;45612345678&#x27;</span>])<br></code></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pthon"># 可以给占位符起名<br>sql = &quot;insert into admin(username, password, mobile) values (%(n1)s,%(n2)s,%(n3)s)&quot;<br>cursor.execute(sql, &#123;&#x27;n1&#x27;: &#x27;ww&#x27;, &#x27;n2&#x27;: &#x27;123456&#x27;, &#x27;n3&#x27;: &#x27;12345678123&#x27;&#125;)<br></code></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><blockquote><p>fetchone()：查询一条</p><p>fetchall(): 返回所有结果的集合</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.创建连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>                       port=<span class="hljs-number">3306</span>,<br>                       user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                       password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                       charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                       db=<span class="hljs-string">&#x27;pyconn&#x27;</span>)<br><span class="hljs-comment"># 2.创建游标（cursor）</span><br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 3.执行sql</span><br>sql = <span class="hljs-string">&#x27;select * from admin&#x27;</span><br>cursor.execute(sql)<br><br><span class="hljs-comment"># 3.1fetchone</span><br>data = cursor.fetchone()<br><br><span class="hljs-comment"># 3.2fetchall</span><br>data_list = cursor.fetchall()<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-built_in">print</span>(row)<br><br><span class="hljs-comment"># 4.断开连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pyhton">import pymysql<br><br># 1.创建连接<br>conn = pymysql.connect(host=&quot;127.0.0.1&quot;,<br>                       port=3306,<br>                       user=&#x27;root&#x27;,<br>                       password=&#x27;123456&#x27;,<br>                       charset=&#x27;utf8&#x27;,<br>                       db=&#x27;pyconn&#x27;)<br># 2.创建游标（cursor）<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br># 3.执行sql<br>sql = &#x27;update admin set password = %s where id = %s&#x27;<br>cursor.execute(sql, [&#x27;987654&#x27;, &#x27;1&#x27;])<br>conn.commit()<br><br># 4.断开连接<br>conn.close()<br></code></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><span class="hljs-comment"># 1.创建连接</span><br>conn = pymysql.connect(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>                       port=<span class="hljs-number">3306</span>,<br>                       user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                       password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                       charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,<br>                       db=<span class="hljs-string">&#x27;pyconn&#x27;</span>)<br><span class="hljs-comment"># 2.创建游标（cursor）</span><br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class="hljs-comment"># 3.执行sql</span><br>sql = <span class="hljs-string">&#x27;delete from admin where id=%s&#x27;</span><br>cursor.execute(sql, [<span class="hljs-number">1</span>, ])<br>conn.commit()<br><br><span class="hljs-comment"># 4.断开连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pythoon">try: <br>    sql = &#x27;delete from admin where id=%s&#x27;<br>    cursor.execute(sql, [1, ])<br>    conn.commit()<br>except:<br>    conn.rollback()# 回滚事务<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json转换</title>
    <link href="/2022/11/29/%E5%85%B6%E4%BB%96/json%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/11/29/%E5%85%B6%E4%BB%96/json%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="json转换"><a href="#json转换" class="headerlink" title="json转换"></a>json转换</h2><h3 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用：JSON转Java"><a href="#使用：JSON转Java" class="headerlink" title="使用：JSON转Java"></a>使用：JSON转Java</h4><blockquote><p>操作基于<strong>ObjectMapper</strong>对象的**readValue()**来完成</p><p>转换规则：将JSON对象的字段映射到Java对象中的属性。 Jackson删除了getter和setter方法名称的“ get”和“ set”部分，并将其余名称的第一个字符转换为小写。</p><p><strong>需要实现get、set方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">doors</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/** Getter and Setter */</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON-–-gt-Java对象"><a href="#JSON-–-gt-Java对象" class="headerlink" title="JSON –&gt; Java对象"></a>JSON –&gt; Java对象</h5><blockquote><p>readValue()重载方法可以传入：</p><p>字符串（String）、字符输入流（Reader）、字节输入流（InputStream）、</p><p>文件（File）、URL、二进制（byte[]）等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">carJson</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123; \&quot;brand\&quot; : \&quot;Mercedes\&quot;, \&quot;doors\&quot; : 5 &#125;&quot;</span>;<br><br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> objectMapper.readValue(carJson, Car.class);<br><br>        System.out.println(car);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON数组字符串-–-gt-Java对象数组"><a href="#JSON数组字符串-–-gt-Java对象数组" class="headerlink" title="JSON数组字符串 –&gt; Java对象数组"></a>JSON数组字符串 –&gt; Java对象数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;\&quot;brand\&quot;:\&quot;ford\&quot;&#125;, &#123;\&quot;brand\&quot;:\&quot;Fiat\&quot;&#125;]&quot;</span>;<br><br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Car[] cars = objectMapper.readValue(jsonArray, Car[].class);<br><br>        <span class="hljs-keyword">for</span> (Car car : cars) &#123;<br>            System.out.println(car);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON数组字符串-–-gt-List"><a href="#JSON数组字符串-–-gt-List" class="headerlink" title="JSON数组字符串 –&gt; List"></a>JSON数组字符串 –&gt; List</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Car&gt; cars = objectMapper.readValue(jsonArray, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;Car&gt;&gt;() &#123;&#125;);<br></code></pre></td></tr></table></figure><h5 id="JSON-–-gt-Map"><a href="#JSON-–-gt-Map" class="headerlink" title="JSON –&gt; Map"></a>JSON –&gt; Map</h5><blockquote><p> JSON对象中的每个字段都将成为Java Map中的键</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;brand\&quot;:\&quot;ford\&quot;, \&quot;doors\&quot;:5&#125;&quot;</span>;<br><br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Map&lt;String, Object&gt; cars = objectMapper.readValue(jsonObject, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);<br><br>        System.out.println(cars.keySet());<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="忽略不匹配的字段"><a href="#忽略不匹配的字段" class="headerlink" title="忽略不匹配的字段"></a>忽略不匹配的字段</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h5 id="不允许基本类型为null"><a href="#不允许基本类型为null" class="headerlink" title="不允许基本类型为null"></a>不允许基本类型为null</h5><blockquote><p>默认会赋空值，设置了这个则会报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">objectMapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h4 id="使用：Java转JSON"><a href="#使用：Java转JSON" class="headerlink" title="使用：Java转JSON"></a>使用：Java转JSON</h4><blockquote><p>操作基于<strong>ObjectMapper</strong>对象的**writeValue()&#x2F;writeValueAsString()&#x2F;writeValueAsBytes()**来完成</p></blockquote><h5 id="Java对象-–-gt-JSON"><a href="#Java对象-–-gt-JSON" class="headerlink" title="Java对象 –&gt; JSON"></a>Java对象 –&gt; JSON</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>    car.setBrand(<span class="hljs-string">&quot;BMW&quot;</span>);<br>    car.setDoors(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span>  <span class="hljs-operator">=</span> objectMapper.writeValueAsString(car);<br>        System.out.println(json);<br>    &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="将Date类型转为String"><a href="#将Date类型转为String" class="headerlink" title="将Date类型转为String"></a>将Date类型转为String</h5><blockquote><p>默认是转为毫秒</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-comment">// 设置日期转换器</span><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">simpleDateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>    objectMapper.setDateFormat(simpleDateFormat);<br><br>    <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>    car.setBrand(<span class="hljs-string">&quot;BMW&quot;</span>);<br>    car.setDoors(<span class="hljs-number">4</span>);<br>    car.setData(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span>  <span class="hljs-operator">=</span> objectMapper.writeValueAsString(car);<br>        System.out.println(json);<br>    &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><table><thead><tr><th>注解</th><th><strong>用法</strong></th></tr></thead><tbody><tr><td>@JsonProperty</td><td>用于属性，把属性的名称序列化时转换为另外一个名称。示例：<br/>@JsonProperty(“birth_ date”)<br/>private Date birthDate;</td></tr><tr><td>@JsonFormat</td><td>用于属性或者方法，把属性的格式序列化时转换成指定的格式。示例：<br/>  @JsonFormat(timezone &#x3D;”GMT+8”, pattern &#x3D; “yyyy-MM-dd HH:mm”) <br/>  public Date getBirthDate()</td></tr><tr><td>@JsonPropertyOrder</td><td>用于类， 指定属性在序列化时 json 中的顺序 ， 示例：<br/>@JsonPropertyOrder({ “birth_Date”, “name” })<br/>public class Person</td></tr><tr><td>@JsonCreator</td><td>用于构造方法，和 @JsonProperty 配合使用，适用有参数的构造方法。<br/> 示例：@JsonCreator<br/>public Person(@JsonProperty(“name”)String name) {…}</td></tr><tr><td>@JsonAnySetter</td><td>用于属性或者方法，设置未反序列化的属性名和值作为键值存储到 map 中<br/>@JsonAnySetter<br/>public void set(String key, Object value) {<br/>map.put(key, value);<br/>}</td></tr><tr><td>@JsonAnyGetter</td><td>用于方法 ，获取所有未序列化的属性<br/>public Map&lt;String, Object&gt; any() { return map; }</td></tr></tbody></table><h3 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h3><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="创建Gson"><a href="#创建Gson" class="headerlink" title="创建Gson"></a>创建Gson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 直接创建</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br><span class="hljs-comment">// 通过工厂类创建</span><br><span class="hljs-type">GsonBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>();<br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> builder.create();<br></code></pre></td></tr></table></figure><h4 id="使用：JSON转Java-1"><a href="#使用：JSON转Java-1" class="headerlink" title="使用：JSON转Java"></a>使用：JSON转Java</h4><blockquote><p>操作基于<strong>Gson</strong>对象来的**fromJson()**完成</p><p><strong>需要实现get、set方法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String firstName;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> String email;<br><br><span class="hljs-comment">// Getter and Setter</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON-–-gt-Java对象-1"><a href="#JSON-–-gt-Java对象-1" class="headerlink" title="JSON –&gt; Java对象"></a>JSON –&gt; Java对象</h5><blockquote><p>类似jackson的readValue()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&#x27;id&#x27;:1001, &#x27;firstName&#x27;:&#x27;Lokesh&#x27;, &#x27;lastName&#x27;:&#x27;Gupta&#x27;, &#x27;email&#x27;:&#x27;howtodoinjava@gmail.com&#x27;&#125;&quot;</span>;<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">empObject</span> <span class="hljs-operator">=</span> gson.fromJson(jsonString, Employee.class);<br>    System.out.println(empObject);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON数组字符串-–-gt-Java对象数组-1"><a href="#JSON数组字符串-–-gt-Java对象数组-1" class="headerlink" title="JSON数组字符串 –&gt; Java对象数组"></a>JSON数组字符串 –&gt; Java对象数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;&#x27;id&#x27;:1001, &#x27;firstName&#x27;:&#x27;Lokesh&#x27;, &#x27;lastName&#x27;:&#x27;Gupta&#x27;, &#x27;email&#x27;:&#x27;howtodoinjava@gmail.com&#x27;&#125;,&quot;</span> +<br>        <span class="hljs-string">&quot;&#123;&#x27;id&#x27;:1001, &#x27;firstName&#x27;:&#x27;Lokesh&#x27;, &#x27;lastName&#x27;:&#x27;Gupta&#x27;, &#x27;email&#x27;:&#x27;howtodoinjava@gmail.com&#x27;&#125;]&quot;</span>;<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br>    Employee[] employees = gson.fromJson(json, Employee[].class);<br>    <span class="hljs-keyword">for</span> (Employee employee : employees) &#123;<br>        System.out.println(employee);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON数组字符串-–-gt-List-1"><a href="#JSON数组字符串-–-gt-List-1" class="headerlink" title="JSON数组字符串 –&gt; List"></a>JSON数组字符串 –&gt; List</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;&#x27;id&#x27;:1001, &#x27;firstName&#x27;:&#x27;Lokesh&#x27;, &#x27;lastName&#x27;:&#x27;Gupta&#x27;, &#x27;email&#x27;:&#x27;howtodoinjava@gmail.com&#x27;&#125;,&quot;</span> +<br>        <span class="hljs-string">&quot;&#123;&#x27;id&#x27;:1001, &#x27;firstName&#x27;:&#x27;Lokesh&#x27;, &#x27;lastName&#x27;:&#x27;Gupta&#x27;, &#x27;email&#x27;:&#x27;howtodoinjava@gmail.com&#x27;&#125;]&quot;</span>;<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br>    ArrayList&lt;Employee&gt; employees = gson.fromJson(json, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;ArrayList&lt;Employee&gt;&gt;() &#123;<br>    &#125;.getType());<br><br>    <span class="hljs-keyword">for</span> (Employee employee : employees) &#123;<br>        System.out.println(employee);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="JSON数组字符串-–-gt-Set"><a href="#JSON数组字符串-–-gt-Set" class="headerlink" title="JSON数组字符串 –&gt; Set"></a>JSON数组字符串 –&gt; Set</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Employee&gt; employees = gson.fromJson(json, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;HashSet&lt;Employee&gt;&gt;() &#123;<br>       &#125;.getType());<br></code></pre></td></tr></table></figure><h4 id="使用：Java转Json"><a href="#使用：Java转Json" class="headerlink" title="使用：Java转Json"></a>使用：Java转Json</h4><blockquote><p>操作基于<strong>Gson</strong>对象的**toJson()**来完成</p><p>重载支持set</p></blockquote><h5 id="Java对象-–-gt-JSON-1"><a href="#Java对象-–-gt-JSON-1" class="headerlink" title="Java对象 –&gt; JSON"></a>Java对象 –&gt; JSON</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;Lokesh&quot;</span>, <span class="hljs-string">&quot;Gupta&quot;</span>, <span class="hljs-string">&quot;howtodoinjava@gmail.com&quot;</span>);<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> gson.toJson(emp);<br>    System.out.println(jsonString);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h5><blockquote><p>通过工厂类创建Gson，设置setPrettyPrinting</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employeeObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Lokesh&quot;</span>, <span class="hljs-string">&quot;Gupta&quot;</span>, <span class="hljs-string">&quot;howtogoinjava@gmail.com&quot;</span>);<br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>()<br>        .setPrettyPrinting()<br>        .create();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> gson.toJson(employeeObj);<br>    System.out.println(json);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 打印<br>&#123;<br>  <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;firstName&quot;</span>: <span class="hljs-string">&quot;Lokesh&quot;</span>,<br>  <span class="hljs-string">&quot;lastName&quot;</span>: <span class="hljs-string">&quot;Gupta&quot;</span>,<br>  <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;howtogoinjava@gmail.com&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h4><table><thead><tr><th>注解</th><th>用法</th></tr></thead><tbody><tr><td>@SerializedName</td><td>自定义字段的名字</td></tr><tr><td>@Expose</td><td>只要有一个字段使用了Expose注解，所有需要参与序列化和反序列化的字段都要有这个注解<br/>@Expose(deserialize &#x3D; false)声明不参与反序列化<br/>@Expose(serialize &#x3D; false)声明该字段不参与序列化</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro</title>
    <link href="/2022/11/26/%E5%85%B6%E4%BB%96/Shiro/"/>
    <url>/2022/11/26/%E5%85%B6%E4%BB%96/Shiro/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><p>参考<a href="https://zhuanlan.zhihu.com/p/54176956">Shiro安全框架【快速入门】就这一篇！ - 知乎 (zhihu.com)</a></p><h3 id="做什么的"><a href="#做什么的" class="headerlink" title="做什么的"></a>做什么的</h3><blockquote><p>开源安全框架，处理身份验证、授权、加密和会话管理</p><ul><li>认证：识别用户身份（登录）</li><li>授权：给用户某些操作的权限（赋予角色）</li><li>加密：对数据源使用加密算法</li><li>会话管理：特定于用户的会话管理</li></ul></blockquote><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><blockquote><p>分为Subject,SecurityManager和 Realm三层</p></blockquote><p><img src="/img/quick_img/Shior%E6%9E%B6%E6%9E%84.png"></p><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><ul><li><strong>Subject</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">可以是一个通过浏览器请求的用户，也可能是一个运行的程序<br><br>Subject在shiro中是一个接口，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权<br></code></pre></td></tr></table></figure><ul><li><strong>SecurityManager</strong></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">shiro的核心</span><br><span class="hljs-keyword"></span>对所有的<span class="hljs-keyword">subject进行安全管理，可以完成subject的认证、授权等</span><br><span class="hljs-keyword"></span>通过Authenticator认证器进行认证<br>通过Authorizer授权器进行授权<br>通过SessionManager进行会话管理<br></code></pre></td></tr></table></figure><ul><li><strong>Realm</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">数据库读取+认证功能+授权功能实现<br>相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据<br></code></pre></td></tr></table></figure><ul><li>CacheManager</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">将用户权限数据存储在缓存以提高性能<br></code></pre></td></tr></table></figure><ul><li>Cryptography</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">密码管理<br></code></pre></td></tr></table></figure><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><h5 id="从ini文件读取"><a href="#从ini文件读取" class="headerlink" title="从ini文件读取"></a>从ini文件读取</h5><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在resource目录下编写ini文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#声明用户账号</span><br><span class="hljs-section">[users]</span><br><span class="hljs-attr">jay</span>=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloShiro</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shiroLogin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 导入权限ini文件构建权限工厂</span><br>        <span class="hljs-type">IniSecurityManagerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IniSecurityManagerFactory</span>(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>);<br>        <span class="hljs-comment">// 用工厂构建Manager</span><br>        <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> factory.getInstance();<br>        <span class="hljs-comment">// 使Manager生效</span><br>        SecurityUtils.setSecurityManager(securityManager);<br><br>        <span class="hljs-comment">// 获取Subject</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">// 创建Token</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;jay&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-comment">// subject通过token登录</span><br>        subject.login(token);<br>        System.out.println(<span class="hljs-string">&quot;是否登录成功：&quot;</span> + subject.isAuthenticated());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="从Realm中读取"><a href="#从Realm中读取" class="headerlink" title="从Realm中读取"></a>从Realm中读取</h5><ol><li><p>编写service，模拟从数据库读取用户密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findPasswordByLoginName</span><span class="hljs-params">(String loginName)</span> &#123;<br>        <span class="hljs-comment">// 模拟从数据库中获取密码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;123&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自定义Realm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefinitionRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-type">SecurityService</span> <span class="hljs-variable">securityService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityServiceImpl</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 授权</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principalCollection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authenticationToken</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AuthenticationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 获取用户唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> (String) authenticationToken.getPrincipal();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> securityService.findPasswordByLoginName(loginName);<br>        <span class="hljs-keyword">if</span> (password == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(password))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownAccountException</span>(<span class="hljs-string">&quot;账户不存在&quot;</span>);<br><span class="hljs-comment">// 传递账号和密码</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(loginName, password, <span class="hljs-built_in">this</span>.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在ini文件中设置realm</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><br><span class="hljs-attr">definitionRealm</span>=com.xw.realm.DefinitionRealm<br><span class="hljs-attr">securityManager.realms</span>=<span class="hljs-variable">$definitionRealm</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试类</p><p>和上面的一样</p></li><li><p>认证过程</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl">S<span class="hljs-function"><span class="hljs-title">ubject</span> -&gt;</span> S<span class="hljs-function"><span class="hljs-title">ecurityManager</span> -&gt;</span> A<span class="hljs-function"><span class="hljs-title">uthenticator</span> -&gt;</span> R<span class="hljs-function"><span class="hljs-title">ealm</span> -&gt;</span> 自定义Realm将数据库中查到的账号密码返回<br>最后在Realm中比较Subject传过来的Token和数据库中的是否一致<br></code></pre></td></tr></table></figure></li></ol><h4 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h4><p><strong>通过shiro的Hex和Base64来进行编码解码</strong></p><ol><li><p>编写工具类（把两种方式整合到一个工具类上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncodesUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照16进制编码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bytes</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-keyword">return</span> Hex.encodeToString(bytes);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照16进制解码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decodeHex(String s) &#123;<br>        <span class="hljs-keyword">return</span> Hex.decode(s);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照16进制编码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bytes</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeBase64</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-keyword">return</span> Base64.encodeToString(bytes);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照16进制解码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decodeBase64(String s) &#123;<br>        <span class="hljs-keyword">return</span> Base64.decode(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-comment">// 测试16进制编码解码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> EncodesUtils.encodeHex(pwd.getBytes());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">decode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(EncodesUtils.decodeHex(encode));<br>    System.out.println(decode.equals(pwd) ? <span class="hljs-string">&quot;相等&quot;</span> : <span class="hljs-string">&quot;不相等&quot;</span>);<br>    <span class="hljs-comment">// 测试base64编码解码</span><br>    encode = EncodesUtils.encodeBase64(pwd.getBytes());<br>    decode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(EncodesUtils.decodeBase64(encode));<br>    System.out.println(decode.equals(pwd) ? <span class="hljs-string">&quot;相等&quot;</span> : <span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>散列算法</strong></p><p>通过SimpleHash(算法名称，原密码，盐值，加密次数)来进行加密</p><ol><li><p>编写工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DigestUtil</span> &#123;<br><br>    <span class="hljs-comment">// 算法名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SHA1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SHA-1&quot;</span>;<br><br>    <span class="hljs-comment">// 加密次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">ITERATIONS</span> <span class="hljs-operator">=</span> <span class="hljs-number">512</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过sha1加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> salt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sha1</span><span class="hljs-params">(String s, String salt)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>(SHA1, s, salt, ITERATIONS).toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回加密后的密码和盐值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> passwordPlain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">entryptPassword</span><span class="hljs-params">(String passwordPlain)</span> &#123;<br>        HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> generateSalt();<br>        map.put(<span class="hljs-string">&quot;salt&quot;</span>, salt);<br>        map.put(<span class="hljs-string">&quot;password&quot;</span>, sha1(passwordPlain, salt));<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机盐值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateSalt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SecureRandomNumberGenerator</span> <span class="hljs-variable">randomNumberGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandomNumberGenerator</span>();<br>        <span class="hljs-keyword">return</span> randomNumberGenerator.nextBytes().toHex();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    Map&lt;String, String&gt; map = DigestUtil.entryptPassword(pwd);<br>    System.out.println(map.toString());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Realm中指定匹配器"><a href="#Realm中指定匹配器" class="headerlink" title="Realm中指定匹配器"></a>Realm中指定匹配器</h4><blockquote><p>自定义匹配器的盐值，加密次数</p></blockquote><ol><li><p>service层返回加密后的密码和盐值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title function_">findPasswordByLoginName</span><span class="hljs-params">(String loginName)</span> &#123;<br>        <span class="hljs-comment">// 模拟从数据库中获取密码</span><br>        <span class="hljs-keyword">return</span> DigestUtil.entryptPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自定义Realm重写构造函数，设置匹配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefinitionRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-type">SecurityService</span> <span class="hljs-variable">securityService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityServiceImpl</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefinitionRealm</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建匹配器，指定匹配方式</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>(DigestUtil.SHA1);<br>        <span class="hljs-comment">// 指定迭代次数</span><br>        matcher.setHashIterations(DigestUtil.ITERATIONS);<br>        <span class="hljs-comment">// 使匹配器生效</span><br>        setCredentialsMatcher(matcher);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 授权</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principalCollection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authenticationToken</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AuthenticationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 获取用户唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> (String) authenticationToken.getPrincipal();<br>        Map&lt;String, String&gt; map = securityService.findPasswordByLoginName(loginName);<br>        <span class="hljs-keyword">if</span> (map.isEmpty())<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownAccountException</span>(<span class="hljs-string">&quot;账户不存在&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;salt&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(loginName, password, ByteSource.Util.bytes(salt), <span class="hljs-built_in">this</span>.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><h4 id="身份授权"><a href="#身份授权" class="headerlink" title="身份授权"></a>身份授权</h4><ol><li><p>service层返回查询到的角色、权限信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">findRoleByLoginName</span><span class="hljs-params">(String loginName)</span> &#123;<br>    <span class="hljs-comment">// 模拟从数据库中获取角色</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;admin&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;dev&quot;</span>);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">findPermissionByLoginName</span><span class="hljs-params">(String loginName)</span> &#123;<br>    <span class="hljs-comment">// 模拟从数据库中获取权限</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;order:add&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;order:list&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;order:del&quot;</span>);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Realm中构建校验信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefinitionRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-type">SecurityService</span> <span class="hljs-variable">securityService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityServiceImpl</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 授权</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principalCollection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        <span class="hljs-comment">// 获取用户唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> (String) principalCollection.getPrimaryPrincipal();<br>        <span class="hljs-comment">// 从数据库中获取用户角色和权限</span><br>        List&lt;String&gt; roles = securityService.findRoleByLoginName(loginName);<br>        List&lt;String&gt; permissions = securityService.findPermissionByLoginName(loginName);<br>        <span class="hljs-comment">// 构建校验信息</span><br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">authenticationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        authenticationInfo.addRoles(roles);<br>        authenticationInfo.addStringPermissions(permissions);<br><br>        <span class="hljs-keyword">return</span> authenticationInfo;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPermissionRealm</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> shiroLogin();<br><br>    <span class="hljs-comment">// 验证角色</span><br>    System.out.println(<span class="hljs-string">&quot;是否有admin角色：&quot;</span> + subject.hasRole(<span class="hljs-string">&quot;admin&quot;</span>));<span class="hljs-comment">// true</span><br>    System.out.println(<span class="hljs-string">&quot;是否有coder角色：&quot;</span> + subject.hasRole(<span class="hljs-string">&quot;coder&quot;</span>));<span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// 验证权限</span><br>    System.out.println(<span class="hljs-string">&quot;是否有添加订单权限：&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;order:add&quot;</span>));<span class="hljs-comment">// true</span><br>    System.out.println(<span class="hljs-string">&quot;是否有修改订单权限：&quot;</span> + subject.isPermitted(<span class="hljs-string">&quot;order:update&quot;</span>));<span class="hljs-comment">// false</span><br><br>&#125;<br><br><span class="hljs-keyword">public</span> Subject <span class="hljs-title function_">shiroLogin</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 导入权限ini文件构建权限工厂</span><br>    <span class="hljs-type">IniSecurityManagerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IniSecurityManagerFactory</span>(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>);<br>    <span class="hljs-comment">// 用工厂构建Manager</span><br>    <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> factory.getInstance();<br>    <span class="hljs-comment">// 使Manager生效</span><br>    SecurityUtils.setSecurityManager(securityManager);<br><br>    <span class="hljs-comment">// 获取subject</span><br>    <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>    <span class="hljs-comment">// 创建Token</span><br>    <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;jay&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br>    <span class="hljs-comment">// subject通过token登录</span><br>    subject.login(token);<br>    System.out.println(<span class="hljs-string">&quot;是否登录成功：&quot;</span> + subject.isAuthenticated());<br><br>    <span class="hljs-keyword">return</span> subject;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><h4 id="Shiro认证过程"><a href="#Shiro认证过程" class="headerlink" title="Shiro认证过程"></a>Shiro认证过程</h4><blockquote><p>验证用户身份</p></blockquote><p><img src="/img/quick_img/Shior%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.png"></p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationTest</span> &#123;<br><br>    <span class="hljs-type">SimpleAccountRealm</span> <span class="hljs-variable">simpleAccountRealm</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAccountRealm</span>();<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 往Realm域中添加用户信息</span><br>        simpleAccountRealm.addAccount(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAuthentication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.构建SecurityManager环境</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">defaultSecurityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        defaultSecurityManager.setRealm(simpleAccountRealm);<br><br>        SecurityUtils.setSecurityManager(defaultSecurityManager);   <span class="hljs-comment">// 设置SecurityManager环境</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();   <span class="hljs-comment">// 获取当前主体</span><br><br>        <span class="hljs-comment">// 2.主体提交认证请求</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        subject.login(token);   <span class="hljs-comment">// 登录</span><br><br>        System.out.println(<span class="hljs-string">&quot;isAuthenticated:&quot;</span> + subject.isAuthenticated());<br><br>        subject.logout();<br><br>        System.out.println(<span class="hljs-string">&quot;isAuthenticated:&quot;</span> + subject.isAuthenticated());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Shiro授权过程"><a href="#Shiro授权过程" class="headerlink" title="Shiro授权过程"></a>Shiro授权过程</h4><blockquote><p>赋予&#x2F;验证用户角色</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationTest2</span> &#123;<br><br>    <span class="hljs-type">SimpleAccountRealm</span> <span class="hljs-variable">simpleAccountRealm</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAccountRealm</span>();<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 往Realm域中添加用户信息</span><br>        <span class="hljs-comment">// 使其具备admin和user两个角色</span><br>        simpleAccountRealm.addAccount(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAuthentication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.构建SecurityManager环境</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">defaultSecurityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        defaultSecurityManager.setRealm(simpleAccountRealm);<br><br>        SecurityUtils.setSecurityManager(defaultSecurityManager);   <span class="hljs-comment">// 设置SecurityManager环境</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();   <span class="hljs-comment">// 获取当前主体</span><br><br>        <span class="hljs-comment">// 2.主体提交认证请求</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        subject.login(token);   <span class="hljs-comment">// 登录</span><br><br>        System.out.println(<span class="hljs-string">&quot;isAuthenticated:&quot;</span> + subject.isAuthenticated());<br><br>        <span class="hljs-comment">// 验证用户是否有相应的角色，没有则报错</span><br>        subject.checkRoles(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br><br>        <span class="hljs-comment">// subject.checkRoles(&quot;admin&quot;, &quot;user&quot;, &quot;xxx&quot;); // UnauthorizedException</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h4><blockquote><p>realm类似MVC的repository层</p></blockquote><p>自定义Realm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 模拟数据库数据</span><br><span class="hljs-comment">     */</span><br>    Map&lt;String, String&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">16</span>);<br><br>    &#123;<br>        userMap.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-built_in">super</span>.setName(<span class="hljs-string">&quot;myRealm&quot;</span>); <span class="hljs-comment">// 设置自定义Realm的名称</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 授权</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principalCollection</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> (String) principalCollection.getPrimaryPrincipal();<br><br>        <span class="hljs-comment">// 从数据库中获取角色和权限数据</span><br>        Set&lt;String&gt; roles = getRolesByUserName(userName);<br>        Set&lt;String&gt; permissions = getPermissionsByUserName(userName);<br><br>        <span class="hljs-comment">// 添加到授权信息中并返回</span><br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">simpleAuthorizationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        simpleAuthorizationInfo.setStringPermissions(permissions);<br>        simpleAuthorizationInfo.setRoles(roles);<br><br>        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> authenticationToken</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AuthenticationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) authenticationToken.getPrincipal();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> getPasswordByUserName(username);<br>        <span class="hljs-keyword">if</span> (password == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">SimpleAuthenticationInfo</span> <span class="hljs-variable">simpleAuthenticationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(<span class="hljs-string">&quot;user&quot;</span>, password, <span class="hljs-string">&quot;myRealm&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> simpleAuthenticationInfo;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名获取权限信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; <span class="hljs-title function_">getPermissionsByUserName</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-comment">// 模拟查询数据库并返回</span><br>        HashSet&lt;String&gt; permission = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        permission.add(<span class="hljs-string">&quot;user:delete&quot;</span>);<br>        permission.add(<span class="hljs-string">&quot;user:add&quot;</span>);<br>        <span class="hljs-keyword">return</span> permission;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取角色数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; <span class="hljs-title function_">getRolesByUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-comment">// 模拟查询数据库并返回</span><br>        Set&lt;String&gt; roles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        roles.add(<span class="hljs-string">&quot;admin&quot;</span>);<br>        roles.add(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">return</span> roles;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用户密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getPasswordByUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-comment">// 模拟获取用户密码/凭证</span><br>        <span class="hljs-keyword">return</span> userMap.get(userName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationTest3</span> &#123;<br><br>    <span class="hljs-type">MyRealm</span> <span class="hljs-variable">myRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRealm</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAuthentication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1.构建SecurityManager环境</span><br>        <span class="hljs-type">DefaultSecurityManager</span> <span class="hljs-variable">defaultSecurityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSecurityManager</span>();<br>        defaultSecurityManager.setRealm(myRealm);<br><br>        SecurityUtils.setSecurityManager(defaultSecurityManager);<br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();   <span class="hljs-comment">// 获取当前主体</span><br><br>        <span class="hljs-comment">// 2.主体提交认证请求</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        subject.login(token);   <span class="hljs-comment">// 登录</span><br><br>        subject.checkRoles(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br><br>        subject.checkPermission(<span class="hljs-string">&quot;user:add&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Shiro加密"><a href="#Shiro加密" class="headerlink" title="Shiro加密"></a>Shiro加密</h4><blockquote><p>使用MD5加密可以使数据库中的密码不是明文保存，数据库泄露的损失会减小</p><p>但可以通过用一些简单常用的密码来撞库，从而反推原密码</p></blockquote><p>解决方式：</p><p><strong>加盐：</strong>在原始密码上加上随机数，再进行MD5加密。需要把随机数也存到数据库中，以便之后进行验证</p><p><strong>多次加密</strong>：多次加密MD5，从而让攻击者不知道加密的次数</p><p>Shiro实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationTest4</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAuthentication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-comment">// 盐值（随机数）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandomNumberGenerator</span>().nextBytes().toString();<br>        <span class="hljs-comment">// 加密次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">times</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 加密方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">alogrithmName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;md5&quot;</span>;<br><br>        <span class="hljs-type">SimpleHash</span> <span class="hljs-variable">encodePassword</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>(alogrithmName, password, salt, times);<br>        System.out.println(<span class="hljs-string">&quot;原密码：&quot;</span> + password);<br>        System.out.println(<span class="hljs-string">&quot;加密后：&quot;</span> + encodePassword);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><a href="https://github.com/Xwww12/Shiro-">小dmeo</a></p><h3 id="SpringBoot集成Shiro"><a href="#SpringBoot集成Shiro" class="headerlink" title="SpringBoot集成Shiro"></a>SpringBoot集成Shiro</h3><p><a href="https://blog.csdn.net/Yearingforthefuture/article/details/117384035">SpringBoot之整合Shiro springboot+shiro</a></p><h4 id="整合Shiro"><a href="#整合Shiro" class="headerlink" title="整合Shiro"></a>整合Shiro</h4><h5 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--shiro--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="编写自定义Realm"><a href="#编写自定义Realm" class="headerlink" title="编写自定义Realm"></a>编写自定义Realm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.shiro.realm;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编写Shiro配置类"><a href="#编写Shiro配置类" class="headerlink" title="编写Shiro配置类"></a>编写Shiro配置类</h5><p>主要配置过滤器、SecurityManager、Realm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.config;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfig</span> &#123;<br><br>    <span class="hljs-comment">// 过滤器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title function_">getShiroFilterFactoryBean</span><span class="hljs-params">(DefaultWebSecurityManager securityManager)</span> &#123;<br>        <span class="hljs-type">ShiroFilterFactoryBean</span> <span class="hljs-variable">shiroFilterFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroFilterFactoryBean</span>();<br>        <span class="hljs-comment">// 给ShiroFilter配置安全管理器</span><br>        shiroFilterFactoryBean.setSecurityManager(securityManager);<br>        <span class="hljs-comment">//配置系统受限资源</span><br>        <span class="hljs-comment">//配置系统公共资源</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>        map.put(<span class="hljs-string">&quot;/index.jsp&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<span class="hljs-comment">//表示这个资源需要认证和授权</span><br>        <span class="hljs-comment">// 设置认证界面路径</span><br>        shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);<br><br>        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>    &#125;<br><br>    <span class="hljs-comment">// SecurityManager</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DefaultWebSecurityManager <span class="hljs-title function_">getDefaultWebSecurityManager</span><span class="hljs-params">(Realm realm)</span> &#123;<br>        <span class="hljs-type">DefaultWebSecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultWebSecurityManager</span>();<br>        securityManager.setRealm(realm);<br>        <span class="hljs-keyword">return</span> securityManager;<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义Realm</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Realm <span class="hljs-title function_">getRealm</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CustomerRealm</span> <span class="hljs-variable">customerRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerRealm</span>();<br>        <span class="hljs-keyword">return</span> customerRealm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="登录登出"><a href="#登录登出" class="headerlink" title="登录登出"></a>登录登出</h4><h5 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h5><p>登录登出方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取主体</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">// 退出</span><br>        subject.logout();<br><br>        <span class="hljs-comment">// 重定向到登录界面</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/login.jsp&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(username, password);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 登录</span><br>            subject.login(token);<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;用户错误&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/login.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编写自定义Realm的认证方法"><a href="#编写自定义Realm的认证方法" class="headerlink" title="编写自定义Realm的认证方法"></a>编写自定义Realm的认证方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 认证</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) authenticationToken.getPrincipal();<br>    <span class="hljs-comment">// 模拟从数据库中获取账号密码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-keyword">if</span> (account.equals(username)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(username, password, <span class="hljs-built_in">this</span>.getName());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="修改配置类"><a href="#修改配置类" class="headerlink" title="修改配置类"></a>修改配置类</h5><p>将login方法设为公共资源，其他的为受限资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>map.put(<span class="hljs-string">&quot;/user/login&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);<span class="hljs-comment">//表示这个为公共资源 一定是在受限资源上面</span><br>map.put(<span class="hljs-string">&quot;/**&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<span class="hljs-comment">//表示这个受限资源需要认证和授权</span><br></code></pre></td></tr></table></figure><h4 id="MD5、Salt认证"><a href="#MD5、Salt认证" class="headerlink" title="MD5、Salt认证"></a>MD5、Salt认证</h4><h5 id="编写生成盐值工具类"><a href="#编写生成盐值工具类" class="headerlink" title="编写生成盐值工具类"></a>编写生成盐值工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaltUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSalt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandomNumberGenerator</span>().nextBytes().toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编写获取对象工具类"><a href="#编写获取对象工具类" class="headerlink" title="编写获取对象工具类"></a>编写获取对象工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.utils;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContextUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext context;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-built_in">this</span>.context = applicationContext;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-keyword">return</span> context.getBean(beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编写Service注册方法"><a href="#编写Service注册方法" class="headerlink" title="编写Service注册方法"></a>编写Service注册方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.service.impl;<br><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// 添加盐值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> SaltUtil.getSalt();<br>        user.setSalt(salt);<br>        <span class="hljs-comment">// 明文密码进行md5 + salt + hash散列</span><br>        <span class="hljs-type">Md5Hash</span> <span class="hljs-variable">MD5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Md5Hash</span>(user.getPassword(), salt, <span class="hljs-number">1024</span>);<br>        user.setPassword(MD5.toHex());<br>        userMapper.save(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findByUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.findByUsername(username);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="自定义Realm中改为从Service中获取数据"><a href="#自定义Realm中改为从Service中获取数据" class="headerlink" title="自定义Realm中改为从Service中获取数据"></a>自定义Realm中改为从Service中获取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 认证</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) authenticationToken.getPrincipal();<br>    <span class="hljs-comment">// 获取userService对象</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) ApplicationContextUtil.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.findByUsername(username);<br>    <span class="hljs-keyword">if</span> (!ObjectUtils.isEmpty(user)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(user.getUsername(), user.getPassword(), ByteSource.Util.bytes(user.getSalt()), <span class="hljs-built_in">this</span>.getName());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="修改配置类-1"><a href="#修改配置类-1" class="headerlink" title="修改配置类"></a>修改配置类</h5><p>修改公共资源和添加匹配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(<span class="hljs-string">&quot;/user/login&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);<span class="hljs-comment">//表示这个为公共资源 一定是在受限资源上面</span><br>map.put(<span class="hljs-string">&quot;/user/register&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);<span class="hljs-comment">//表示这个为公共资源 一定是在受限资源上面</span><br>map.put(<span class="hljs-string">&quot;/register.jsp&quot;</span>,<span class="hljs-string">&quot;anon&quot;</span>);<span class="hljs-comment">//表示这个为公共资源 一定是在受限资源上面</span><br>map.put(<span class="hljs-string">&quot;/**&quot;</span>,<span class="hljs-string">&quot;authc&quot;</span>);<span class="hljs-comment">//表示这个受限资源需要认证和授权</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自定义Realm</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Realm <span class="hljs-title function_">getRealm</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 匹配器</span><br>    <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>    credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>    credentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);<br>    <span class="hljs-comment">// 添加匹配器</span><br>    <span class="hljs-type">CustomerRealm</span> <span class="hljs-variable">customerRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerRealm</span>();<br>    customerRealm.setCredentialsMatcher(credentialsMatcher);<br>    <span class="hljs-keyword">return</span> customerRealm;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><h5 id="授予角色和权限"><a href="#授予角色和权限" class="headerlink" title="授予角色和权限"></a>授予角色和权限</h5><p>User &lt;–&gt; Role &lt;–&gt; Perm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 授权</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> &#123;<br>    <span class="hljs-comment">// 获取用户唯一标识</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> (String) principalCollection.getPrimaryPrincipal();<br>    <span class="hljs-comment">// 获取UserService</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) ApplicationContextUtil.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.findRoleByUsername(principal);<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(user.getRoles())) &#123;<br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        user.getRoles().forEach(role -&gt; &#123;<br>            <span class="hljs-comment">// 将用户角色放到info中并返回</span><br>            info.addRole(role.getName());<br>            <span class="hljs-comment">// 根据角色id获取角色对应的权限信息</span><br>            List&lt;Perms&gt; perms = userService.findPermsByRoleId2(role.getId());<br>            <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(perms) &amp;&amp; perms.get(<span class="hljs-number">0</span>) != <span class="hljs-literal">null</span>) &#123;<br>                perms.forEach(perm -&gt; info.addStringPermission(perm.getName()));<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="判断是否有角色和权限"><a href="#判断是否有角色和权限" class="headerlink" title="判断是否有角色和权限"></a>判断是否有角色和权限</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-comment">// 基于方法</span><br><span class="hljs-comment">//    @RequestMapping(&quot;save&quot;)</span><br><span class="hljs-comment">//    public String save() &#123;</span><br><span class="hljs-comment">//        //基于角色</span><br><span class="hljs-comment">//        //获取主体对象</span><br><span class="hljs-comment">//        Subject subject = SecurityUtils.getSubject();</span><br><span class="hljs-comment">//        //代码方式</span><br><span class="hljs-comment">//        if (subject.hasRole(&quot;admin&quot;)) &#123;</span><br><span class="hljs-comment">//            System.out.println(&quot;保存订单!&quot;);</span><br><span class="hljs-comment">//        &#125;else&#123;</span><br><span class="hljs-comment">//            System.out.println(&quot;无权访问!&quot;);</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        System.out.println(&quot;进入save方法============&quot;);</span><br><span class="hljs-comment">//        return &quot;redircet:/index.jsp&quot;;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-comment">// 基于注解</span><br>    <span class="hljs-meta">@RequiresRoles(value=&#123;&quot;admin&quot;,&quot;user&quot;&#125;)</span><span class="hljs-comment">//用来判断角色  同时具有 admin user</span><br>    <span class="hljs-meta">@RequiresPermissions(&quot;user:update:01&quot;)</span> <span class="hljs-comment">//用来判断权限字符串</span><br>    <span class="hljs-meta">@RequestMapping(&quot;save&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;进入方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="启用缓存"><a href="#启用缓存" class="headerlink" title="启用缓存"></a>启用缓存</h4><p>将用户的角色和权限保存在缓存中，不用每次都去数据库查</p><h5 id="EhCache"><a href="#EhCache" class="headerlink" title="EhCache"></a>EhCache</h5><blockquote><p>EhCache是shiro的默认缓存</p></blockquote><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>设置缓存管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Realm <span class="hljs-title function_">getRealm</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 匹配器</span><br>    <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>    credentialsMatcher.setHashAlgorithmName(<span class="hljs-string">&quot;md5&quot;</span>);<br>    credentialsMatcher.setHashIterations(<span class="hljs-number">1024</span>);<br>    <span class="hljs-comment">// 添加匹配器</span><br>    <span class="hljs-type">CustomerRealm</span> <span class="hljs-variable">customerRealm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerRealm</span>();<br>    customerRealm.setCredentialsMatcher(credentialsMatcher);<br><br>    <span class="hljs-comment">// 开启缓存管理器</span><br>    customerRealm.setCacheManager(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EhCacheManager</span>());<br>    customerRealm.setCachingEnabled(<span class="hljs-literal">true</span>);<span class="hljs-comment">//开启缓存</span><br>    customerRealm.setAuthenticationCachingEnabled(<span class="hljs-literal">true</span>);<span class="hljs-comment">//开启认证缓存</span><br>    customerRealm.setAuthenticationCacheName(<span class="hljs-string">&quot;authentication&quot;</span>);<br>    customerRealm.setAuthorizationCachingEnabled(<span class="hljs-literal">true</span>);<span class="hljs-comment">//开启授权缓存</span><br>    customerRealm.setAuthorizationCacheName(<span class="hljs-string">&quot;authorization&quot;</span>);<br>    <span class="hljs-keyword">return</span> customerRealm;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h5><p><strong>导入依赖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>配置Redis</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>编写Redis缓存管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.config.redis;<br><br><span class="hljs-keyword">import</span> com.xw.utils.ApplicationContextUtil;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.Cache;<br><span class="hljs-keyword">import</span> org.apache.shiro.cache.CacheException;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">//自定义redis缓存的实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCache</span>&lt;k,v&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span>&lt;k,v&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String cacheName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisCache</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisCache</span><span class="hljs-params">(String cacheName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cacheName = cacheName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> v <span class="hljs-title function_">get</span><span class="hljs-params">(k k)</span> <span class="hljs-keyword">throws</span> CacheException &#123;<br>        <span class="hljs-keyword">return</span> (v) getRedisTemplate().opsForHash().get(<span class="hljs-built_in">this</span>.cacheName, k.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> v <span class="hljs-title function_">put</span><span class="hljs-params">(k k, v v)</span> <span class="hljs-keyword">throws</span> CacheException &#123;<br>        System.out.println(<span class="hljs-string">&quot;put key: &quot;</span>+k);<br>        System.out.println(<span class="hljs-string">&quot;put value:&quot;</span>+v);<br>        getRedisTemplate().opsForHash().put(<span class="hljs-built_in">this</span>.cacheName,k.toString(), v);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> v <span class="hljs-title function_">remove</span><span class="hljs-params">(k k)</span> <span class="hljs-keyword">throws</span> CacheException &#123;<br>        System.out.println(<span class="hljs-string">&quot;=============remove=============&quot;</span>);<br>        <span class="hljs-keyword">return</span> (v) getRedisTemplate().opsForHash().delete(<span class="hljs-built_in">this</span>.cacheName,k.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CacheException &#123;<br>        System.out.println(<span class="hljs-string">&quot;=============clear==============&quot;</span>);<br>        getRedisTemplate().delete(<span class="hljs-built_in">this</span>.cacheName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getRedisTemplate().opsForHash().size(<span class="hljs-built_in">this</span>.cacheName).intValue();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Set&lt;k&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getRedisTemplate().opsForHash().keys(<span class="hljs-built_in">this</span>.cacheName);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;v&gt; <span class="hljs-title function_">values</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getRedisTemplate().opsForHash().values(<span class="hljs-built_in">this</span>.cacheName);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> RedisTemplate <span class="hljs-title function_">getRedisTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> (RedisTemplate) ApplicationContextUtil.getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.config.redis;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCacheManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CacheManager</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;K, V&gt; Cache&lt;K, V&gt; <span class="hljs-title function_">getCache</span><span class="hljs-params">(String cacheName)</span> <span class="hljs-keyword">throws</span> CacheException &#123;<br>        System.out.println(cacheName);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCache</span>&lt;K, V&gt;(cacheName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>开启缓存管理器的地方改成RedisCacheManager</strong></p><p><strong>simpleByteSource实现没有实现序列化，如果使用到了盐值，需要自定义盐值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.shiro.salt;<br><br><span class="hljs-comment">//自定义salt实现 实现序列化接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyByteSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ByteSource</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">byte</span>[] bytes;<br>    <span class="hljs-keyword">private</span> String cachedHex;<br>    <span class="hljs-keyword">private</span> String cachedBase64;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyByteSource</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bytes = bytes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyByteSource</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chars)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bytes = CodecSupport.toBytes(chars);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyByteSource</span><span class="hljs-params">(String string)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bytes = CodecSupport.toBytes(string);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyByteSource</span><span class="hljs-params">(ByteSource source)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bytes = source.getBytes();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyByteSource</span><span class="hljs-params">(File file)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bytes = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyByteSource</span>.BytesHelper()).getBytes(file);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyByteSource</span><span class="hljs-params">(InputStream stream)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bytes = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyByteSource</span>.BytesHelper()).getBytes(stream);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCompatible</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> o <span class="hljs-keyword">instanceof</span> <span class="hljs-type">byte</span>[] || o <span class="hljs-keyword">instanceof</span> <span class="hljs-type">char</span>[] || o <span class="hljs-keyword">instanceof</span> String || o <span class="hljs-keyword">instanceof</span> ByteSource || o <span class="hljs-keyword">instanceof</span> File || o <span class="hljs-keyword">instanceof</span> InputStream;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getBytes() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.bytes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.bytes == <span class="hljs-literal">null</span> || <span class="hljs-built_in">this</span>.bytes.length == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toHex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cachedHex == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.cachedHex = Hex.encodeToString(<span class="hljs-built_in">this</span>.getBytes());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.cachedHex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toBase64</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cachedBase64 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.cachedBase64 = Base64.encodeToString(<span class="hljs-built_in">this</span>.getBytes());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.cachedBase64;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toBase64();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.bytes != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.bytes.length != <span class="hljs-number">0</span> ? Arrays.hashCode(<span class="hljs-built_in">this</span>.bytes) : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> ByteSource) &#123;<br>            <span class="hljs-type">ByteSource</span> <span class="hljs-variable">bs</span> <span class="hljs-operator">=</span> (ByteSource)o;<br>            <span class="hljs-keyword">return</span> Arrays.equals(<span class="hljs-built_in">this</span>.getBytes(), bs.getBytes());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BytesHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CodecSupport</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">BytesHelper</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getBytes(File file) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toBytes(file);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getBytes(InputStream stream) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.toBytes(stream);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>把自定义Realm中认证地方的simpleByteSource改成自定义的MyByteSource</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java并发编程（模式）</title>
    <link href="/2022/11/24/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <url>/2022/11/24/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="java并发编程（模式）"><a href="#java并发编程（模式）" class="headerlink" title="java并发编程（模式）"></a>java并发编程（模式）</h2><h3 id="保护性暂停"><a href="#保护性暂停" class="headerlink" title="保护性暂停"></a>保护性暂停</h3><blockquote><p> 用一个线程等待另一个线程的执行结果</p><p> 保护性暂停是<strong>同步的</strong></p></blockquote><p><img src="/img/bingfa_img/GuardedSuspension.png"></p><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.text4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuardedObject</span>();<br>        <span class="hljs-comment">// 线程1等待线程2的结果</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;等待结果&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String)guardedObject.get();<br>            log.debug(<span class="hljs-string">&quot;结果&quot;</span> + str);<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>                log.debug(<span class="hljs-string">&quot;产生结果&quot;</span>);<br>                guardedObject.complete(<span class="hljs-string">&quot;aaaaa&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object response;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 这里用while是为了解决虚假唤醒问题</span><br>                <span class="hljs-keyword">while</span> (response == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-comment">// 带超时时间</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">passedTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (response == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">waitTime</span> <span class="hljs-operator">=</span> timeout - passedTime;<br>                    <span class="hljs-keyword">if</span> (waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">this</span>.wait(waitTime);<br>                    passedTime = System.currentTimeMillis() - begin;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Object response)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-built_in">this</span>.response = response;<br>            <span class="hljs-built_in">this</span>.notifyAll();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>保护性暂停例子</strong></p><blockquote><p>邮递员送信，居民收信</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.text4&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">People</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br>            people.start();<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">500</span>);<br>        <span class="hljs-keyword">for</span> (Integer id : Mailboxes.getIds()) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Postman</span>(id, <span class="hljs-string">&quot;内容&quot;</span> + id).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.People&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 收信</span><br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">guardedObject</span> <span class="hljs-operator">=</span> Mailboxes.createGuardedObject();<br>        log.debug(<span class="hljs-string">&quot;开始收信：&#123;&#125;&quot;</span>, guardedObject.getId());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> guardedObject.get(<span class="hljs-number">5000</span>);<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;收到信：&#123;&#125;&quot;</span>, guardedObject.getId(), mail);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.Postman&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Postman</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String mail;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 送信</span><br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">go</span> <span class="hljs-operator">=</span> Mailboxes.getGuardedObject(<span class="hljs-built_in">this</span>.id);<br>        go.complete(mail);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Postman</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String mail)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.mail = mail;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mailboxes</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, GuardedObject&gt; boxes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">generateId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> GuardedObject <span class="hljs-title function_">createGuardedObject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">GuardedObject</span> <span class="hljs-variable">go</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuardedObject</span>(generateId());<br>        boxes.put(go.getId(), go);<br>        <span class="hljs-keyword">return</span> go;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Integer&gt; <span class="hljs-title function_">getIds</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> boxes.keySet();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GuardedObject <span class="hljs-title function_">getGuardedObject</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> boxes.remove(id);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GuardedObject</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">private</span> Object response;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GuardedObject</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GuardedObject</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 这里用while是为了解决虚假唤醒问题</span><br>                <span class="hljs-keyword">while</span> (response == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-comment">// 带超时时间</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">passedTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (response == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">waitTime</span> <span class="hljs-operator">=</span> timeout - passedTime;<br>                    <span class="hljs-keyword">if</span> (waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">this</span>.wait(waitTime);<br>                    passedTime = System.currentTimeMillis() - begin;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Object response)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-built_in">this</span>.response = response;<br>            <span class="hljs-built_in">this</span>.notifyAll();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产者-x2F-消费者"><a href="#生产者-x2F-消费者" class="headerlink" title="生产者&#x2F;消费者"></a>生产者&#x2F;消费者</h3><blockquote><p>通过消息队列实现</p><p>是<strong>异步的</strong></p></blockquote><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 消息队列</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;Message&gt; list;<br>    <span class="hljs-comment">// 容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capcity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MessageQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capcity)</span> &#123;<br>        list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.capcity = capcity;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取消息</span><br>    <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-comment">// 检查队列是否为空</span><br>            <span class="hljs-keyword">while</span> (list.isEmpty()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 返回并删除队列第一个元素</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> list.removeFirst();<br>            <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">// 通知生产者</span><br>            log.debug(<span class="hljs-string">&quot;已消费&quot;</span> + msg);<br>            <span class="hljs-keyword">return</span> msg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 放入消息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Message msg)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">while</span> (list.size() == capcity) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;队列已满&quot;</span>);<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            list.addLast(msg);<br>            log.debug(<span class="hljs-string">&quot;已生产&quot;</span> + msg);<br>            <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">// 通知消费者</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 消息</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> Object value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> id, Object value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h3><blockquote><p>必须按照顺序执行代码</p><p>同步的</p></blockquote><p>案例</p><blockquote><p>顺序交替打印</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">AwaitSignal</span> <span class="hljs-variable">as</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AwaitSignal</span>(<span class="hljs-number">5</span>);<br>        <span class="hljs-type">Condition</span> <span class="hljs-variable">aWaitSet</span> <span class="hljs-operator">=</span> as.newCondition();<br>        <span class="hljs-type">Condition</span> <span class="hljs-variable">bWaitSet</span> <span class="hljs-operator">=</span> as.newCondition();<br>        <span class="hljs-type">Condition</span> <span class="hljs-variable">cWaitSet</span> <span class="hljs-operator">=</span> as.newCondition();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            as.print(<span class="hljs-string">&quot;a&quot;</span>, aWaitSet, bWaitSet);<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            as.print(<span class="hljs-string">&quot;b&quot;</span>, bWaitSet, cWaitSet);<br>        &#125;).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            as.print(<span class="hljs-string">&quot;c&quot;</span>, cWaitSet, aWaitSet);<br>        &#125;).start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        as.start(aWaitSet);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.AwaitSignal&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AwaitSignal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ReentrantLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> loopNum;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AwaitSignal</span><span class="hljs-params">(<span class="hljs-type">int</span> loopNum)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loopNum = loopNum;<br>    &#125;<br><br>    <span class="hljs-comment">// 由主线程将第一个线程唤醒</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(Condition first)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;start&quot;</span>);<br>            first.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">this</span>.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str, Condition current, Condition next)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; loopNum; i++) &#123;<br>            <span class="hljs-built_in">this</span>.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                current.await();    <span class="hljs-comment">// 先都到阻塞队列</span><br>                log.debug(str);<br>                next.signal();  <span class="hljs-comment">// 叫醒下一个线程</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-built_in">this</span>.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="犹豫模式"><a href="#犹豫模式" class="headerlink" title="犹豫模式"></a>犹豫模式</h3><blockquote><p>在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做 了，直接结束返回</p></blockquote><p>实例1（只启动一个监控线程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MonitorService</span> &#123;<br>    <span class="hljs-comment">// 用来表示是否已经有线程已经在执行启动了</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> starting;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;尝试启动监控线程...&quot;</span>);<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (starting) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            starting = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 真正启动监控线程...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例2（单例模式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> INSTANCE;<br>        &#125;<br>        INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>java中，包装类Boolean，Byte，Short，Integer，Long，Character等使用到了享元模式。调用valueOf方法时，如果值在其缓存的数组内，则直接从缓存中读取</p><p>Long的valueOf方法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">long</span> l)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">if</span> (l &gt;= -<span class="hljs-number">128</span> &amp;&amp; l &lt;= <span class="hljs-number">127</span>) &#123; <span class="hljs-comment">// will cache</span><br>        <span class="hljs-keyword">return</span> LongCache.cache[(<span class="hljs-type">int</span>)l + offset];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(l);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>各个包装类的缓存范围</p><ul><li>Byte, Short, Long 缓存的范围都是 -128~127</li><li>Character 缓存的范围是 0~127 </li><li>Integer的默认范围是 -128~127 <ul><li>最小值不能变 </li><li>但最大值可以通过调整虚拟机参数 <code>  -Djava.lang.Integer.IntegerCache.high</code> 来改变</li></ul></li><li>Boolean 缓存了 TRUE 和 FALSE</li></ul></blockquote><p><strong>线程池小demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test20</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Pool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pool</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> pool.borrow();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">1000</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                pool.free(conn);<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.Pool&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pool</span> &#123;<br>    <span class="hljs-comment">// 连接池大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> poolSize;<br><br>    <span class="hljs-comment">// 连接对象的数组</span><br>    <span class="hljs-keyword">private</span> Connection[] connections;<br><br>    <span class="hljs-comment">// 连接状态的数组 0 表示空闲，1 表示繁忙</span><br>    <span class="hljs-keyword">private</span> AtomicIntegerArray states;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pool</span><span class="hljs-params">(<span class="hljs-type">int</span> poolSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.poolSize = poolSize;<br>        <span class="hljs-built_in">this</span>.connections = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Connection</span>[poolSize];<br>        <span class="hljs-built_in">this</span>.states = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicIntegerArray</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[poolSize]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; poolSize; i++) &#123;<br>            connections[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockConnection</span>(<span class="hljs-string">&quot;连接&quot;</span> + i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取连接</span><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">borrow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; poolSize; i++) &#123;<br>                <span class="hljs-keyword">if</span> (states.get(i) == <span class="hljs-number">0</span>) &#123;<br>                    states.compareAndSet(i, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>                    log.debug(<span class="hljs-string">&quot;获取连接&#123;&#125;&quot;</span>, connections[i].toString());<br>                    <span class="hljs-keyword">return</span> connections[i];<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 没有空闲连接，线程进入等待状态，防止cpu空转</span><br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;等待获取连接&quot;</span>);<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 归还连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(Connection connection)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; poolSize; i++) &#123;<br>            <span class="hljs-keyword">if</span> (connections[i] == connection) &#123;<br>                states.set(i, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                    log.debug(<span class="hljs-string">&quot;归还连接&#123;&#125;&quot;</span>, connections[i].toString());<br>                    <span class="hljs-built_in">this</span>.notifyAll();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分工模式"><a href="#分工模式" class="headerlink" title="分工模式"></a>分工模式</h3><p>让有限的工作线程（Worker Thread）来轮流异步处理无限多的任务，它的典型实现 就是线程池，也体现了经典设计模式中的享元模式。</p><p><strong>饥饿问题</strong></p><p>如果一个线程池的线程什么都做，有可能会产生饥饿。</p><p>如一个线程调用线程池中的其他线程来完成任务，如果所有线程都处于调用其他线程的状态，而没有执行任务的线程，就会发生饥饿</p><p><strong>解决饥饿方式</strong></p><p>不同的任务类型，采用不同的线程池</p><p><strong>创建多少线程池合适</strong></p><p>线程不是越多越好，太多线程会占用大量内存，线程的上下文切换也会消耗资源</p><p>任务分为运算密集型和I&#x2F;O密集型，当运算密集型任务多的时候，应线程数较少；而I&#x2F;O密集型任务多时，应多创建线程</p><p>经验公式：<code>线程数 = 核数 * 期望 CPU 利用率 * 总时间(CPU计算时间+等待时间) / CPU 计算时间</code></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git工作流</title>
    <link href="/2022/11/24/git/git%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <url>/2022/11/24/git/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="git工作流"><a href="#git工作流" class="headerlink" title="git工作流"></a>git工作流</h2><h3 id="通常"><a href="#通常" class="headerlink" title="通常"></a>通常</h3><ol><li><p>先将远程仓库的项目拉到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git clone &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure></li><li><p>在本地<strong>新建一个自己的分支</strong></p><blockquote><p>建议在自己的branch上修改代码，而不是直接在主分支上修改</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout -b &lt;分支名&gt;<br>// -b 新建并且切换到新分支<br></code></pre></td></tr></table></figure></li><li><p>在自己分支上<strong>修改代码</strong></p></li><li><p>在写完代码，还没有保存到git本地仓库时，可以通过<code>git diff</code>查看修改后的代码和修改前的代码的不同</p><blockquote><p>建议先看一下修改了哪些内容再继续</p></blockquote></li><li><p>将修改的代码<strong>保存到暂存区</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git status// 查看还没有保存到暂存区的文件<br>git add &lt;文件名/*&gt;// 将文件添加到暂存区，*表示所有<br></code></pre></td></tr></table></figure></li><li><p>将暂存区的代码<strong>提交到git本地仓库中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git commit -m &quot;&lt;备注信息&gt;&quot;<br></code></pre></td></tr></table></figure></li><li><p>将自己<strong>本地的分支提交到远程仓库</strong>，远程仓库会多出一个新分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin &lt;提交的远程仓库的分支名&gt;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="当远程仓库的主分支代码有改动时"><a href="#当远程仓库的主分支代码有改动时" class="headerlink" title="当远程仓库的主分支代码有改动时"></a>当远程仓库的主分支代码有改动时</h3><blockquote><p>如果在合并自己的分支和远程仓库主分支时，远程仓库主分支的代码在之前clone下来的基础上有改动，需要同步远程仓库的代码到本地的分支里，看看会不会冲突</p></blockquote><ol start="8"><li><p>先将本地git的分支切换回主分支，再<strong>将远程仓库的代码拉到本地</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout main<br>git pull origin main<br></code></pre></td></tr></table></figure></li><li><p>切换到分支上，将分支上的代码和最新的代码<strong>尝试进行合并</strong></p><blockquote><p>可能会出现冲突，需要手动选择要保存的代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git rebase main// 意思是在最新的main的基础上，将我的修改添加到main中<br></code></pre></td></tr></table></figure></li><li><p>解决完冲突后，将本地的分支推到远程仓库的分支上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git push -f origin &lt;分支名&gt;<br>// -f force强行<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="远程仓库上将分支和主分支合并"><a href="#远程仓库上将分支和主分支合并" class="headerlink" title="远程仓库上将分支和主分支合并"></a>远程仓库上将分支和主分支合并</h3><ol start="11"><li><p>远程仓库主人通过pull request的squash and merge 将所有的commit合并成一个commit ，再合并到主分支上</p><p><img src="/img/git_img/pullRequest.png"></p></li><li><p>合并完，通常会删除本地分支和远程分支，再把最新的主分支拉到本地主分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -D &lt;分支名&gt;// 删除本地分支<br>git pull origin main// 把最新的主分支拉到本地主分支<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">删除远程分支：点击view all branchs，点击垃圾桶标识就可删除了<br></code></pre></td></tr></table></figure><p><img src="/img/git_img/viewBranchs.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java并发编程</title>
    <link href="/2022/11/15/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/11/15/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="java并发编程"><a href="#java并发编程" class="headerlink" title="java并发编程"></a>java并发编程</h2><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1.进程和线程"></a>1.进程和线程</h3><p><strong>进程</strong>可以视为程序的一个实例，程序可以启动一个或多个实例进程，进程就是用来加载指令、管理内存、管理 IO 的。</p><p><strong>线程</strong>是属于进程的，一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</p><p><strong>比较</strong></p><ul><li>进程：资源分配的最小单位，线程：调度的最小单位</li><li>进程基本相互独立，线程存在于进程内，是进程的一个子集</li><li>进程间通信较为复杂（统一计算机间、不同计算机间），线程通信相对简单</li><li>线程上下文切换成本比进程低</li></ul><h3 id="2-并发和并行"><a href="#2-并发和并行" class="headerlink" title="2.并发和并行"></a>2.并发和并行</h3><p><strong>举例</strong></p><p>并发：单个CPU同一时间执行多条指令(交替)</p><p>并行：多个CPU同一时间同时执行指令</p><p>并行和并发是同时存在的</p><h3 id="3-同步和异步"><a href="#3-同步和异步" class="headerlink" title="3.同步和异步"></a>3.同步和异步</h3><p>同步：等待运行完返回结果才继续执行之后的代码</p><p>异步：不等，继续执行之后的代码</p><h3 id="4-Java线程基础"><a href="#4-Java线程基础" class="headerlink" title="4.Java线程基础"></a>4.Java线程基础</h3><h4 id="创建线程方式"><a href="#创建线程方式" class="headerlink" title="创建线程方式"></a>创建线程方式</h4><p><strong>(1)</strong> 直接new Thread()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 创建线程对象</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>        <span class="hljs-comment">// run 方法内实现要执行的任务</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;running&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">// 给线程起名</span><br>    t.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>    <span class="hljs-comment">// 启动线程</span><br>    t.start();<br><br>    <span class="hljs-comment">// 主线程执行的任务</span><br>    log.debug(<span class="hljs-string">&quot;running&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 控制台</span><br><span class="hljs-comment">// 21:19:20 [main] c.Test - running</span><br><span class="hljs-comment">// 21:19:20 [t1] c.Test - running</span><br></code></pre></td></tr></table></figure><p>**(2)**Runnable 配合Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;running&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;t2&quot;</span>);<br>    t.start();<br><br>    log.debug(<span class="hljs-string">&quot;running&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 控制台</span><br><span class="hljs-comment">// 21:30:56 [main] c.Test - running</span><br><span class="hljs-comment">// 21:30:56 [t2] c.Test - running</span><br></code></pre></td></tr></table></figure><ul><li>用 Runnable 更容易与线程池等高级 API 配合 </li><li>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</li></ul><p>**(3)**FutureTask配合Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 实现Callable接口</span><br>    FutureTask&lt;Integer&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;Integer&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;() &#123;<br>        <span class="hljs-comment">// Runnable的run没有返回值，而Callable的call可以有返回值</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            log.debug(<span class="hljs-string">&quot;running&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task, <span class="hljs-string">&quot;t3&quot;</span>);<br>    t3.start();<br><br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, task.get());<br>&#125;<br><span class="hljs-comment">// 控制台</span><br><span class="hljs-comment">// 21:47:12 [t3] c.Test - running</span><br><span class="hljs-comment">// 21:47:13 [main] c.Test - 100 </span><br></code></pre></td></tr></table></figure><p>FutureTask 能够接收 Callable 类型的参数，用来处理<strong>有返回结果</strong>的情况</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="5-查看进程方式"><a href="#5-查看进程方式" class="headerlink" title="5.查看进程方式"></a>5.查看进程方式</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a><strong>windows</strong></h4><ul><li>任务管理器</li><li><code>tasklist</code> 查看所有进程， 可以<code>tasklist | findstr &lt;关键字&gt;</code>来筛选进程</li><li><code>taskkill</code>杀死进程， 参数：<code>/F /PID &lt;pid&gt;</code> 强制杀死指定pid的进程</li></ul><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a><strong>linux</strong></h4><ul><li><code>ps -ef</code> 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code>查看进程号为PID的所有线程</li><li><code>kill</code>杀死进程</li><li><code>top</code> 动态显示进程，按H切换是否显示进程</li><li><code>top -H -p &lt;PID&gt;</code> 查看进程号为PID的所有线程</li></ul><h4 id="java（jdk自带的"><a href="#java（jdk自带的" class="headerlink" title="java（jdk自带的)"></a><strong>java（jdk自带的)</strong></h4><ul><li><p><code>jps</code>(java process status) 查看所有java进程</p></li><li><p><code>jstack &lt;PID&gt;</code> 查看某一时刻该进程的所有线程状态</p></li><li><p><code>jconsole</code> 来查看某个 Java 进程中线程的运行情况（图形界面）</p><p><img src="/img/bingfa_img/jconsole%E7%95%8C%E9%9D%A2.png"></p></li></ul><h3 id="6-线程运行"><a href="#6-线程运行" class="headerlink" title="6.线程运行"></a>6.线程运行</h3><h4 id="栈和栈帧"><a href="#栈和栈帧" class="headerlink" title="栈和栈帧"></a><strong>栈和栈帧</strong></h4><ul><li>JVM中由堆、<strong>栈</strong>和方法区组成。每个线程启动后，虚拟机就会为其分配一块<strong>栈内存</strong></li><li>线程栈是相互独立的，每个线程栈由多个<strong>栈帧</strong>（Frame）组成，对应每次方法调用时占用的内存（局部变量表、返回地址等）</li><li>每个线程只能有一个<strong>活动栈帧</strong>，对应当前正在执行的那个方法</li></ul><h4 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a><strong>上下文切换</strong></h4><p>导致CPU切换线程的原因</p><ul><li>线程的cpu时间片用完</li><li>垃圾回收时会停止所有线程，转而运行垃圾回收的线程</li><li>来了优先级更高的线程</li><li>当前线程自己休眠了等</li></ul><p>切换时需要保存当前线程的状态（局部变量、操作数栈、返回地址等）</p><p><strong>频繁切换会影响性能</strong></p><h4 id="线程常见方法"><a href="#线程常见方法" class="headerlink" title="线程常见方法"></a>线程常见方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public void start()</td><td>启动一个新线程，Java虚拟机调用此线程的 run 方法</td></tr><tr><td>public void run()</td><td>线程启动后调用该方法</td></tr><tr><td>public void setName(String name)</td><td>给当前线程取名字</td></tr><tr><td>public void getName()</td><td>获取当前线程的名字 线程存在默认名称：子线程是 Thread-索引，主线程是 main</td></tr><tr><td>public static Thread currentThread()</td><td>获取当前线程对象，代码在哪个线程中执行</td></tr><tr><td>public static void sleep(long time)</td><td>让当前线程休眠多少毫秒再继续执行 <strong>Thread.sleep(0)</strong> : 让操作系统立刻重新进行一次 CPU 竞争</td></tr><tr><td>public static native void yield()</td><td>提示线程调度器让出当前线程对 CPU 的使用</td></tr><tr><td>public final int getPriority()</td><td>返回此线程的优先级</td></tr><tr><td>public final void setPriority(int priority)</td><td>更改此线程的优先级，常用 1 5 10</td></tr><tr><td>public void interrupt()</td><td>中断这个线程，异常处理机制</td></tr><tr><td>public static boolean interrupted()</td><td>判断当前线程是否被打断，清除打断标记</td></tr><tr><td>public boolean isInterrupted()</td><td>判断当前线程是否被打断，不清除打断标记</td></tr><tr><td>public final void join()</td><td>等待这个线程结束</td></tr><tr><td>public final void join(long millis)</td><td>等待这个线程死亡 millis 毫秒，0 意味着永远等待</td></tr><tr><td>public final native boolean isAlive()</td><td>线程是否存活（还没有运行完毕）</td></tr><tr><td>public final void setDaemon(boolean on)</td><td>将此线程标记为守护线程或用户线程</td></tr></tbody></table><h5 id="run-start"><a href="#run-start" class="headerlink" title="run start"></a><strong>run start</strong></h5><ul><li>直接调用run方法相当于在当前线程中进行了普通的方法调用，</li><li>使用start方法则为启动新的线程，通过新的线程执行run中的代码</li></ul><h5 id="sleep-yield"><a href="#sleep-yield" class="headerlink" title="sleep yield"></a><strong>sleep yield</strong></h5><p>sleep</p><blockquote><p> 调用 sleep 会让当前线程<strong>从 Running 进入 Timed Waiting 状态</strong>（阻塞）</p><p>当睡眠时间结束后状态为Runnable</p><p>可以使用TimeUnit的sleep来使线程睡眠（可以更好的看出时间单位）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;t1&quot;</span>) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;;<br><br>    t1.start();<br>    <span class="hljs-comment">// t1状态为RUNNABLE</span><br>    log.debug(<span class="hljs-string">&quot;t1 state: &#123;&#125;&quot;</span>, t1.getState());<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">// t1线程调用sleep方法，状态从RUNNING -&gt; Waiting</span><br>    log.debug(<span class="hljs-string">&quot;t1 state: &#123;&#125;&quot;</span>, t1.getState());<br>&#125;<br></code></pre></td></tr></table></figure><p>yields</p><blockquote><p>会让当前线程<strong>从 Running 进入 Runnable</strong> 就绪状态</p></blockquote><p><strong>线程优先级</strong></p><blockquote><p>通过<strong>setPriority</strong>设置线程优先级，但只是给调度器的参考</p><p>最终如何分配时间片还是由调度器决定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            System.out.println(<span class="hljs-string">&quot;----&gt;1 &quot;</span> + count++);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// Thread.yield();</span><br>            System.out.println(<span class="hljs-string">&quot;       ----&gt;2 &quot;</span> + count++);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task1, <span class="hljs-string">&quot;t1&quot;</span>);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task2, <span class="hljs-string">&quot;t2&quot;</span>);<br>    t1.setPriority(Thread.MIN_PRIORITY);<br>    t2.setPriority(Thread.MAX_PRIORITY);<br>    t1.start();<br>    t2.start();<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="join"><a href="#join" class="headerlink" title="join"></a><strong>join</strong></h5><blockquote><p>join()等待这个线程结束</p><p>join(long n) 最多等待n秒</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    log.debug(<span class="hljs-string">&quot;开始&quot;</span>);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;开始&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        r = <span class="hljs-number">10</span>;<br>        log.debug(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    t1.join();  <span class="hljs-comment">// 等待t1结束后继续执行后面的代码</span><br>    <span class="hljs-comment">// t1.join(1000); r: 0</span><br>    log.debug(<span class="hljs-string">&quot;r: &#123;&#125;&quot;</span>, r);  <span class="hljs-comment">// r: 10</span><br>    log.debug(<span class="hljs-string">&quot;结束&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a><strong>interrupt</strong></h5><blockquote><p>打断正在运行的线程</p><ul><li><p>打断只是通知要被打断的线程，将isInterrupted置为true</p><p>是否结束线程由被打断线程自己判断（两阶段终止模式）</p></li><li><p>stop方法强制终止线程（不推荐）</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打断睡眠中的线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;sleep..&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">50000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.debug(<span class="hljs-string">&quot;被打断&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    log.debug(<span class="hljs-string">&quot;interrupt&quot;</span>);<br>    t1.interrupt();<br>    <span class="hljs-comment">// 打断正常运行的线程，打断标记为true，</span><br>    <span class="hljs-comment">// 打断正在睡眠的线程，打断标记为false</span><br>    log.debug(<span class="hljs-string">&quot;打断标记：&#123;&#125;&quot;</span>, t1.isInterrupted());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打断正常线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    t1.start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    log.debug(<span class="hljs-string">&quot;interrupt&quot;</span>);<br>    t1.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait notify"></a>wait notify</h5><blockquote><p><strong>wait</strong> 让当前线程进入<strong>WaitSet</strong>，变为<strong>WAITING</strong>状态</p><p>当Owner线程调用<strong>notify</strong>时会唤醒wait的线程中的一个，并让其进入阻塞队列来竞争锁</p><p><strong>notifyAll</strong>会唤醒wait的所有线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                log.debug(<span class="hljs-string">&quot;t1被唤醒&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    lock.wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                log.debug(<span class="hljs-string">&quot;t2被唤醒&quot;</span>);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br><br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            lock.notify();  <span class="hljs-comment">// 唤醒一个等待的线程</span><br>            <span class="hljs-comment">// lock.notifyAll();  // 唤醒所有等待的线程</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>sleep和wait区别：wait会让出锁，sleep是抱着锁睡觉</li><li>如果有多个wait的线程，可能唤醒的不是想要唤醒的线程（虚假唤醒）</li></ul><p>park unpark</p><blockquote><p>LockSupport.park() 暂停当前线程</p><p>LockSupport.unpark(线程对象) 恢复当前线程</p></blockquote><blockquote><p>和wait notify区别：</p><ol><li>wait notify需要获得锁对象，park unpark 不需要</li><li>park unpark是以线程为单位来阻塞和唤醒线程，比wait notify精确</li><li>park unpark 可以先 unpark，而 wait &amp; notify 不能先 notify</li></ol></blockquote><blockquote><p>park unpark 原理：</p><p>每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex </p><p>调用park() 就是检查_counter是否为0，为0则进入wait状态；为1则置为0，下次再park时则进入wait状态</p><p>调用park()就是置_counter为1</p><ul><li><p>当线程处于wait状态时，调用unpark，_counter置为1，可以唤醒线程，线程继续执行需要消耗一个_counter</p></li><li><p>当线程处于运行状态时，调用unpark，_counter置为1，线程继续运行</p></li></ul></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            log.debug(<span class="hljs-string">&quot;park&quot;</span>);<br>            LockSupport.park(); <span class="hljs-comment">// WAIT</span><br>            log.debug(<span class="hljs-string">&quot;resume...&quot;</span>);<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>        t1.start();<br><br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        log.debug(<span class="hljs-string">&quot;unpark...&quot;</span>);<br>        LockSupport.unpark(t1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="主线程和守护线程"><a href="#主线程和守护线程" class="headerlink" title="主线程和守护线程"></a>主线程和守护线程</h4><ul><li>默认情况Java进程需要等所有线程都运行结束，进程才会结束</li><li>而不需要等待守护线程，技术守护线程没有执行完，也会强制结束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (Thread.currentThread().isInterrupted())<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;t1结束&quot;</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    t1.setDaemon(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 设置进程为守护进程</span><br>    t1.start();<br><br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    log.debug(<span class="hljs-string">&quot;main结束&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p><img src="/img/bingfa_img/6%E7%A7%8D%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png"></p><ol><li>调用**start()**，NEW –&gt; RUNNABLE</li><li>获取到对象锁obj后<ul><li>调用**obj.wait()**，RUNNABLE –&gt; WAITING</li><li>其他线程调用**obj.notify()&#x2F;notifyAll()&#x2F;interrupt()**，线程从WAITTING中被唤醒到BLOCKED<ul><li>竞争锁成功，WATTING –&gt; RUNNABLE</li><li>竞争锁失败，WAITTING –&gt; BLOCKED</li></ul></li></ul></li><li>当前线程调用**t.join()**（当前线程在t线程的管程上等待），从RUNNABLE –&gt; WAITTING<ul><li>t线程运行结束或调用当前线程的interrupt()，当前线程从WAITTING –&gt; RUNNABLE</li></ul></li><li>调用<strong>LockSupport.park()</strong>,RUNNABLE –&gt; WAITTING<ul><li>调用**LockSupport.unpark(目标线程)**，目标线程WAITTING –&gt; RUNNABLE</li></ul></li><li>获取到对象锁obj后<ul><li>调用**obj.wait(long n)**，RUNNABLE –&gt; TIME_WAITING</li><li>等待时间超过n毫秒，或其他线程调用<strong>obj.notify()&#x2F;notifyAll()&#x2F;interrupt()</strong><ul><li>竞争锁成功，TIME_WAITING–&gt; RUNNABLE</li><li>竞争锁失败，TIME_WAITING–&gt; BLOCKED</li></ul></li></ul></li><li>当前线程调用**t.join(long n)**（当前线程在t线程的管程上等待），从RUNNABLE –&gt; TIME_WAITING<ul><li>等待时间超过n毫秒，或t线程运行结束或调用当前线程的interrupt()，当前线程从TIME_WAITING–&gt; RUNNABLE</li></ul></li><li>当前线程调用 <strong>Thread.sleep(long n)</strong> ，当前线程从 RUNNABLE –&gt; TIMED_WAITING<ul><li>等待时间超过n毫秒，当前线程从TIME_WAITING–&gt; RUNNABLE</li></ul></li><li>调用<strong>LockSupport.parkNanos(long nanos)</strong>,RUNNABLE –&gt; TIME_WAITING<ul><li>等待时间超过nanos纳秒，或调用**LockSupport.unpark(目标线程)**，目标线程TIME_WAITING–&gt; RUNNABLE</li></ul></li><li>竞争锁成功，BLOCKED –&gt; RUNNABLE；失败仍然BLOCKED</li><li>代码运行完毕，RUNNABLE –&gt; TERMINATED</li></ol><h2 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h2><h3 id="共享带来的问题"><a href="#共享带来的问题" class="headerlink" title="共享带来的问题"></a>共享带来的问题</h3><p>例如java中对静态变量的自增、自减不是原子操作，在字节码上被分为了四步</p><p>获取变量值、准备常数、相加、写回</p><p>当要<strong>写</strong>回的时候若时间片用完，则可能造成数据的错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            counter++;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            counter--;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>    t1.start();<br>    t2.start();<br>    t1.join();<br>    t2.join();<br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, counter);<span class="hljs-comment">//counter因为共享问题而可能不为0</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为<strong>临界区</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <br><span class="hljs-comment">// 临界区</span><br>&#123; <br> counter++;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <br><span class="hljs-comment">// 临界区</span><br>&#123; <br> counter--;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h4><p>多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了<strong>竞态条件</strong></p><p> 即基于一种可能的实效的观察结果来做出判断或执行某个计算（先检查后执行）</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>阻塞式解决方案：synchronized、Lock</p><p>非阻塞式解决方案：原子变量</p><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p>即<strong>对象锁</strong>，采用<strong>互斥</strong>的方式，让同一时刻只有一个线程持有锁，其他对象则为<strong>阻塞状态</strong>，</p><p>这样就能保证拥有锁 的线程可以安全的执行临界区内的代码，不用担心线程上下文切换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                counter++;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>                counter--;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>    t1.start();<br>    t2.start();<br>    t1.join();<br>    t2.join();<br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, counter);<span class="hljs-comment">//counter值为0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized用对象锁保证了临界区内的<strong>原子性</strong></p><p><strong>面向对象改进</strong></p><p>把要保护的共享变量封装到一个类中，类的操作是原子性的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            counter++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            counter--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCounter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">return</span> counter;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>();<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            room.increment();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            room.decrement();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br><br>    t1.start();<br>    t2.start();<br>    t1.join();<br>    t2.join();<br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, room.getCounter());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法上使用synchronized</strong></p><p>在成员方法上使用synchronized相当于锁住了<strong>this</strong>（实例化后的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        counter++;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>    counter++;<br>&#125;<br></code></pre></td></tr></table></figure><p>在静态方法上使用synchronized相当于锁住了<strong>类对象</strong>（内存中独一份）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>     &#125;<br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">synchronized</span>(Test.class) &#123;<br><br>         &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><blockquote><p>在后面</p></blockquote><h3 id="变量的线程安全"><a href="#变量的线程安全" class="headerlink" title="变量的线程安全"></a>变量的线程安全</h3><p>成员变量和静态变量</p><ul><li>没有共享，线程安全</li><li>有被共享，只读，线程安全</li><li>有被共享，读写，线程不安全</li></ul><p>局部变量</p><ul><li>局部变量引用的是<strong>常量</strong>，是线程安全</li><li>但局部变量引用的是<strong>对象</strong>，若逃离方法的作用范围，则线程不安全，可以使用private或final关键字使局部变量线程安全</li></ul><h3 id="常见线程安全的类"><a href="#常见线程安全的类" class="headerlink" title="常见线程安全的类"></a>常见线程安全的类</h3><p>多个线程调用它们同一个实例的某个方法时，是线程安全的</p><ul><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>Hashtable</li><li>java.util.concurrent包吓得类</li></ul><h3 id="线程安全例子"><a href="#线程安全例子" class="headerlink" title="线程安全例子"></a>线程安全例子</h3><p>转账</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">1000</span>);<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">1000</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                a.transfer(b, randomAmount());<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                b.transfer(a, randomAmount());<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>        t1.join();<br>        t2.join();<br>        <span class="hljs-comment">// 查看转账2000次后的总金额</span><br>        log.debug(<span class="hljs-string">&quot;total:&#123;&#125;&quot;</span>, (a.getMoney() + b.getMoney()));<br>    &#125;<br><br>    <span class="hljs-comment">// Random 为线程安全</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">// 随机 1~100</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">randomAmount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> random.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> money;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">// 这个方法存在线程安全问题</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">transfer</span><span class="hljs-params">(Account target, <span class="hljs-type">int</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt; amount) &#123;<br>            <span class="hljs-built_in">this</span>.setMoney(<span class="hljs-built_in">this</span>.getMoney() - amount);<br>            target.setMoney(target.getMoney() + amount);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不能通过锁this来解决，因为有两个不同的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(Account target, <span class="hljs-type">int</span> amount)</span> &#123;<br>    <span class="hljs-comment">// 通过锁类对象来实现线程安全</span><br>    <span class="hljs-keyword">synchronized</span> (Account.class) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt; amount) &#123;<br>            <span class="hljs-built_in">this</span>.setMoney(<span class="hljs-built_in">this</span>.getMoney() - amount);<br>            target.setMoney(target.getMoney() + amount);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="java对象头"><a href="#java对象头" class="headerlink" title="java对象头"></a>java对象头</h4><p>对象在内存中可以分为三部分：<strong>对象头、实例数据、对齐填充</strong></p><ul><li><p>对象头：如hash码,对象所属的年代，对象锁，锁状态标志，偏向锁（线程）ID，偏向时间等,32位机器里Java对象头一般占有2个机器码</p></li><li><p>实例数据：存放类的属性数据信息，包括父类的属性对象</p></li><li><p>对齐填充：使字节对齐，非必须</p></li></ul><p><img src="/img/bingfa_img/java%E5%A4%B4%E5%AF%B9%E8%B1%A11.png"></p><p><img src="/img/bingfa_img/java%E5%A4%B4%E5%AF%B9%E8%B1%A12.png"></p><h4 id="Monitor（重量级锁）原理"><a href="#Monitor（重量级锁）原理" class="headerlink" title="Monitor（重量级锁）原理"></a>Monitor（重量级锁）原理</h4><blockquote><p>锁的类型有：无锁、偏向锁、轻量级锁、重量级锁</p></blockquote><p>如果使用synchronized给对象上锁（<strong>重量级</strong>）后，该对象头的<strong>Mark word</strong>中就被设置指向<strong>Monitor对象</strong>的指针。（原来Mark Word中的信息被放到了Monitor对象中）</p><p><img src="/img/bingfa_img/Monitor%E5%8E%9F%E7%90%86.png"></p><ul><li>Monitor只能有一个Owner</li><li>在对象被上锁后，其他线程执行synchronized(obj)就会进入阻塞队列</li><li>当Owner执行完代码块的内容后，会唤醒在阻塞队列中的线程，竞争线程时非公平的，由调度器决定</li><li>synchronized 必须是进入同一个对象的 monitor 才有上述的效果</li><li>不加 synchronized 的对象不会关联监视器，不遵从以上规则</li></ul><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><blockquote><p>轻量级锁只是告诉其他线程有线程在用这个资源。</p><p>如果线程在加轻量级锁的过程中发现已经被上了轻量级锁，则会从轻量级锁转化为重量级锁</p></blockquote><p>使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以 使用轻量级锁来优化</p><p>加轻量级锁对使用者是透明的，语法和加重量级锁一样</p><p>内部实现过程：</p><ul><li><p>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word</p><p><img src="/img/bingfa_img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%811.png"></p></li><li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas <strong>替换 Object 的 Mark Word，将 Mark Word 的值存 入锁记录</strong></p><p><img src="/img/bingfa_img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%812.png"></p></li><li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p><p><img src="/img/bingfa_img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%813.png"></p></li><li><p>如果 cas 失败，有两种情况</p><ul><li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程 </li><li>如果是自己执行了 synchronized <strong>锁重入</strong>，那么再添加一条 Lock Record 作为重入的计数</li></ul><p><img src="/img/bingfa_img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%814.png"></p></li><li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重 入计数减一</p><p><img src="/img/bingfa_img/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%815.png"></p></li><li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p><ul><li>成功，则解锁成功 </li><li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ul></li></ul><h5 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h5><blockquote><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p></blockquote><p>锁对象的Mark word会指向Monitor对象  </p><p>原本给其上锁的线程需要找到Monitor对象来释放锁</p><h5 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h5><p>相当于对象已经被上锁，后来的线程先不进入阻塞队列（进入阻塞队列是重型操作，耗时），而是重试几次对对象的上锁（自旋），如果这时锁被释放，则上锁成功（自旋成功）。否则则自旋失败，进入阻塞队列</p><p>注意：</p><ul><li>自旋会占用CPU时间，多核CPU自旋才能发挥优势</li><li>自旋是自适应的（成功的次数多则多自旋几次，反之则减少次数）</li></ul><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><blockquote><p>偏向属于某个线程</p></blockquote><p>轻量级锁的问题在于，在没有线程竞争时，每次重入都需要添加锁记录。</p><p>偏向锁则在第一次CAS时将<strong>线程 ID</strong> 设置到对象的 Mark Word 头，之后发现 这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p><ul><li>偏向锁默认开启，且默认有开启延迟，禁用延迟：<code>-XX:BiasedLockingStartupDelay=0</code></li><li>禁用偏向锁<code>-XX:-UseBiasedLocking </code></li></ul><p>可以用jol查看对象头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查看java头对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjdk.jol<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jol-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        log.debug(ClassLayout.parseInstance(dog).toPrintable());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/bingfa_img/jol.png"></p><p>注意;</p><ul><li>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</li><li>正常状态对象一开始是没有 hashCode 的，第一次调用才生成；如果<strong>调用 hashCode 会导致偏向锁被撤销</strong></li></ul><h5 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h5><p>重偏向是以类为单位</p><p>如果对象被多个线程访问，但没有竞争，偏向线程T1的对象仍有可能重新偏向到线程T2，重偏向会重置对象 的 Thread ID</p><p>当这个class类型的实例对象撤销达到<strong>20</strong>次后，会执行批量重偏向，所有这个类的实例都会指向新的线程</p><h5 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h5><p>当撤销偏向锁阈值<strong>超过</strong> <strong>40</strong> 次后，jvm认为在明显多线程竞争剧烈的场景下使用偏向锁是不合适的，整个类的<strong>所有对象</strong>都会变为不可偏向的</p><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>锁消除是发生在编译器级别的<strong>一种锁优化方式</strong></p><p>如果局部对象只在方法的作用域中有效（没有发生逃逸），不同线程调用时使用的都是不同的对象，使用锁就只会白白浪费资源</p><p>这时编译器将其优化，将锁消除</p><ul><li>关闭锁消除<code>java -XX:-EliminateLocks -jar benchmarks.jar</code></li></ul><h3 id="多把锁"><a href="#多把锁" class="headerlink" title="多把锁"></a>多把锁</h3><p>案例</p><blockquote><p>将锁细分，增加并发度</p><p>如果一个线程需要同时获取多把锁，容易发生死锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.Test6&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">BigRoom</span> <span class="hljs-variable">bigRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigRoom</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            bigRoom.study();<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            bigRoom.sleep();<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.BigRoom&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigRoom</span> &#123;<br><br>    <span class="hljs-comment">// 多把锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">studyRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">sleepRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (sleepRoom) &#123;<br>            log.debug(<span class="hljs-string">&quot;sleeping...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (studyRoom) &#123;<br>            log.debug(<span class="hljs-string">&quot;study...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="活跃性"><a href="#活跃性" class="headerlink" title="活跃性"></a>活跃性</h3><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><blockquote><p>两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种<strong>阻塞</strong></p><p>代表性问题：哲学家进餐</p></blockquote><h4 id="定位死锁"><a href="#定位死锁" class="headerlink" title="定位死锁"></a>定位死锁</h4><p><strong>方法1：</strong></p><ul><li><p>先使用jps查看进程</p></li><li><p>再使用jstack &lt;进程号&gt; 查看具体线程</p></li><li><p>如果有死锁，打印信息中会有<code>Found one Java-level deadlock:</code></p></li></ul><p><strong>方法2：</strong></p><ul><li>打开<code>jdk/bin</code>目录下的<code>jconsole.exe</code>工具</li><li>连接上进程</li><li>查看线程，点击检测死锁，就会把有死锁的线程展示出来</li></ul><h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><blockquote><p>活锁出现在两个线程互相改变对方的结束条件，最后谁也无法结束</p><p>和死锁的区别：出现死锁，线程都被阻塞住了；出现活锁：线程仍在运行，但始终结束不了</p></blockquote><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 期望减到 0 退出循环</span><br>            <span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">200</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                count--;<br>                log.debug(<span class="hljs-string">&quot;count: &#123;&#125;&quot;</span>, count);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 期望超过 20 退出循环</span><br>            <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">20</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">200</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                count++;<br>                log.debug(<span class="hljs-string">&quot;count: &#123;&#125;&quot;</span>, count);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h4><blockquote><p>由于优先级太低，始终得不到CPU调度执行，也无法结束</p></blockquote><h4 id="ReentrantLock-1"><a href="#ReentrantLock-1" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><blockquote><p>可重入锁</p><p>可重入：同一个线程首次获得线程后还没有释放，第二次申请锁不会被挡住</p><p>不可重入：第二次申请锁会把自己也挡在外面</p></blockquote><p>相较于synchorized，具备如下特点：</p><ul><li>可中断</li><li>可设置超时时间</li><li>可设置为公平锁</li><li>支持多个条件变量（多个阻塞队列，不同条件而阻塞的进不同的阻塞队列）</li></ul><p><strong>可打断</strong></p><blockquote><p>使用方法**lockInterruptibly()**方法加可打断的锁</p><p>lock()方法加的是不可打断的锁</p></blockquote><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 如果没有竞争那么此方法就会获得lock锁</span><br>                <span class="hljs-comment">// 否则就会进入阻塞队列</span><br>                lock.lockInterruptibly();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>                log.debug(<span class="hljs-string">&quot;被打断了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;获取到锁&quot;</span>);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>        lock.lock();<br>        t1.start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        t1.interrupt(); <span class="hljs-comment">// 打断</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>可设置超时时间</strong></p><blockquote><p>带超时时间的申请锁，解决死锁问题</p><p><strong>tryLock()、tryLock(long timeout, TimeUnit unit)</strong></p><p>只尝试获取一次锁，在timeout时间内都会尝试获取锁</p></blockquote><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;启动。。。&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!lock.tryLock(<span class="hljs-number">2</span>, TimeUnit.SECONDS)) &#123;<br>                log.debug(<span class="hljs-string">&quot;获取锁失败&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;获取到锁&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><br>    log.debug(<span class="hljs-string">&quot;获取到锁&quot;</span>);<br>    lock.lock();<br><br>    t1.start();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可设置为公平锁</strong></p><blockquote><p>不公平锁：获取锁的顺序和来的顺序无关</p><p>公平锁：先来先得</p><p>公平锁一般没有必要，会降低并发度</p></blockquote><p>公平锁默认关闭。开启公平锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><strong>支持多个条件变量</strong></p><blockquote><p>多个不同的阻塞队列</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建阻塞队列</span><br><span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-comment">// 进入阻塞队列等待</span><br>condition.await();<br><span class="hljs-comment">// 唤醒这个阻塞队列中等待的线程</span><br>condition.signal();<br><span class="hljs-comment">// 唤醒这个阻塞队列中所有的线程</span><br>condition.signalAll();<br></code></pre></td></tr></table></figure><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><blockquote><p>Java Memary Model（java内存模型）</p><p>定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、 CPU 指令优化等。</p></blockquote><p>JMM体现在以下几个方面：</p><ul><li>原子性：指令不会受到线程上下文切换的影响</li><li>可见性：指令不会受 cpu 缓存的影响</li><li>有序性：指令不会受 cpu 指令并行优化的影响</li></ul><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><blockquote><p>如果线程频繁从主存中获取某个值，就会形成缓存，减少对主存的访问，提高效率</p><p>但会出现内存中的值更新了，使得<strong>缓存中的值和内存中的不一致</strong></p><p>从而出现可见性问题</p></blockquote><p>示例</p><blockquote><p>t线程无法退出循环</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test9</span> &#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中，</span><br>            <span class="hljs-comment">// 减少对主存中 run 的访问，提高效率</span><br>            <span class="hljs-keyword">while</span> (run) &#123;<br>            &#125;<br>        &#125;);<br>        t.start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        log.debug(<span class="hljs-string">&quot;stop t&quot;</span>);<br>        run = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决方式：</p><ol><li><p>volatile关键字：表示变量是易变的，每次都从内存中读取（轻量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li><li><p>给代码块加锁（重量）</p><blockquote><p> synchronized规定，线程在加锁时， 先<strong>清空工作内存</strong>→在主内存中拷贝最新变量的副本到工作内存 →执行完代码→将更改后的共享变量的值刷新到主内存中→释放互斥锁。</p></blockquote></li></ol><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><blockquote><p>指令重排：JVM 会在不影响正确性的前提下，可以调整语句的执行顺序（流水线），在多线程下有可能会影响正确性</p></blockquote><p>通过volatile关键字，可以进制指令重排</p><p><strong>volatile原理：</strong></p><blockquote><p>读屏障：保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据</p><p>写屏障：保证在该屏障之前的，对共享变量的改动，都同步到主存当中</p></blockquote><ul><li><p>对 volatile 变量的写指令后会加入写屏障，之前的代码都会执行完再执行当前指令，不会被重排序到当前指令之后 （保证本线程内的有序性）</p></li><li><p>对 volatile 变量的读指令前会加入读屏障（保证可见性）</p></li></ul><h3 id="dcl问题"><a href="#dcl问题" class="headerlink" title="dcl问题"></a>dcl问题</h3><blockquote><p>double-checked locking 单例模式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123; &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// t2</span><br>            <span class="hljs-comment">// 首次访问会同步，而之后的使用没有 synchronized</span><br>            <span class="hljs-keyword">synchronized</span>(Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// t1</span><br>                    INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建对象的过程不是原子操作</strong>，</p><p>在单线程下没有问题，但多线程下可能会出现问题，</p><p>在创建对象的时候发生了重排序，JVM先将对象分配给了变量，再调用构造方法；其他线程判断<code>INSTANCE != null</code>从而使用了没有初始化完成的对象</p><p><strong>解决方式：</strong>给INSTANCE添加volatile关键字，使之不会被重排序</p><p><strong>单例模式</strong></p><p>饿汉&#x2F;懒汉实现单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 加final表示不能被继承，防止子类重写获取单例的方法不当导致new出多个对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// 静态成员对象实在类加载的时候创建的，不会有线程安全问题（懒汉式）</span><br>    <span class="hljs-comment">// private static final Singleton INSTANCE = new Singleton();</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// t2</span><br>            <span class="hljs-comment">// 首次访问会同步，而之后的使用没有 synchronized</span><br>            <span class="hljs-keyword">synchronized</span>(Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// t1</span><br>                    INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果实现了序列化接口</span><br>    <span class="hljs-comment">// 反序列化也会常见新对象，使用这个方法，这个方法的返回值就会被当成反序列化的结果</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">readResovle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>枚举实现单例</p><blockquote><p>INSTANCE相当于静态成员对象，属于懒汉式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    INSTANCE<br>&#125;<br></code></pre></td></tr></table></figure><p>静态内部类实现单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123; &#125;<br>    <br>    <span class="hljs-comment">// 静态内部类是懒汉式加载的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyHolder</span> &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LazyHolder.INSTANCE;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="乐观锁（无锁）"><a href="#乐观锁（无锁）" class="headerlink" title="乐观锁（无锁）"></a>乐观锁（无锁）</h2><p><strong>原子变量</strong></p><blockquote><p>如AtomicInteger（原子整数）</p></blockquote><p>案例，取款</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountSafe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Account1</span> &#123;<br>    <span class="hljs-keyword">private</span> AtomicInteger balance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AccountSafe</span><span class="hljs-params">(<span class="hljs-type">int</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(balance);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Integer <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance.get();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(Integer amount)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> balance.get();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> prev - amount;<br>            <span class="hljs-comment">// compareAndSet简称CAS</span><br>            <span class="hljs-comment">// 会不断尝试，如果prev和当前值不一样，则返回false</span><br>            <span class="hljs-comment">// 只有当prev和当前值一样时才会修改</span><br>            <span class="hljs-keyword">if</span> (balance.compareAndSet(prev, next)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CAS和volatile关系</strong></p><blockquote><p>获取共享变量时，为了保证该变量的可见性，需要使用 volatile 修饰。 </p><p>它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取 它的值，线程操作 volatile 变量都是直接操作主存。即一个线程对 volatile 变量的修改，对另一个线程可见。</p></blockquote><p>CAS 必须借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】的效果</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>无锁效率高于有锁</p><blockquote><ul><li><p>synchronized 会让线程在没有获得锁的时候，发生上下文切换，进入阻塞</p></li><li><p>上下文切换的代价比较高，在有多个核心的情况下，无锁没有切换的开销</p></li><li><p>无锁情况下，线程仍然在运行，需要额外 CPU 的支持，如果没有额外 CPU 的支持，没有分到时间片，还是会上下文切换</p></li></ul></blockquote><h3 id="CAS特点"><a href="#CAS特点" class="headerlink" title="CAS特点"></a>CAS特点</h3><ul><li><strong>适用于线程数少、多核 CPU 的场景下</strong></li><li>基于乐观锁，不怕别的线程来改</li><li>体现的是无锁并发、无阻塞并发</li><li>如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响</li></ul><h3 id="线程安全工具类"><a href="#线程安全工具类" class="headerlink" title="线程安全工具类"></a>线程安全工具类</h3><h4 id="原子整数"><a href="#原子整数" class="headerlink" title="原子整数"></a>原子整数</h4><blockquote><p>JUC并发包提供的：AtomicBoolean、 AtomicInteger、 AtomicLong</p></blockquote><p><strong>原子整数的api都是基于CAS(compareAndSet)完成的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    System.out.println(i.incrementAndGet());    <span class="hljs-comment">// ++i</span><br>    System.out.println(i.getAndIncrement());    <span class="hljs-comment">// i++</span><br><br>    System.out.println(i.getAndAdd(<span class="hljs-number">5</span>));<br>    System.out.println(i.addAndGet(<span class="hljs-number">5</span>));<br>    <br>    <span class="hljs-comment">// 接收一个接口类型，这里用lambda表达式</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        updateAndGet内部实现</span><br><span class="hljs-comment">         int prev, next;</span><br><span class="hljs-comment">         do &#123;</span><br><span class="hljs-comment">            prev = get();</span><br><span class="hljs-comment">            next = updateFunction.applyAsInt(prev);</span><br><span class="hljs-comment">         &#125; while (!compareAndSet(prev, next));</span><br><span class="hljs-comment">         return next;</span><br><span class="hljs-comment">    **/</span><br>    i.updateAndGet(value -&gt; value * <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h4><blockquote><p>JUC提供的：AtomicReference、 AtomicMarkableReference  、 AtomicStampedReference</p></blockquote><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalAccountCas</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Account1</span> &#123;<br><br>    <span class="hljs-comment">// 原子引用</span><br>    <span class="hljs-keyword">private</span> AtomicReference&lt;BigDecimal&gt; balance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DecimalAccountCas</span><span class="hljs-params">(BigDecimal balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;(balance);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal</span> <span class="hljs-operator">=</span> balance.get();<br>        <span class="hljs-keyword">return</span> bigDecimal.intValue();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(Integer amount)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> balance.get();<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> prev.subtract(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(amount));<br>            <span class="hljs-keyword">if</span> (balance.compareAndSet(prev, next)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>ABA 问题的过程是当有两个线程 T1 和 T2 从内存中获取到值A，线程 T2 通过某些操作把内存值修改为B，然后又经过某些操作将值修改为回值A，T2退出。线程 T1 进行操作的时候 ，使用预期值同内存中的值比较，此时均为A，修改成功退出。但是此时的A以及不是原先的A了</p><p><strong>案例</strong></p><blockquote><p>使用AtomicReference</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> AtomicReference&lt;String&gt; ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;(<span class="hljs-string">&quot;A&quot;</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 获取值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ref.get();<br><br>    <span class="hljs-comment">// 其他线程修改ref</span><br>    other();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// 主线程修改ref</span><br>    System.out.println(ref.compareAndSet(prev, <span class="hljs-string">&quot;C&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">other</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(ref.compareAndSet(ref.get(), <span class="hljs-string">&quot;B&quot;</span>));<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(ref.compareAndSet(ref.get(), <span class="hljs-string">&quot;A&quot;</span>));<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解决方式1</strong></p><p>使用<strong>AtomicStampedReference</strong>，类似MySQl的悲观锁，通过版本号来判断有没有被改过</p><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> AtomicStampedReference&lt;String&gt; ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ref.getReference();<br>    <span class="hljs-comment">// 版本号</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> ref.getStamp();<br>    System.out.println(<span class="hljs-string">&quot;当前版本号&quot;</span> + stamp);<br><br>    other();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;过了一段时间后的版本号&quot;</span> + ref.getStamp());<br><br>    System.out.println(ref.compareAndSet(prev, <span class="hljs-string">&quot;C&quot;</span>, stamp, stamp + <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">other</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> ref.getStamp();<br>        System.out.println(ref.compareAndSet(ref.getReference(), <span class="hljs-string">&quot;B&quot;</span>, stamp, stamp + <span class="hljs-number">1</span>));<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br>    Thread.sleep(<span class="hljs-number">500</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> ref.getStamp();<br>        System.out.println(ref.compareAndSet(ref.getReference(), <span class="hljs-string">&quot;A&quot;</span>, stamp, stamp + <span class="hljs-number">1</span>));<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 控制台</span><br>当前版本号<span class="hljs-number">0</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br>过了一段时间后的版本号<span class="hljs-number">2</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>解决方式2</strong></p><p>当只关心是否被修改过，而不关心被修改了几次时，使用<strong>AtomicMarkableReference</strong></p><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> AtomicMarkableReference&lt;String&gt; ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicMarkableReference</span>&lt;&gt;(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ref.getReference();<br>    <span class="hljs-comment">// 是否被更改过</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">marked</span> <span class="hljs-operator">=</span> ref.isMarked();<br>    System.out.println(<span class="hljs-string">&quot;是否被更改过&quot;</span> + marked);<br><br>    other();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// 是否被更改过</span><br>    System.out.println(<span class="hljs-string">&quot;是否被更改过&quot;</span> + ref.isMarked());<br><br>    System.out.println(ref.compareAndSet(prev, <span class="hljs-string">&quot;C&quot;</span>, marked,!marked));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">other</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        System.out.println(ref.compareAndSet(ref.getReference(), <span class="hljs-string">&quot;B&quot;</span>, ref.isMarked(), !ref.isMarked()));<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h4><blockquote><p>JUC提供的：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</p></blockquote><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    demo(<br>        () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>],<br>        (array) -&gt; array.length,<br>        (array, index) -&gt; array[index]++,<br>        (array) -&gt; System.out.println(Arrays.toString(array))<br>    );<br><br>    <span class="hljs-comment">// 原子数组</span><br>    demo(<br>        () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicIntegerArray</span>(<span class="hljs-number">10</span>),<br>        (array) -&gt; array.length(),<br>        (array, index) -&gt; array.getAndIncrement(index),<br>        (array) -&gt; System.out.println(array)<br>    );<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     参数1，提供数组、可以是线程不安全数组或线程安全数组</span><br><span class="hljs-comment">     参数2，获取数组长度的方法</span><br><span class="hljs-comment">     参数3，自增方法，回传 array, index</span><br><span class="hljs-comment">     参数4，打印数组的方法</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(</span><br><span class="hljs-params">    Supplier&lt;T&gt; arraySupplier,</span><br><span class="hljs-params">    Function&lt;T, Integer&gt; lengthFun,</span><br><span class="hljs-params">    BiConsumer&lt;T, Integer&gt; putConsumer,</span><br><span class="hljs-params">    Consumer&lt;T&gt; printConsumer )</span> &#123;<br><br>    List&lt;Thread&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">T</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> arraySupplier.get();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> lengthFun.apply(array);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-comment">// 每个线程对数组作 10000 次操作</span><br>        ts.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10000</span>; j++) &#123;<br>                putConsumer.accept(array, j%length);<br>            &#125;<br>        &#125;));<br>    &#125;<br>    ts.forEach(t -&gt; t.start()); <span class="hljs-comment">// 启动所有线程</span><br>    ts.forEach(t -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            t.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;); <span class="hljs-comment">// 等所有线程结束</span><br>    printConsumer.accept(array);<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">控制台</span><br>[<span class="hljs-number">8670</span>, <span class="hljs-number">8543</span>, <span class="hljs-number">8522</span>, <span class="hljs-number">8501</span>, <span class="hljs-number">8475</span>, <span class="hljs-number">8479</span>, <span class="hljs-number">8500</span>, <span class="hljs-number">8436</span>, <span class="hljs-number">8621</span>, <span class="hljs-number">8760</span>]<br>[<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>]<br></code></pre></td></tr></table></figure><h4 id="字段更新器"><a href="#字段更新器" class="headerlink" title="字段更新器"></a>字段更新器</h4><blockquote><p>保证引用类型内部属性赋值的原子性</p><p>JUC提供的：AtomicReferenceFieldUpdater &#x2F;&#x2F; 域 字段 、AtomicIntegerFieldUpdater、AtomicLongFieldUpdater</p></blockquote><p><strong>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test15</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-type">AtomicReferenceFieldUpdater</span> <span class="hljs-variable">updater</span> <span class="hljs-operator">=</span> AtomicReferenceFieldUpdater.newUpdater(Student.class, String.class, <span class="hljs-string">&quot;name&quot;</span>);<br><br>        updater.compareAndSet(student, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(student);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">volatile</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原子累加器"><a href="#原子累加器" class="headerlink" title="原子累加器"></a>原子累加器</h4><blockquote><p>JUC提供的：DoubleAccumulator、DoubleAdder、LongAccumulator、LongAdder</p><p>原子累加器的速度比原子整数要快</p><p>在有竞争时，设置多个累加单元，Therad-0 累加 Cell[0]，而 Thread-1 累加 Cell[1]… 最后将结果汇总。这样它们在累加时操作的不同的 Cell 变量，因此减少了 CAS 重试失败，从而提高性 能。</p></blockquote><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        demo(<br>                () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(<span class="hljs-number">0</span>),<br>                (addr) -&gt; addr.getAndIncrement()<br>        );<br>        demo(<br>                () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongAdder</span>(),<br>                (addr) -&gt; addr.increment()<br>        );<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(Supplier&lt;T&gt; adderSupplier, Consumer&lt;T&gt; action)</span> &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">adder</span> <span class="hljs-operator">=</span> adderSupplier.get();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    List&lt;Thread&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 4 个线程，每人累加 50 万</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        ts.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">500000</span>; j++) &#123;<br>                action.accept(adder);<br>            &#125;<br>        &#125;));<br>    &#125;<br>    ts.forEach(t -&gt; t.start());<br>    ts.forEach(t -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            t.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    System.out.println(adder + <span class="hljs-string">&quot; cost:&quot;</span> + (end - start) / <span class="hljs-number">1000_000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h3><blockquote><p>Unsafe 对象提供了非常底层的，<strong>操作内存、线程的方法</strong>，Unsafe 对象不能直接调用，只能通过反射获得</p></blockquote><h4 id="获取unsafe"><a href="#获取unsafe" class="headerlink" title="获取unsafe"></a>获取unsafe</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>    <span class="hljs-comment">// 通过反射获取成员对象</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>    theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 因为theUnsafe是静态的，不从属于哪个类，所以传null</span><br>    <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br><br>    System.out.println(unsafe);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="unsafe的cas操作"><a href="#unsafe的cas操作" class="headerlink" title="unsafe的cas操作"></a>unsafe的cas操作</h4><blockquote><p>有compareAndSwapInt、compareAndSwapLong、compareAndSwapObject</p></blockquote><p><strong>案例：通过unsafe修改域</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test17</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">// 通过反射获取成员对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 因为theUnsafe是静态的，不从属于哪个类，所以传null</span><br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 获取域的偏移地址</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">idOffset</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Teacher.class.getDeclaredField(<span class="hljs-string">&quot;id&quot;</span>));<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nameOffset</span> <span class="hljs-operator">=</span> unsafe.objectFieldOffset(Teacher.class.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">teacher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        unsafe.compareAndSwapInt(teacher, idOffset, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        unsafe.compareAndSwapObject(teacher, nameOffset, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>        System.out.println(teacher);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">volatile</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h4><p>CPU会将内存中的数据读到缓存中来提高效率，</p><p>缓存以缓存行为单元，</p><p>如果某个CPU改变了数据，其他 CPU 核心对应的整个缓存行必须失效</p><p><code>@sun.misc.Contended </code>原理是在使用此注解的对象或字段的前后各增加 128 字节大小的 padding，从而让 CPU 将对象预读至缓存时<strong>占用不同的缓存行</strong>，这样，不会造成对方缓存行的失效</p><h2 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h2><p>如果一个对象在不能够修改其内部状态（属性），那么它就是线程安全的</p><p>不可变类就是不能修改其内部状态的类，如日期转换类<code>SimpleDateFormat</code>是可变的，而<code>DateTimeFormatter</code>是不可变类，<code>String</code>也是不可变类</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p> final 修饰保证了该属性是只读的，不能修改</p><p>保证了该类中的方法不能被覆盖，防止子类无意间破坏不可变性</p><blockquote><p>设置final变量原理：给final赋值的时候，通过写屏障，保证在其它线程读到 它的值时不会出现为 0 的情况</p><p>获取final变量原理：会被复制一份到其他类的方法栈&#x2F;常量池中，没有共享的问题，性能更高</p></blockquote><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>没有成员变量称为无状态，没有线程安全问题</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p>带任务队列，线程阻塞队列，超时时间</p><p>策略模式：当任务队列满了该怎么做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.Test21&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test21</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ThreadPool</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPool</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS, <span class="hljs-number">1</span>, (queue, task) -&gt; &#123;<br>            <span class="hljs-comment">// 自定义拒绝策略</span><br>            <span class="hljs-comment">// 当队列满了可以有的选择</span><br>            <span class="hljs-comment">// 1 死等</span><br>            <span class="hljs-comment">// queue.put(task);</span><br>            <span class="hljs-comment">// 2 带超时时间等待</span><br>            <span class="hljs-comment">// queue.put(task, 1500, TimeUnit.MILLISECONDS);</span><br>            <span class="hljs-comment">// 3 让调用者放弃任务执行</span><br>            <span class="hljs-comment">// 啥都不做</span><br>            <span class="hljs-comment">// 4 让调用者抛出异常</span><br>            <span class="hljs-comment">// throw new RuntimeException(&quot;任务执行失败&quot; + task);</span><br>            <span class="hljs-comment">// 5 让调用者自己执行任务</span><br>             task.run();<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>            threadPool.execute(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, j);<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.ThreadPool&quot;)</span><br><span class="hljs-comment">// 线程池</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br>    <span class="hljs-comment">// 任务队列</span><br>    BlockingQueue&lt;Runnable&gt; taskQueue;<br><br>    <span class="hljs-comment">// 线程集合</span><br>    HashSet&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 核心线程数</span><br>    <span class="hljs-type">int</span> coreSize;<br><br>    <span class="hljs-comment">// 获取任务超时时间</span><br>    <span class="hljs-type">long</span> timeout;<br><br>    <span class="hljs-comment">// 超时时间单位</span><br>    TimeUnit unit;<br><br>    <span class="hljs-comment">// 拒绝策略</span><br>    <span class="hljs-keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> coreSize, <span class="hljs-type">long</span> timeout, TimeUnit unit, <span class="hljs-type">int</span> queueCapacity, RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.coreSize = coreSize;<br>        <span class="hljs-built_in">this</span>.timeout = timeout;<br>        <span class="hljs-built_in">this</span>.unit = unit;<br>        <span class="hljs-built_in">this</span>.taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingQueue</span>&lt;&gt;(queueCapacity);<br>        <span class="hljs-built_in">this</span>.rejectPolicy = rejectPolicy;<br>    &#125;<br><br>    <span class="hljs-comment">// 执行任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable task)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>            <span class="hljs-keyword">if</span> (workers.size() &lt; coreSize) &#123;<br>                <span class="hljs-comment">// 线程数小于核心线程数，创建新的线程</span><br>                <span class="hljs-type">Worker</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(task);<br>                workers.add(worker);<br>                log.debug(<span class="hljs-string">&quot;新增worker&#123;&#125;&quot;</span>, worker);<br>                worker.start();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 将任务放到队列中</span><br>                <span class="hljs-comment">// taskQueue.put(task);</span><br><br>                <span class="hljs-comment">// 将任务放到队列中，带拒绝策略</span><br>                taskQueue.tryPut(rejectPolicy, task);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-keyword">private</span> Runnable task;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(Runnable task)</span> &#123;<br>            <span class="hljs-built_in">this</span>.task = task;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 查询任务队列中是否有任务</span><br>            <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = taskQueue.take(timeout, unit)) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;正在执行..&#123;&#125;&quot;</span>, task);<br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    task = <span class="hljs-literal">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 太久没用的worker会被删掉</span><br>            <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>                log.debug(<span class="hljs-string">&quot;移除worker：&#123;&#125;&quot;</span>, workers);<br>                workers.remove(<span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 拒绝策略</span><br><span class="hljs-comment">// 函数式接口</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RejectPolicy</span> &lt;T&gt;&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reject</span><span class="hljs-params">(BlockingQueue&lt;T&gt; queue, T task)</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 自定义阻塞队列</span><br><span class="hljs-meta">@Slf4j(topic = &quot;c.BlockingQueue&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueue</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">// 存放任务</span><br>    Deque&lt;T&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 容量</span><br>    <span class="hljs-type">int</span> capacity;<br><br>    <span class="hljs-comment">// 锁</span><br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-comment">// 阻塞队列: 队满</span><br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">fullWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">// 阻塞队列: 队空</span><br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">emptyWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取任务</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 若队列为空则进入阻塞队列，否则获取队列第一个任务，并通知队满阻塞队列</span><br>            <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>                emptyWaitSet.await();<br>            &#125;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.removeFirst();<br>            fullWaitSet.signal();<br>            <span class="hljs-keyword">return</span> t;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取任务，带超时时间</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">take</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 若队列为空则进入阻塞队列，否则获取队列第一个任务，并通知队满阻塞队列</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> unit.toNanos(timeout);<br>            <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>                <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 超出超时时间而没有等到，返回null</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>                nanos = emptyWaitSet.awaitNanos(nanos);<br>            &#125;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.removeFirst();<br>            fullWaitSet.signal();<br>            <span class="hljs-keyword">return</span> t;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T task)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 若队列为满则进入阻塞队列，否则将任务添加进队尾，并通知队空阻塞队列</span><br>            <span class="hljs-keyword">while</span> (queue.size() &gt;= capacity) &#123;<br>                log.debug(<span class="hljs-string">&quot;等待加入队列&#123;&#125;&quot;</span>, task);<br>                fullWaitSet.await();<br>            &#125;<br>            queue.offer(task);<br>            log.debug(<span class="hljs-string">&quot;加入队列&#123;&#125;&quot;</span>, task);<br>            emptyWaitSet.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加任务，带超时时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T task, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 若队列为满则进入阻塞队列，否则将任务添加进队尾，并通知队空阻塞队列</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> unit.toNanos(timeout);<br>            <span class="hljs-keyword">while</span> (queue.size() &gt;= capacity) &#123;<br>                <span class="hljs-comment">// 超出超时时间而没有添加成功</span><br>                <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                nanos = fullWaitSet.awaitNanos(nanos);<br>            &#125;<br>            queue.offer(task);<br>            emptyWaitSet.signal();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 当前队列大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queue.size();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 添加任务，可以选择不同的拒绝策略</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryPut</span><span class="hljs-params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (queue.size() &gt;= capacity) &#123;<br>                <span class="hljs-comment">// 队列满了，执行拒绝策略</span><br>                rejectPolicy.reject(<span class="hljs-built_in">this</span>, task);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 队列没满</span><br>                queue.offer(task);<br>                log.debug(<span class="hljs-string">&quot;加入队列&#123;&#125;&quot;</span>, task);<br>                emptyWaitSet.signal();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ThreadPoolExcutor"><a href="#ThreadPoolExcutor" class="headerlink" title="ThreadPoolExcutor"></a>ThreadPoolExcutor</h3><p><img src="/img/bingfa_img/ThreadPoolExecurtor.png"></p><h4 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h4><p>ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量</p><table><thead><tr><th>状态名</th><th>高3位</th><th>接收新任务</th><th>处理阻塞队列任务</th><th>说明</th></tr></thead><tbody><tr><td>RUNNING</td><td>111</td><td>Y</td><td>Y</td><td></td></tr><tr><td>SHUTDOWN</td><td>000</td><td>N</td><td>Y</td><td>不会接收新任务，但会处理阻塞队列剩余 任务</td></tr><tr><td>STOP</td><td>001</td><td>N</td><td>N</td><td>会中断正在执行的任务，并抛弃阻塞队列 任务</td></tr><tr><td>TIDYING</td><td>010</td><td>-</td><td>-</td><td>任务全执行完毕，活动线程为 0 即将进入 终结</td></tr><tr><td>TERMINATED</td><td>011</td><td>-</td><td>-</td><td>终结状态</td></tr></tbody></table><p>将状态信息和线程数量保存在同一个整数中是为了可以用1一次cas操作进行赋值</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                              <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                              TimeUnit unit,</span><br><span class="hljs-params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                              ThreadFactory threadFactory,</span><br><span class="hljs-params">                              RejectedExecutionHandler handler)</span><br></code></pre></td></tr></table></figure><ul><li>corePoolSize 核心线程数目 (最多保留的线程数) </li><li>maximumPoolSize 最大线程数目 </li><li>keepAliveTime 生存时间 - <strong>针对救急线程</strong> </li><li>unit 时间单位 - <strong>针对救急线程</strong> </li><li>workQueue 阻塞队列 </li><li>threadFactory 线程工厂 - 可以为线程创建时起个好名字 </li><li>handler 拒绝策略</li></ul><blockquote><p>当线程池中的任务数超过了队列大小时，会创建救急线程来执行任务。当救急线程数量达到最大创建的数量时，仍然有新任务，此时则会执行拒绝策略</p><p>救急线程有生存时间，而核心线程没有</p></blockquote><h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><p><img src="/img/bingfa_img/%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5.png"></p><ul><li>AbortPolicy 让调用者抛出 RejectedExecutionException 异常，这是默认策略</li><li>CallerRunsPolicy 让调用者运行任务</li><li>DiscardPolicy 放弃本次任务</li><li>DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代</li></ul><h4 id="线程工厂"><a href="#线程工厂" class="headerlink" title="线程工厂"></a>线程工厂</h4><p><strong>newFixedThreadPool 固定大小线程池</strong></p><p>核心线程数等于最大线程数，因此没有救急线程</p><p>阻塞队列是无界的，可以放任意数量的任务</p><blockquote><p>适用于任务量已知，相对耗时的任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.Test22&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test22</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;myPool_t&quot;</span> + t.getAndIncrement());<br>            &#125;<br>        &#125;);<br><br>        pool.execute(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125;);<br><br>        pool.execute(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;2&quot;</span>);<br>        &#125;);<br><br>        pool.execute(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;3&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>newCachedThreadPool 缓冲线程</strong></p><p>核心线程数为0，最大线程数为Integer.MAX_VALUE，因此全部线程都为救急线程（生存周期60s）</p><p>只有当有线程来线程池取任务时，才能放任务到线程池中</p><blockquote><p> 适合任务数比较密集，但每个任务执行时间较短的情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    SynchronousQueue&lt;Integer&gt; integers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;putting &#123;&#125; &quot;</span>, <span class="hljs-number">1</span>);<br>            integers.put(<span class="hljs-number">1</span>);<br>            log.debug(<span class="hljs-string">&quot;&#123;&#125; putted...&quot;</span>, <span class="hljs-number">1</span>);<br>            log.debug(<span class="hljs-string">&quot;putting...&#123;&#125; &quot;</span>, <span class="hljs-number">2</span>);<br>            integers.put(<span class="hljs-number">2</span>);<br>            log.debug(<span class="hljs-string">&quot;&#123;&#125; putted...&quot;</span>, <span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;,<span class="hljs-string">&quot;t1&quot;</span>).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;taking &#123;&#125;&quot;</span>, <span class="hljs-number">1</span>);<br>            integers.take();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;,<span class="hljs-string">&quot;t2&quot;</span>).start();<br>    Thread.sleep(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;taking &#123;&#125;&quot;</span>, <span class="hljs-number">2</span>);<br>            integers.take();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;,<span class="hljs-string">&quot;t3&quot;</span>).start();<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>newSingleThreadExecutor 单例线程池</strong></p><p>线程数固定为 1，任务数多于 1 时，会放入无界队列排队</p><p>与自己创建一个线程执行任务的区别：</p><ul><li>自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会新建一 个线程，保证池的正常工作</li><li>e 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因 此不能调用 ThreadPoolExecutor 中特有的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>    pool.execute(() -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>    &#125;);<br>    pool.execute(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;仍然继续执行&quot;</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>newScheduledThreadPool 定时任务线程池</strong></p><p>可以延时执行任务和定时执行任务(隔一段时间执行一次)，通过设置线程数，使得若一个任务执行时间长&#x2F;执行出错，不会影响其他的定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定时任务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br><br>    pool.schedule(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;task1&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br><br>    pool.schedule(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;task2&quot;</span>);<br>    &#125;, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 延时任务</span><br><span class="hljs-comment">// 如果只设置了一个线程，当任务执行时间长时，会延后下一个任务</span><br><span class="hljs-comment">// scheduleAtFixedRate是从开始时间来技师</span><br><span class="hljs-comment">// scheduleWithFixedDelay从任务结束时间开始算时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br><br>    log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br>    pool.scheduleAtFixedRate(() -&gt;&#123;<br>        log.debug(<span class="hljs-string">&quot;running...&quot;</span>);<br>    &#125;, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br>&#125;<br></code></pre></td></tr></table></figure><p>应用：每周五18点执行定时任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-comment">// 获取当前时间</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    System.out.println(now);<br><br>    <span class="hljs-comment">// 获取本周五18:0:0的时间，如果当前时间超过周五了，则获取下周的</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> now.withHour(<span class="hljs-number">18</span>).withMinute(<span class="hljs-number">0</span>).withSecond(<span class="hljs-number">0</span>).withNano(<span class="hljs-number">0</span>).with(DayOfWeek.FRIDAY);<br>    <span class="hljs-keyword">if</span> (now.compareTo(time) &gt; <span class="hljs-number">0</span>) &#123;<br>        time = time.plusWeeks(<span class="hljs-number">1</span>);<br>    &#125;<br>    System.out.println(time);<br><br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 开始时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">initialDelay</span> <span class="hljs-operator">=</span> Duration.between(now, time).toMillis();<br>    <span class="hljs-comment">// 间隔时间</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>;<br>    pool.scheduleAtFixedRate(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;running&quot;</span>);<br>    &#125;, initialDelay, period, TimeUnit.MILLISECONDS);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="执行任务方法"><a href="#执行任务方法" class="headerlink" title="执行任务方法"></a>执行任务方法</h4><p><strong>void  execute(Runnable command)</strong></p><p>执行任务</p><p><strong>&lt;T&gt;Future&lt;T&gt; submit((Callable&lt;T&gt; task)</strong></p><p>提交任务 task，用<strong>返回值</strong> Future 获得任务执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 有返回结果</span><br>    Future&lt;String&gt; future = pool.submit(() -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;running..&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;);<br><br>    System.out.println(future.get());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>invokeAll</strong></p><p>提交所有任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>    List&lt;Future&lt;String&gt;&gt; futures = pool.invokeAll(Arrays.asList(<br>        () -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;,<br>        () -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;2&quot;</span>;<br>        &#125;,<br>        () -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;3&quot;</span>;<br>        &#125;<br>    ));<br>    futures.forEach(f -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(f.get());<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>invokeAny</strong></p><p>将最先执行完成的任务的返回值返回，其他任务取消</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> pool.invokeAny(Arrays.asList(<br>        () -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;end&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;,<br>        () -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>            log.debug(<span class="hljs-string">&quot;end&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;2&quot;</span>;<br>        &#125;,<br>        () -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            log.debug(<span class="hljs-string">&quot;end&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;3&quot;</span>;<br>        &#125;<br>    ));<br>    log.debug(result);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关闭线程池方法"><a href="#关闭线程池方法" class="headerlink" title="关闭线程池方法"></a>关闭线程池方法</h4><p><strong>shutdown</strong></p><p>将线程池状态改为SHUTDOWN，不再接收新任务，执行完已提交的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>    Future&lt;Integer&gt; result1 = pool.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;task 1 running&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;);<br><br>    Future&lt;Integer&gt; result2 = pool.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;task 2 running&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;);<br><br>    Future&lt;Integer&gt; result3 = pool.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;task 3 running&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;);<br><br>    log.debug(<span class="hljs-string">&quot;关闭线程池&quot;</span>);<br>    pool.shutdown();<br><br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台</span><br><span class="hljs-number">15</span>:<span class="hljs-number">17</span>:<span class="hljs-number">25</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.Test22</span> - 关闭线程池<br><span class="hljs-number">15</span>:<span class="hljs-number">17</span>:<span class="hljs-number">26</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test22</span> - task <span class="hljs-number">2</span> running<br><span class="hljs-number">15</span>:<span class="hljs-number">17</span>:<span class="hljs-number">26</span> <span class="hljs-selector-attr">[pool-1-thread-1]</span> c<span class="hljs-selector-class">.Test22</span> - task <span class="hljs-number">1</span> running<br><span class="hljs-number">15</span>:<span class="hljs-number">17</span>:<span class="hljs-number">27</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test22</span> - task <span class="hljs-number">3</span> running<br></code></pre></td></tr></table></figure><p><strong>shutdownNow</strong></p><p>将线程池状态改为STOP，不再接收新任务，用interrupt打断正在执行的线程，将已提交的任务全部返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>    Future&lt;Integer&gt; result1 = pool.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;task 1 running&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;);<br><br>    Future&lt;Integer&gt; result2 = pool.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;task 2 running&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;);<br><br>    Future&lt;Integer&gt; result3 = pool.submit(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            log.debug(<span class="hljs-string">&quot;task 3 running&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;);<br><br>    log.debug(<span class="hljs-string">&quot;立即关闭线程池&quot;</span>);<br>    List&lt;Runnable&gt; runnables = pool.shutdownNow();<br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, runnables);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台</span><br><span class="hljs-number">15</span>:<span class="hljs-number">24</span>:<span class="hljs-number">57</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.Test22</span> - 关闭线程池<br><span class="hljs-number">15</span>:<span class="hljs-number">24</span>:<span class="hljs-number">57</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.Test22</span> - <span class="hljs-selector-attr">[java.util.concurrent.FutureTask@35851384]</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.InterruptedException</span>: sleep interrupted<br></code></pre></td></tr></table></figure><h4 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h4><ol><li><p>try..catch捕获异常</p></li><li><p>使用future</p><p>没有异常的时候返回return的结果，有异常则返回异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, ExecutionException &#123;<br>    <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">2</span>);<br><br>    Future&lt;Boolean&gt; f = pool.submit(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;task1&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;);<br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, f.get());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="tomcat线程池"><a href="#tomcat线程池" class="headerlink" title="tomcat线程池"></a>tomcat线程池</h4><p><img src="/img/bingfa_img/tomcat%E7%BA%BF%E7%A8%8B%E6%B1%A0.png"></p><p>tomcat中用到的线程池</p><ul><li>LimitLatch 用来限流，可以控制最大连接个数，类似 J.U.C 中的 Semaphore</li><li>Acceptor 只负责【接收新的 socket 连接】</li><li>Poller 只负责监听 socket channel 是否有【可读的 I&#x2F;O 事件】</li><li>一旦可读，封装一个任务对象（socketProcessor），提交给 Executor 线程池处理</li><li>Executor 线程池中的工作线程最终负责【处理请求】</li></ul><h3 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h3><p>Fork&#x2F;Join 是 JDK 1.7 加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的 cpu 密集型 运算</p><blockquote><p>就是用多线程来计算各部分的值，最后合并</p></blockquote><p><strong>案例</strong></p><p>计算1~n的和</p><p>拆分的不好，一个线程等待另一个线程的结果，总体上像串行执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test23</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>(<span class="hljs-number">4</span>);<br>        System.out.println(pool.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(<span class="hljs-number">5</span>)));<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.MyTask&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 退出条件</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            log.debug(<span class="hljs-string">&quot;join() &#123;&#125;&quot;</span>, n);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 拆分</span><br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(n - <span class="hljs-number">1</span>);<br>        t1.fork();  <span class="hljs-comment">// 让一个线程执行任务</span><br>        log.debug(<span class="hljs-string">&quot;fork() &#123;&#125; + &#123;&#125;&quot;</span>, n, t1);<br><br>        <span class="hljs-comment">// 合并结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> n + t1.join();  <span class="hljs-comment">// 获取结果</span><br>        log.debug(<span class="hljs-string">&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, n, t1, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&quot;</span> + n + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>改进</strong></p><p>拆分成两部分计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test23</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>(<span class="hljs-number">4</span>);<br>        System.out.println(pool.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)));<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Slf4j(topic = &quot;c.MyTask&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> begin;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> end;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask2</span><span class="hljs-params">(<span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-built_in">this</span>.begin = begin;<br>        <span class="hljs-built_in">this</span>.end = end;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 只有一个数时</span><br>        <span class="hljs-keyword">if</span> (begin == end) &#123;<br>            <span class="hljs-keyword">return</span> begin;<br>        &#125;<br>        <span class="hljs-comment">// 只有两个数时</span><br>        <span class="hljs-keyword">if</span> (end - begin == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> end - begin;<br>        &#125;<br><br>        <span class="hljs-comment">// 拆分成前后两部分</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> begin + (end - begin) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">MyTask2</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask2</span>(begin, mid);<br>        t1.fork();<br>        <span class="hljs-type">MyTask2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask2</span>(mid + <span class="hljs-number">1</span>, end);<br>        t2.fork();<br><br>        <span class="hljs-keyword">return</span> t1.join() + t2.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="star-JUC工具包"><a href="#star-JUC工具包" class="headerlink" title=":star:JUC工具包"></a>:star:JUC工具包</h3><h4 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h4><p>全称AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架</p><p>有以下特点：</p><ul><li>用 state 属性来表示资源的状态（独占、共享）</li><li>提供了基于 FIFO 的等待队列</li><li>支持多个条件变量(不同条件的等待队列)</li></ul><p><strong>自定义一个锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.Test24&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test24</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;locking...&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;unlocking...&quot;</span>);<br>                lock.unlock();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;locking...&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                log.debug(<span class="hljs-string">&quot;unlocking...&quot;</span>);<br>                lock.unlock();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br><br>    <span class="hljs-comment">// 尝试上锁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">if</span> (acquires == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-comment">// 设置当前锁的持有者</span><br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>        <span class="hljs-keyword">if</span> (acquires == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (getState() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            &#125;<br>            <span class="hljs-comment">// 设置当前没人持有</span><br>            setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 不可重入</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">MySync</span> <span class="hljs-variable">sync</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySync</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        sync.acquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 可打断锁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquire(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>, unit.toNanos(time));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.newCondition();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ReentrantLock原理"><a href="#ReentrantLock原理" class="headerlink" title="ReentrantLock原理"></a>ReentrantLock原理</h4><p><img src="/img/bingfa_img/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%8E%9F%E7%90%861.png"></p><p><strong>非公平锁原理</strong></p><ol><li>ReentrantLock默认是非公平锁</li></ol><p><img src="/img/bingfa_img/%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E5%8E%9F%E7%90%861.png"></p><ol start="2"><li>调用了非公平锁的上锁方法lock()</li></ol><p><img src="/img/bingfa_img/%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E5%8E%9F%E7%90%862.png"></p><ol start="3"><li><p>lock方法</p><blockquote><p>如果成功上锁，则把锁的状态改为1，锁的拥有者改为当前线程</p><p>如果上锁失败，进入acquire()方法，会再尝试上锁几次，都失败后进入等待队列(双向链表)，线程设置为等待状态</p></blockquote></li></ol><p><img src="/img/bingfa_img/%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E5%8E%9F%E7%90%863.png"></p><ol start="4"><li>释放锁，调用了unlock()方法，将唤醒等待队列上最近的线程，和没有在等待队列中的线程竞争锁(非公平)</li></ol><p><strong>可重入原理</strong></p><p>如果第一次上锁，则把计数用的c置为1，以后拥有锁的线程每次来上锁c都会加1</p><p>释放锁时，c减1，如果此时c不等于0，则不会释放锁，直到等于0时才会执行释放锁的操作</p><p><strong>打断原理</strong></p><ul><li>不可打断：线程在等待的时候被打断了，会将打断标记置为true，然后继续去等待锁，而不是立刻被打断。只有当获取到锁后，才会判断是否有被打断，如果有则会执行打断操作</li><li>可打断：和不可打断不一样的地方是，如果在等待的时候被打断了，则会抛出异常，不继续到等待队列中等待</li></ul><p><strong>公平锁原理</strong></p><p>不公平锁是判断锁没有拥有者时直接去申请锁，公平锁是先判断在等待队列中，有没有前驱，如果没有前驱，代表没有比当前线程更早申请锁的线程，这时才去申请锁。</p><p><strong>条件变量原理</strong></p><p>每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject</p><ul><li>进入条件阻塞队列：调用await()将会把当前线程加入到条件变量的阻塞队列，然后fullyRelease()释放自己持有的锁，调用park()把自己阻塞住</li><li>唤醒：调用signal()获取阻塞队列的第一个线程并尝试唤醒，如果成功则把它加入到等待锁的队列尾，如果失败(如等待超时，被打断而不继续等锁)则获取条件阻塞队列的下一个线程</li></ul><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><h5 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h5><ul><li>读-读是并发</li><li>读-写、写-写是互斥的</li></ul><p><strong>案例</strong></p><p>定义一个存放数据的容器，有读写功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.DataContainer&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataContainer</span> &#123;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-comment">// 读写锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantReadWriteLock</span> <span class="hljs-variable">rw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-keyword">private</span> ReentrantReadWriteLock.<span class="hljs-type">ReadLock</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> rw.readLock();<br><br>    <span class="hljs-keyword">private</span> ReentrantReadWriteLock.<span class="hljs-type">WriteLock</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> rw.writeLock();<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;获取读锁&quot;</span>);<br>        r.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;读操作&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;释放读锁&quot;</span>);<br>            r.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;获取写锁&quot;</span>);<br>        w.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;写操作&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;释放写锁&quot;</span>);<br>            w.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试读-写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">DataContainer</span> <span class="hljs-variable">dataContainer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataContainer</span>();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.read();<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>    Thread.sleep(<span class="hljs-number">100</span>);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.write();<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台，可以看出是互斥的</span><br><span class="hljs-number">15</span>:<span class="hljs-number">20</span>:<span class="hljs-number">29</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainer</span> - 获取读锁<br><span class="hljs-number">15</span>:<span class="hljs-number">20</span>:<span class="hljs-number">29</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainer</span> - 读操作<br><span class="hljs-number">15</span>:<span class="hljs-number">20</span>:<span class="hljs-number">29</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainer</span> - 获取写锁<br><span class="hljs-number">15</span>:<span class="hljs-number">20</span>:<span class="hljs-number">30</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainer</span> - 释放读锁<br><span class="hljs-number">15</span>:<span class="hljs-number">20</span>:<span class="hljs-number">30</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainer</span> - 写操作<br><span class="hljs-number">15</span>:<span class="hljs-number">20</span>:<span class="hljs-number">30</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainer</span> - 释放写锁<br></code></pre></td></tr></table></figure><p>测试读-读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">DataContainer</span> <span class="hljs-variable">dataContainer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataContainer</span>();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.read();<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.read();<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台，可以看出是并发的</span><br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">15</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainer</span> - 获取读锁<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">15</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainer</span> - 获取读锁<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">15</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainer</span> - 读操作<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">15</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainer</span> - 读操作<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">16</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainer</span> - 释放读锁<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">16</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainer</span> - 释放读锁<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>读锁不支持条件变量</li><li>有写锁的时候可以直接获取读锁；而有读锁的时候不能直接获取写锁，需要先释放读锁</li></ul><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p> <strong>读写锁用的是同一个 Sycn 同步器</strong>，因此等待队列、state 等也是同一个</p><p> 写锁状态占了 state 的低 16 位，而读锁 使用的是 state 的高 16 位</p><p><strong>上写锁</strong></p><p>线程调用writeLock().lock()方法，首先判断锁的状态：</p><ul><li><p>如果没有被上锁（读&#x2F;写），则可以上锁；</p></li><li><p>如果锁的状态为被上锁，则判断是否是自己上的锁：</p><ul><li><p>如果是，则表示锁重入，状态位加1；</p></li><li><p>如果不是，则加锁失败，进入等待队列（节点状态为独占，表示要加的是写锁）</p></li></ul></li></ul><p><strong>上读锁</strong></p><p>线程调用readLock().lock()方法，首先判断锁的状态：</p><ul><li><p>如果没有被上锁（写），则可以上锁；</p></li><li><p>如果锁的状态为被上锁，则判断：</p><ul><li>如果被上的是写锁，判断是否是自己上的写锁<ul><li>如果不是，则进入等待队列（节点状态为共享，代表要加的是读锁）</li><li>如果是，则锁降级</li></ul></li><li>如果被上的是读锁，则上锁的个数加1</li></ul></li></ul><p><strong>解写锁</strong></p><p>状态位减1，判断状态位是否为0，是0的话就解锁，将锁的拥有者置为null，并通知等待队列的下一个节点</p><ul><li>如果下一个节点状态为共享，则通知后面一串的共享节点</li><li>如果下一个节点状态为独占，则不继续通知</li></ul><p><strong>解读锁</strong></p><p>上锁数减1，判断上锁数是否等于0，如果为0，则解读锁，通知等待队列的下一个节点</p><h4 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h4><p>乐观的读写锁，基于”戳”来判断是否被修改过，如果被修改过，则升级成读锁</p><p>适用于读多，写少的场景</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>创建一个使用乐观锁的数据容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.DataContainerStamped&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataContainerStamped</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StampedLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StampedLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DataContainerStamped</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> readTime)</span> &#123;<br>        <span class="hljs-comment">// 获取戳，尝试加乐观锁</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.tryOptimisticRead();<br>        log.debug(<span class="hljs-string">&quot;optimistic read locking...&#123;&#125;&quot;</span>, stamp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(readTime);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 校验戳通过</span><br>        <span class="hljs-keyword">if</span> (lock.validate(stamp)) &#123;<br>            log.debug(<span class="hljs-string">&quot;read finish...&#123;&#125;&quot;</span>, stamp);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br><br>        <span class="hljs-comment">// 校验戳未通过, 升级为读锁</span><br>        log.debug(<span class="hljs-string">&quot;updating to read lock...&#123;&#125;&quot;</span>, stamp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            stamp = lock.readLock();<br>            log.debug(<span class="hljs-string">&quot;read lock &#123;&#125;&quot;</span>, stamp);<br>            Thread.sleep(readTime);<br>            log.debug(<span class="hljs-string">&quot;read finish...&#123;&#125;&quot;</span>, stamp);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;read unlock &#123;&#125;&quot;</span>, stamp);<br>            lock.unlock(stamp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> newData)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> lock.writeLock();<br>        log.debug(<span class="hljs-string">&quot;write lock &#123;&#125;&quot;</span>, stamp);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>            <span class="hljs-built_in">this</span>.data = newData;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.debug(<span class="hljs-string">&quot;write unlock &#123;&#125;&quot;</span>, stamp);<br>            lock.unlock(stamp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：读-读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">DataContainerStamped</span> <span class="hljs-variable">dataContainer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataContainerStamped</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.read(<span class="hljs-number">1000</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>    Thread.sleep(<span class="hljs-number">500</span>);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.read(<span class="hljs-number">0</span>);<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台，可以看出读读不互斥</span><br><span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">20</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - optimistic read locking...<span class="hljs-number">256</span><br><span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">21</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - optimistic read locking...<span class="hljs-number">256</span><br><span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">21</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - read finish...<span class="hljs-number">256</span><br><span class="hljs-number">10</span>:<span class="hljs-number">15</span>:<span class="hljs-number">21</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - read finish...<span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><p>测试：读-写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">DataContainerStamped</span> <span class="hljs-variable">dataContainer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataContainerStamped</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.read(<span class="hljs-number">1000</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br><br>    Thread.sleep(<span class="hljs-number">500</span>);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        dataContainer.write(<span class="hljs-number">2</span>);<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台 可以看出验证戳失败，被升级成读锁</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">54</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - optimistic read locking...<span class="hljs-number">256</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">55</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - write lock <span class="hljs-number">384</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">55</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - updating to read lock...<span class="hljs-number">256</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">57</span> <span class="hljs-selector-attr">[t2]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - write unlock <span class="hljs-number">384</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">57</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - read lock <span class="hljs-number">513</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">58</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - read finish...<span class="hljs-number">513</span><br><span class="hljs-number">10</span>:<span class="hljs-number">18</span>:<span class="hljs-number">58</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.DataContainerStamped</span> - read unlock <span class="hljs-number">513</span><br></code></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>StampedLock 不支持条件变量 </li><li>StampedLock 不支持可重入</li></ul><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>信号量，用来限制同时访问共享资源的线程数量（不是限制资源数量）</p><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>最多同时有3个线程在运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取信号量</span><br>                semaphore.acquire();<br>                log.debug(<span class="hljs-string">&quot;running...&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                log.debug(<span class="hljs-string">&quot;end...&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 释放信号量</span><br>                semaphore.release();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><p>可以用在限制线程池连接数上</p><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p><strong>初始化</strong></p><p>将传入的信号量数赋值给同步器（NonfairSync）的state</p><p><strong>获取信号量</strong></p><p>调用acqire()方法，将会用cas尝试将State减1，如果还有剩余的信号量则获取成功，否则进入等待队列</p><p><strong>释放信号量</strong></p><p>调用release()方法，尝试将State加1并唤醒等待队列的下一个节点</p><h4 id="CountdownLatch"><a href="#CountdownLatch" class="headerlink" title="CountdownLatch"></a>CountdownLatch</h4><p>用来进行线程同步协作，等待所有线程完成</p><p>完成的线程将计数值减1，当计数值减为0时，等待的线程才能运行</p><h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;end&quot;</span>);<br>        latch.countDown();<br>    &#125;).start();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;end&quot;</span>);<br>        latch.countDown();<br>    &#125;).start();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;end&quot;</span>);<br>        latch.countDown();<br>    &#125;).start();<br><br>    latch.await();<br>    log.debug(<span class="hljs-string">&quot;main begin&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">// 控制台<br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">51</span> [Thread<span class="hljs-number">-0</span>] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - <span class="hljs-keyword">begin</span><br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">51</span> [Thread<span class="hljs-number">-2</span>] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - <span class="hljs-keyword">begin</span><br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">51</span> [Thread<span class="hljs-number">-1</span>] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - <span class="hljs-keyword">begin</span><br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">52</span> [Thread<span class="hljs-number">-0</span>] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - <span class="hljs-keyword">end</span><br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">52</span> [Thread<span class="hljs-number">-2</span>] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - <span class="hljs-keyword">end</span><br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">52</span> [Thread<span class="hljs-number">-1</span>] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - <span class="hljs-keyword">end</span><br><span class="hljs-number">16</span>:<span class="hljs-number">20</span>:<span class="hljs-number">52</span> [main] <span class="hljs-keyword">c</span>.Test<span class="hljs-number">28</span> - main <span class="hljs-keyword">begin</span><br></code></pre></td></tr></table></figure><p>与join相比，CountdownLatch可以配合线程池使用</p><h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><p>模拟加载进度条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-comment">// 存放加载进度</span><br>    String[] all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">// 模拟加载进度条</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i;<br>        pool.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">100</span>; j++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(random.nextInt(<span class="hljs-number">100</span>));<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                all[k] = j + <span class="hljs-string">&quot;%&quot;</span>;<br>                <span class="hljs-comment">// \r表示回车，从当前行开始输入，会覆盖之前的内容</span><br>                System.out.print(<span class="hljs-string">&quot;\r&quot;</span> + Arrays.toString(all));<br>            &#125;<br>            latch.countDown();<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        latch.await();<br>        System.out.println(<span class="hljs-string">&quot;\n加载完成&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭线程池</span><br>    pool.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">// 控制台</span><br>[<span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>, <span class="hljs-number">100</span><span class="hljs-meta">%</span>]<br>加载完成<br></code></pre></td></tr></table></figure><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>循环栅栏，与CountdownLatch相似，不同在于CountdownLatch减完就没了，而yclicBarrier可以重用</p><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><p>当await的线程数到达2时，才会继续运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">2</span>, () -&gt; &#123;<br>        <span class="hljs-comment">// 所有线程执行完后打印</span><br>        log.debug(<span class="hljs-string">&quot;task1 task2 finish&quot;</span>);<br>    &#125;);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>        pool.submit(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;task1 begin...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                barrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br><br>        pool.submit(() -&gt; &#123;<br>            log.debug(<span class="hljs-string">&quot;task1 begin...&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                barrier.await();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    pool.shutdown();<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 控制台</span><br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">14</span> <span class="hljs-selector-attr">[pool-1-thread-1]</span> c<span class="hljs-selector-class">.Test29</span> - task1 begin...<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">14</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test29</span> - task1 begin...<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">16</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test29</span> - task1 task2 finish<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">16</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test29</span> - task1 begin...<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">16</span> <span class="hljs-selector-attr">[pool-1-thread-1]</span> c<span class="hljs-selector-class">.Test29</span> - task1 begin...<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">18</span> <span class="hljs-selector-attr">[pool-1-thread-1]</span> c<span class="hljs-selector-class">.Test29</span> - task1 task2 finish<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">18</span> <span class="hljs-selector-attr">[pool-1-thread-1]</span> c<span class="hljs-selector-class">.Test29</span> - task1 begin...<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">18</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test29</span> - task1 begin...<br><span class="hljs-number">15</span>:<span class="hljs-number">26</span>:<span class="hljs-number">20</span> <span class="hljs-selector-attr">[pool-1-thread-2]</span> c<span class="hljs-selector-class">.Test29</span> - task1 task2 finish<br></code></pre></td></tr></table></figure><h4 id="线程安全集合类"><a href="#线程安全集合类" class="headerlink" title="线程安全集合类"></a>线程安全集合类</h4><h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><p>保证了每个方法的原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALPHA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcedfghijklmnopqrstuvwxyz&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    demo(<br>        () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String, LongAdder&gt;(),<br>        (map, words) -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (String word : words) &#123;<br>                <span class="hljs-comment">// 如果map中没有这个key，则生成一个value, 然后把key value放入map中</span><br>                <span class="hljs-comment">// 保证了这些操作的原子性</span><br>                <span class="hljs-type">LongAdder</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.computeIfAbsent(word, (key) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongAdder</span>());<br>                <span class="hljs-comment">// 累加</span><br>                value.increment();<br>            &#125;<br>        &#125;<br>    );<br><br>&#125;<br><br><span class="hljs-comment">// 生成文件</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> ALPHA.length();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 将威哥字母都加200个到集合list中</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(length * count);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> ALPHA.charAt(i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; count; j++) &#123;<br>            list.add(String.valueOf(ch));<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 打乱数组list</span><br>    Collections.shuffle(list);<br><br>    <span class="hljs-comment">// 每200个字母放到一个文件中，每个字母占一行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;tmp/&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;.txt&quot;</span>)))) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> list.subList(i * count, (i + <span class="hljs-number">1</span>) * count).stream()<br>                .collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>            out.print(collect);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从文件中获取字母，统计字母出现次数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;V&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(Supplier&lt;Map&lt;String, V&gt;&gt; supplier,</span><br><span class="hljs-params">                             BiConsumer&lt;Map&lt;String, V&gt;, List&lt;String&gt;&gt; consumer)</span> &#123;<br>    Map&lt;String, V&gt; counterMap = supplier.get();<br>    List&lt;Thread&gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">// 读取文件，执行计数</span><br>            List&lt;String&gt; words = readFromFile(idx);<br>            consumer.accept(counterMap, words);<br>        &#125;);<br>        ts.add(thread);<br>    &#125;<br>    ts.forEach(t -&gt; t.start());<br>    ts.forEach(t -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            t.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>    System.out.println(counterMap);<br>&#125;<br><br><span class="hljs-comment">// 读取文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">readFromFile</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    ArrayList&lt;String&gt; words = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;tmp/&quot;</span><br>                                                                                          + i + <span class="hljs-string">&quot;.txt&quot;</span>)))) &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> in.readLine();<br>            <span class="hljs-keyword">if</span> (word == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            words.add(word);<br>        &#125;<br>        <span class="hljs-keyword">return</span> words;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">// 控制台<br>&#123;<span class="hljs-attr">a=200,</span> <span class="hljs-attr">b=200,</span> <span class="hljs-attr">c=200,</span> <span class="hljs-attr">d=200,</span> <span class="hljs-attr">e=200,</span> <span class="hljs-attr">f=200,</span> <span class="hljs-attr">g=200,</span> <span class="hljs-attr">h=200,</span> <span class="hljs-attr">i=200,</span> <span class="hljs-attr">j=200,</span> <span class="hljs-attr">k=200,</span> <span class="hljs-attr">l=200,</span> <span class="hljs-attr">m=200,</span> <span class="hljs-attr">n=200,</span> <span class="hljs-attr">o=200,</span> <span class="hljs-attr">p=200,</span> <span class="hljs-attr">q=200,</span> <span class="hljs-attr">r=200,</span> <span class="hljs-attr">s=200,</span> <span class="hljs-attr">t=200,</span> <span class="hljs-attr">u=200,</span> <span class="hljs-attr">v=200,</span> <span class="hljs-attr">w=200,</span> <span class="hljs-attr">x=200,</span> <span class="hljs-attr">y=200,</span> <span class="hljs-attr">z=200&#125;</span><br></code></pre></td></tr></table></figure><h6 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h6><p><strong>死链</strong></p><p>哈希表中的链表出现了死循环，出现在<strong>jdk7</strong></p><p>当哈希表中的元素数量达到容量的3&#x2F;4时，会扩容哈希表</p><p>jdk7是采用头插法建立链表，多线程时，当一个线程扩容完，另一个线程也去扩容</p><p>会导致链表中产生循环链表，从而直接卡死</p><blockquote><p>JDK 8 虽然将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），但仍不意味着能 够在多线程环境下能够安全扩容，还会出现其它问题（如扩容丢数据）</p></blockquote><p><strong>构造函数</strong></p><p>参数：初始容量、负载因子、并发度</p><blockquote><ul><li>初始容量要 &gt;&#x3D; 并发度，如果初始容量设置的小于并发度，则会被改成&#x3D;并发度</li><li>容量得是2^n，因此传过来的容量不一定就是map的实际容量</li><li>实现了<strong>懒惰初始化</strong>(jdk8)，在构造方法中<strong>仅仅计算了 table 的大小</strong>，以后在第一次使用时才会真正创建</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcurrentHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity,</span><br><span class="hljs-params">                         <span class="hljs-type">float</span> loadFactor, <span class="hljs-type">int</span> concurrencyLevel)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!(loadFactor &gt; <span class="hljs-number">0.0f</span>) || initialCapacity &lt; <span class="hljs-number">0</span> || concurrencyLevel &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="hljs-comment">// Use at least as many bins</span><br>        initialCapacity = concurrencyLevel;   <span class="hljs-comment">// as estimated threads</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>)(<span class="hljs-number">1.0</span> + (<span class="hljs-type">long</span>)initialCapacity / loadFactor);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> (size &gt;= (<span class="hljs-type">long</span>)MAXIMUM_CAPACITY) ?<br>        MAXIMUM_CAPACITY : tableSizeFor((<span class="hljs-type">int</span>)size);<br>    <span class="hljs-built_in">this</span>.sizeCtl = cap;<span class="hljs-comment">// 只计算了容量，还没有初始化map</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>get函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="hljs-type">int</span> n, eh; K ek;<br>    <span class="hljs-comment">// spread 方法能确保返回结果是正数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> spread(key.hashCode());<br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (e = tabAt(tab, (n - <span class="hljs-number">1</span>) &amp; h)) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果头结点已经是要查找的 key</span><br>        <span class="hljs-keyword">if</span> ((eh = e.hash) == h) &#123;<br>            <span class="hljs-keyword">if</span> ((ek = e.key) == key || (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek)))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>        <span class="hljs-comment">// hash 为负数表示该 bin 在扩容中或是 treebin, 这时调用 find 方法来查找</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (eh &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> (p = e.find(h, key)) != <span class="hljs-literal">null</span> ? p.val : <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 头结点不是要找的节点，则正常遍历链表/红黑树, 用 equals 比较</span><br>        <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e.hash == h &amp;&amp;<br>                ((ek = e.key) == key || (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek))))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>put函数</strong></p><p>key如果已存在，默认覆盖旧值</p><p>通过cas来创建节点、添加到头结点，不使用synchronized来提高效率</p><p>如果发现头结点值为-1，则说明哈希表正在扩容，则会先去帮忙扩容</p><p>在要插入值的时候，会锁住当前的链表&#x2F;红黑树</p><p><strong>initTable函数</strong></p><p>真正创建hash表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;<br>    Node&lt;K,V&gt;[] tab; <span class="hljs-type">int</span> sc;<br>    <span class="hljs-keyword">while</span> ((tab = table) == <span class="hljs-literal">null</span> || tab.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((sc = sizeCtl) &lt; <span class="hljs-number">0</span>)<br>            Thread.yield();<br>        <span class="hljs-comment">// 尝试将 sizeCtl 设置为 -1（表示初始化 table）</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (U.compareAndSwapInt(<span class="hljs-built_in">this</span>, SIZECTL, sc, -<span class="hljs-number">1</span>)) &#123;<br>            <span class="hljs-comment">// 获得锁, 创建 table, 这时其它线程会在 while() 循环中 yield 直至 table 创建</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || tab.length == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> (sc &gt; <span class="hljs-number">0</span>) ? sc : DEFAULT_CAPACITY;<br>                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;?,?&gt;[n];<br>                    table = tab = nt;<br>                    sc = n - (n &gt;&gt;&gt; <span class="hljs-number">2</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                sizeCtl = sc;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tab;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>size计算流程</strong></p><p>size 计算实际发生在 put，remove 改变集合元素的操作之中 </p><ul><li>没有竞争发生，向 baseCount 累加计数</li><li>有竞争发生，新建 counterCells，向其中的一个 cell 累加计数 <ul><li>counterCells 初始有两个 </li><li>cell 如果计数竞争比较激烈，会创建新的 cell 来累加计数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sumCount();<br>    <span class="hljs-keyword">return</span> ((n &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0</span> :<br>            (n &gt; (<span class="hljs-type">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :<br>            (<span class="hljs-type">int</span>)n);<br>&#125;<br><br><span class="hljs-comment">// 合并累加单元到baseCount</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sumCount</span><span class="hljs-params">()</span> &#123;<br>    CounterCell[] as = counterCells; CounterCell a;<br>    <span class="hljs-comment">// 将 baseCount 计数与所有 cell 计数累加</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> baseCount;<br>    <span class="hljs-keyword">if</span> (as != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; as.length; ++i) &#123;<br>            <span class="hljs-keyword">if</span> ((a = as[i]) != <span class="hljs-literal">null</span>)<br>                sum += a.value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>阿里云OSS</title>
    <link href="/2022/11/13/%E5%85%B6%E4%BB%96/%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <url>/2022/11/13/%E5%85%B6%E4%BB%96/%E9%98%BF%E9%87%8C%E4%BA%91OSS/</url>
    
    <content type="html"><![CDATA[<h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><blockquote><p>对象存储（Object Storage Service，简称 OSS）是海量、安全、低成本、高可靠的<strong>云存储服务</strong>，具有与平台无关RESTful API，能从互联网任何位置访问。OSS提供标准、低频、归档等类型选择，全面优化存储成本。</p></blockquote><p><a href="https://www.aliyun.com/product/oss?spm=5176.21213303.J_6704733920.7.19c253c9R6hA1l&scm=20140722.S_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@102633._.ID_product@@%E4%BA%91%E4%BA%A7%E5%93%81@@102633-RL_%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8OSS-LOC_main-OR_ser-V_2-P0_0">对象存储OSS-阿里云</a></p><p>创建bucket</p><p>根据官网文档导入依赖、使用功能</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hutool</title>
    <link href="/2022/11/12/%E5%85%B6%E4%BB%96/Hutool/"/>
    <url>/2022/11/12/%E5%85%B6%E4%BB%96/Hutool/</url>
    
    <content type="html"><![CDATA[<h2 id="Hutool"><a href="#Hutool" class="headerlink" title="Hutool"></a>Hutool</h2><blockquote><p>Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅</p></blockquote><p><a href="https://www.hutool.cn/docs/#/">官网</a></p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过阿里云发送短信</title>
    <link href="/2022/11/12/%E5%85%B6%E4%BB%96/%E9%80%9A%E8%BF%87%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/"/>
    <url>/2022/11/12/%E5%85%B6%E4%BB%96/%E9%80%9A%E8%BF%87%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="通过阿里云发送短信"><a href="#通过阿里云发送短信" class="headerlink" title="通过阿里云发送短信"></a>通过阿里云发送短信</h2><blockquote><p>这里通过测试API来发送</p></blockquote><p><a href="https://www.aliyun.com/">阿里云网址</a></p><h3 id="查看官网"><a href="#查看官网" class="headerlink" title="查看官网"></a>查看官网</h3><ul><li><p>搜索短信服务</p><p><img src="/img/else_img/aliyunMSM1.png"></p></li><li><p>绑定测试手机号，点击调用API</p><p><img src="/img/else_img/aliyunMSM2.png"></p></li><li><p>可以看到有发送短信的示例代码</p><p><img src="/img/else_img/aliyunMSM3.png"></p></li><li><p>创建用于发送短信的AccessKey</p><p><img src="/img/else_img/aliyunMSM4.png"></p><p><img src="/img/else_img/aliyunMSM5.png"></p></li><li><p>创建完用户后给其分配发送SMS的权限</p><p><img src="/img/else_img/aliyunMSM6.png"></p></li><li><p>给用户创建AccessKey（创建完记得保存）</p><p><img src="/img/else_img/aliyunMSM7.png"></p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>根据示例代码，首先导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 阿里云短信服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>这里通过将AccessKey 和密钥放到配置文件中，再通过@Value注解来读取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 地域节点</span><br><span class="hljs-attr">aliyun.sms.regionId</span>=<span class="hljs-string">default</span><br><span class="hljs-comment"># 访问ID</span><br><span class="hljs-attr">aliyun.sms.accessKeyId</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 访问密钥</span><br><span class="hljs-attr">aliyun.sms.secret</span>=<span class="hljs-string"></span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-comment">// InitializingBean接口为bean提供了属性初始化后的处理方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstantPropertiesUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.sms.regionId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String regionId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.sms.accessKeyId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeyId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.sms.secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secret;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String REGION_Id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String SECRET;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        REGION_Id = regionId;<br>        ACCESS_KEY_ID = accessKeyId;<br>        SECRET = secret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建发送短信的service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MsmServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MsmService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String phone, String code)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(phone))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 基础配置</span><br>        <span class="hljs-type">DefaultProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(<br>                ConstantPropertiesUtils.REGION_Id,  <span class="hljs-comment">// 地域节点</span><br>                ConstantPropertiesUtils.ACCESS_KEY_ID,  <span class="hljs-comment">// 访问ID</span><br>                ConstantPropertiesUtils.SECRET);    <span class="hljs-comment">//访问密钥</span><br><br>        <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br><br>        <span class="hljs-type">SendSmsRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendSmsRequest</span>();<br>        request.setSignName(<span class="hljs-string">&quot;阿里云短信测试&quot;</span>); <span class="hljs-comment">// 短信签名</span><br>        request.setTemplateCode(<span class="hljs-string">&quot;SMS_154950909&quot;</span>);   <span class="hljs-comment">// 短信模板</span><br>        request.setPhoneNumbers(phone); <span class="hljs-comment">// 发送的手机号</span><br>        request.setTemplateParam(<span class="hljs-string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span> + code + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);    <span class="hljs-comment">// 发送的验证码</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 发送短信</span><br>            <span class="hljs-type">SendSmsResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.getAcsResponse(request);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span>.equals(response.getCode());<br>        &#125; <span class="hljs-keyword">catch</span> (ServerException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;ErrCode:&quot;</span> + e.getErrCode());<br>            System.out.println(<span class="hljs-string">&quot;ErrMsg:&quot;</span> + e.getErrMsg());<br>            System.out.println(<span class="hljs-string">&quot;RequestId:&quot;</span> + e.getRequestId());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nuxt</title>
    <link href="/2022/11/07/%E5%89%8D%E7%AB%AF/nuxt/nuxt/"/>
    <url>/2022/11/07/%E5%89%8D%E7%AB%AF/nuxt/nuxt/</url>
    
    <content type="html"><![CDATA[<h2 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h2><blockquote><p>服务端渲染：服务端渲染又称SSR (Server Side Render)是在服务端完成页面的内容，而不是在客户端通过AJAX获取数据。</p><p>Nuxt：Nuxt.js 是一个基于 Vue.js 的轻量级应用框架,可用来创建服务端渲染 (SSR) 应用,也可充当静态站点引擎生成静态站点应用,具有优雅的代码结构分层和热加载等特性。</p></blockquote><p><a href="https://www.nuxtjs.org.cn/">官网</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Nuxt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Nuxt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>easyExcel</title>
    <link href="/2022/10/14/%E5%85%B6%E4%BB%96/easyExcel/"/>
    <url>/2022/10/14/%E5%85%B6%E4%BB%96/easyExcel/</url>
    
    <content type="html"><![CDATA[<h2 id="easyExcel"><a href="#easyExcel" class="headerlink" title="easyExcel"></a>easyExcel</h2><blockquote><p>EasyExcel是一个基于Java的、快速、简洁、解决大文件内存溢出的Excel处理工具。<br>他能让你在不用考虑性能、内存的等因素的情况下，快速完成Excel的读、写等功能。</p></blockquote><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类的属性上添加注解，设置Excel表表头信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserData</span> &#123;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;用户编号&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;用户名称&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写入内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testWrite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 文件路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\excel\\01.xlsx&quot;</span>;<br><br>        <span class="hljs-comment">// 要写入的内容</span><br>        ArrayList&lt;UserData&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserData</span>(i, <span class="hljs-string">&quot;name&quot;</span> + i));<br>        &#125;<br><br>        <span class="hljs-comment">// 写入excel表</span><br>        EasyExcel.write(fileName, UserData.class)<br>                .sheet(<span class="hljs-string">&quot;用户信息&quot;</span>)  <span class="hljs-comment">// excel表表名</span><br>                .doWrite(list);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/else_img/easyExcel1.png"></p></li></ul><h3 id="读出"><a href="#读出" class="headerlink" title="读出"></a>读出</h3><ul><li><p>实体类上要添加相对应的列号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExcelProperty(value = &quot;用户编号&quot;, index = 0)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;<br><br><span class="hljs-meta">@ExcelProperty(value = &quot;用户名称&quot;, index = 1)</span><br><span class="hljs-keyword">private</span> String username;<br></code></pre></td></tr></table></figure></li><li><p>编写监听方法，当读取excel时会执行此监听方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;UserData&gt; &#123;<br><br>    <span class="hljs-comment">// 一行行读取excel内容，从第二行开始读取</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(UserData userData, AnalysisContext analysisContext)</span> &#123;<br>        System.out.println(userData);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 读取表头信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;<br>        System.out.println(headMap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读出内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRead</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\excel\\01.xlsx&quot;</span>;<br><br>        EasyExcel.read(fileName,<br>                UserData.class,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelListener</span>()).sheet().doRead();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/else_img/easyExcel2.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-element-admin简单使用</title>
    <link href="/2022/10/13/%E5%89%8D%E7%AB%AF/vue-element-admin/vue-element-admin%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/13/%E5%89%8D%E7%AB%AF/vue-element-admin/vue-element-admin%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-element-admin简单使用"><a href="#vue-element-admin简单使用" class="headerlink" title="vue-element-admin简单使用"></a>vue-element-admin简单使用</h2><h3 id="控制面板添加路由"><a href="#控制面板添加路由" class="headerlink" title="控制面板添加路由"></a>控制面板添加路由</h3><ul><li><p>在<code>router/index.js</code>文件中添加路由，就会显示到面板上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自己添加的路由</span><br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/hospSet&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/hospSet/list&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;医院设置管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span>&#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/list&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;医院设置列表&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/i18n-demo/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;医院设置列表&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/add&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;医院设置列表添加&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/i18n-demo/index&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;医院设置列表添加&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure></li><li><p>将组件文件地址换成自己的</p></li><li><p>配置个自己的axios来发送请求</p></li><li><p>在<code>api</code>文件夹下创建发送请求的js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/myAxios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHospSetList</span>(<span class="hljs-params">current, limit, searchObj</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`/admin/hosp/hospitalSet/findPage/<span class="hljs-subst">$&#123;current&#125;</span>/<span class="hljs-subst">$&#123;limit&#125;</span>`</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">data</span>: searchObj<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>vue-element-admin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装vue-element-admin</title>
    <link href="/2022/10/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E5%AE%89%E8%A3%85vue-element-admin/"/>
    <url>/2022/10/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E5%AE%89%E8%A3%85vue-element-admin/</url>
    
    <content type="html"><![CDATA[<h2 id="安装vue-element-admin"><a href="#安装vue-element-admin" class="headerlink" title="安装vue-element-admin"></a>安装vue-element-admin</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/panjiachen/</span>vue-element-admin.git client-action<br><br>cd client-action<br><br>git branch -a<br><br>git checkout -b i18n remotes<span class="hljs-regexp">/origin/i</span>18n<br><br>git config --global url.<span class="hljs-string">&quot;https://&quot;</span>.insteadOf git:<span class="hljs-regexp">//</span><br><br>npm install<br><br>npm run dev<br></code></pre></td></tr></table></figure><ul><li>需要切换分支到 i18n，否则不支持国际化（中文）功能</li><li>npm install 要多试几次，因为中间会连接 gitbub 下载一些依赖，网络不稳定会导致失败</li><li>npm run dev 运行后回自动打开浏览器，使用的端口是 9527</li><li>安装失败可以试试<a href="https://blog.csdn.net/qq_43271844/article/details/125865607">npm install 安装tui-editor报错解决_Thorold’s Deer的博客-CSDN博客_tui-editor vue</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebPack打包工具</title>
    <link href="/2022/10/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/WebPack%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/10/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/WebPack%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="WebPack打包工具"><a href="#WebPack打包工具" class="headerlink" title="WebPack打包工具"></a>WebPack打包工具</h2><blockquote><p>Webpack 是一个前端资源加载&#x2F;打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 </p></blockquote><ul><li><p>全局安装</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g webpack webpack-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li><p>创建配置文件<code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span> <span class="hljs-comment">//Node.js内置模块</span><br><span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">resolve</span>()<br><br><span class="hljs-comment">// 打包的是js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>, <span class="hljs-comment">//配置入口文件</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), <span class="hljs-comment">//输出路径，__dirname：当前文件所在路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span><span class="hljs-comment">//输出文件</span><br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建dist文件夹，用于放置打包后的文件</p></li><li><p>执行打包命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">webpack <span class="hljs-attribute">--mode</span>=development<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建前端项目</title>
    <link href="/2022/10/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/12/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建前端项目"><a href="#搭建前端项目" class="headerlink" title="搭建前端项目"></a>搭建前端项目</h2><blockquote><p>npm包管理工具</p></blockquote><ul><li><p>查看npm版本</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> -v<br></code></pre></td></tr></table></figure></li><li><p>在项目文件夹下，项目初始化</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init<br><br><span class="hljs-comment"># 之后按照提示输入相关信息</span><br><span class="hljs-comment"># 或者加个-y参数，直接只生成一个package.json文件</span><br></code></pre></td></tr></table></figure></li><li><p>修改npm镜像</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure></li><li><p>查看npm配置信息</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config list<br></code></pre></td></tr></table></figure></li><li><p>下载依赖(全局&#x2F;当前项目)</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">npm install</span> <span class="hljs-title">[</span><span class="hljs-literal">--</span><span class="hljs-comment">global/</span><span class="hljs-literal">--</span><span class="hljs-comment">save</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span><span class="hljs-title">]</span> <span class="hljs-comment">依赖名</span><br></code></pre></td></tr></table></figure></li><li><p>在package.json文件中添加<code>&quot;type&quot;: &quot;module&quot;</code>就可使用<code>import</code>来导入其他模块</p></li></ul><blockquote><p>npm管理的项目在备份和传输的时候一般不携带node_modules文件夹</p><p>安装会自动在项目目录下添加 package-lock.json文件，这个文件帮助锁定安装包的版本</p><p>npm install     #根据package.json中的配置下载依赖，初始化项目</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义异常处理器</title>
    <link href="/2022/10/11/spring/springboot/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/2022/10/11/spring/springboot/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义异常处理器"><a href="#自定义异常处理器" class="headerlink" title="自定义异常处理器"></a>自定义异常处理器</h2><p><strong>案例</strong></p><ul><li><p>自定义异常类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.xw.yygh.common.exception;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义全局异常类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(value = <span class="hljs-string">&quot;自定义全局异常类&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YyghException</span> <span class="hljs-title">extends</span> <span class="hljs-title">RuntimeException</span> &#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = <span class="hljs-string">&quot;异常状态码&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过状态码和错误消息创建异常对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> YyghException(String message, Integer code) &#123;<br>        <span class="hljs-keyword">super</span>(message);<br>        <span class="hljs-keyword">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接收枚举类型对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resultCodeEnum</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> YyghException(ResultCodeEnum resultCodeEnum) &#123;<br>        <span class="hljs-keyword">super</span>(resultCodeEnum.getMessage());<br>        <span class="hljs-keyword">this</span>.code = resultCodeEnum.getCode();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String toString() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;YyghException&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                <span class="hljs-string">&quot;, message=&quot;</span> + <span class="hljs-keyword">this</span>.getMessage() +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>添加全局异常处理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jaba">package com.xw.yygh.common.exception;<br><br>@ControllerAdvice<br>@ResponseBody<br>public class GlobalExceptionHandler &#123;<br><br>    // 处理自定义异常<br>    @ExceptionHandler(YyghException.class)<br>    public Result error(YyghException e) &#123;<br>        e.printStackTrace();<br>        return Result.fail();<br>    &#125;<br><br>    // 处理Exception异常<br>    @ExceptionHandler(Exception.class)<br>    public Result error(Exception e) &#123;<br>        e.printStackTrace();<br>        return Result.fail();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
      <category>springBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot输出日志到文件</title>
    <link href="/2022/10/11/spring/springboot/SpringBoot%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6/"/>
    <url>/2022/10/11/spring/springboot/SpringBoot%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97%E5%88%B0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot输出日志到文件"><a href="#SpringBoot输出日志到文件" class="headerlink" title="SpringBoot输出日志到文件"></a>SpringBoot输出日志到文件</h2><p>日志记录器（Logger）的行为等级，越往下日志越详细：</p><ul><li>OFF</li><li>FATA</li><li>ERROR</li><li>WARN</li><li>INFO</li><li>DEBUG</li><li>ALL</li></ul><p>通过配置文件设置<code>logging.level.root=</code>来设置日志级别</p><p>要想输出日志文件，需要在resource目录下编写logback-spring.xml文件</p><p>之后就会输出到文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br>    <span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;F:/yygh_log&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- boldMagenta:粗红--&gt;</span><br>    <span class="hljs-comment">&lt;!-- cyan:青色 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- white:白色 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br>        <span class="hljs-comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="hljs-comment">        &lt;logger&gt;仅有一个name属性，</span><br><span class="hljs-comment">        一个可选的level和一个可选的addtivity属性。</span><br><span class="hljs-comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="hljs-comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="hljs-comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--开发环境:打印控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.guli&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="hljs-comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span><br><span class="hljs-comment">            可以包含零个或多个appender元素。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--生产环境:输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pro&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
      <category>springBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MP逻辑删除</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="MP逻辑删除"><a href="#MP逻辑删除" class="headerlink" title="MP逻辑删除"></a>MP逻辑删除</h2><blockquote><p>删除数据只是逻辑上删除，数据库中还能查到</p></blockquote><p>使用场景：</p><ul><li><p>可以进行数据恢复</p></li><li><p>有关联数据，不便删除</p></li><li><p>表中添加<code>deleted</code>字段，类型为boolean默认值为false</p></li><li><p>修改实体类，添加<code>deleted</code>字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></table></figure></li><li><p>配置(下面是默认配置，可配可不配)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 逻辑删除</span><br><span class="hljs-attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据库</category>
      
      <category>mysql</category>
      
      <category>mybatis-plus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MP分页插件</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="MP分页插件"><a href="#MP分页插件" class="headerlink" title="MP分页插件"></a>MP分页插件</h2><ul><li><p>在mp配置类中添加分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页插件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试selectPage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectPage</span><span class="hljs-params">()</span> &#123;<br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    Page&lt;User&gt; userPage = mapper.selectPage(page, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//返回对象得到分页所有数据</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">pages</span> <span class="hljs-operator">=</span> userPage.getPages(); <span class="hljs-comment">//总页数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> userPage.getCurrent(); <span class="hljs-comment">//当前页</span><br>    List&lt;User&gt; records = userPage.getRecords(); <span class="hljs-comment">//查询数据集合</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> userPage.getTotal(); <span class="hljs-comment">//总记录数</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasNext</span> <span class="hljs-operator">=</span> userPage.hasNext();  <span class="hljs-comment">//下一页</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasPrevious</span> <span class="hljs-operator">=</span> userPage.hasPrevious(); <span class="hljs-comment">//上一页</span><br><br>    System.out.println(pages);<br>    System.out.println(current);<br>    System.out.println(records);<br>    System.out.println(total);<br>    System.out.println(hasNext);<br>    System.out.println(hasPrevious);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据库</category>
      
      <category>mysql</category>
      
      <category>mybatis-plus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MP乐观锁</title>
    <link href="/2022/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E4%B9%90%E8%A7%82%E9%94%81/"/>
    <url>/2022/10/11/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E4%B9%90%E8%A7%82%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h2 id="MP乐观锁"><a href="#MP乐观锁" class="headerlink" title="MP乐观锁"></a>MP乐观锁</h2><ul><li><p>在mp配置类中添加乐观锁插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 乐观锁插件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title function_">optimisticLockerInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInterceptor</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>给类上添加<code>version</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure></li><li><p>插入时自动填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),metaObject);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),metaObject);<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;version&quot;</span>,<span class="hljs-number">1</span>,metaObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>每次要修改时先查询出要修改的数据，修改后再放回数据库，version值会自动加一</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据库</category>
      
      <category>mysql</category>
      
      <category>mybatis-plus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10.Vuex</title>
    <link href="/2022/10/09/%E5%89%8D%E7%AB%AF/vue/10.Vuex/"/>
    <url>/2022/10/09/%E5%89%8D%E7%AB%AF/vue/10.Vuex/</url>
    
    <content type="html"><![CDATA[<h2 id="10-Vuex"><a href="#10-Vuex" class="headerlink" title="10.Vuex"></a>10.Vuex</h2><blockquote><p>vuex 可以在多个组件之间<strong>共享数据</strong>，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p></blockquote><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><blockquote><p>通过vuex实现多个view间共享数据</p></blockquote><p>在src&#x2F;store目录下修改index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-comment">// 共享数据</span><br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br><br>    <span class="hljs-comment">// 修改数据</span><br>    <span class="hljs-title function_">updateName</span>(<span class="hljs-params">state, newName</span>) &#123;<br>      state.<span class="hljs-property">name</span> = newName<br>    &#125;<br><br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>P1View.vue添加数据</p><blockquote><p>通过this.$store.commit调用方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;p&quot;&gt;<br>        &lt;el-input placeholder=&quot;请修改用户姓名&quot; <br>            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;<br>        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;update()&quot;&gt;修改&lt;/el-button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    data() &#123;<br>        return &#123;<br>            name: &#x27;&#x27;<br>        &#125;<br>    &#125;,<br><br>    methods: &#123;<br>        update() &#123;<br>            // sessionStorage.setItem(&#x27;name&#x27;, this.name)<br>            // 修改共享数据<br>            this.$store.commit(&#x27;updateName&#x27;, this.name);<br>        &#125;<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>ContainerView.vue获取数据</p><blockquote><p>通过$store.state.name插入数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;el-container&gt;<br>            &lt;el-header&gt;<br>                &lt;div class=&quot;t&quot;&gt;欢迎您：&#123;&#123;name&#125;&#125;&lt;/div&gt;<br>            &lt;/el-header&gt;<br>            &lt;el-container&gt;<br>                &lt;el-aside width=&quot;200px&quot;&gt;<br>                &lt;/el-aside&gt;<br>                &lt;el-main&gt;<br>                    &lt;router-view&gt;&lt;/router-view&gt;<br>                &lt;/el-main&gt;<br>            &lt;/el-container&gt;<br>        &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>const options = &#123;<br>    computed: &#123;<br>        name() &#123;<br>            return this.$store.state.name<br>        &#125;<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="方法获取共享属性和修改方法"><a href="#方法获取共享属性和修改方法" class="headerlink" title="方法获取共享属性和修改方法"></a>方法获取共享属性和修改方法</h3><blockquote><p>调用vuex中的方法都是先导入mapXxx（Vuex.Store中的属性名）</p><p>再传入要调用&#x2F;使用的方法名&#x2F;共享属性名</p></blockquote><blockquote><p>mapState方法，生成共享属性对应的计算属性，<code>...</code>解构到computed中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;el-container&gt;<br>            &lt;el-header&gt;<br>                &lt;div class=&quot;t&quot;&gt;欢迎您：&#123;&#123;name&#125;&#125;&#123;&#123;age&#125;&#125;&lt;/div&gt;<br>            &lt;/el-header&gt;<br>            &lt;el-container&gt;<br>                &lt;el-aside width=&quot;200px&quot;&gt;<br>                &lt;/el-aside&gt;<br>                &lt;el-main&gt;<br>                    &lt;router-view&gt;&lt;/router-view&gt;<br>                &lt;/el-main&gt;<br>            &lt;/el-container&gt;<br>        &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123;mapState&#125; from &#x27;vuex&#x27;<br><br>const options = &#123;<br>    computed: &#123;<br>        // 通过mapState方法，生成共享属性对应的计算属性<br>        ...mapState([&#x27;name&#x27;, &#x27;age&#x27;])<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>通过mapMutations方法，获取修改方法，<code>...</code>解构到methods中</p><p>参数在绑定click时传入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;p&quot;&gt;<br>        &lt;el-input placeholder=&quot;请修改用户姓名&quot; <br>            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;<br>            &lt;el-input placeholder=&quot;请修改用户年龄&quot; <br>            size=&quot;mini&quot; v-model=&quot;age&quot;&gt;&lt;/el-input&gt;<br>        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;updateName(name);updateAge(age)&quot;&gt;修改&lt;/el-button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import &#123;mapMutations&#125; from &#x27;vuex&#x27;<br><br>const options = &#123;<br>    data() &#123;<br>        return &#123;<br>            name: &#x27;&#x27;,<br>            age: &#x27;&#x27;<br>        &#125;<br>    &#125;,<br><br>    methods: &#123;<br>        // 通过mapMutations方法，获取修改方法<br>        ...mapMutations([&#x27;updateName&#x27;, &#x27;updateAge&#x27;])<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="使调试工具不延迟展示"><a href="#使调试工具不延迟展示" class="headerlink" title="使调试工具不延迟展示"></a>使调试工具不延迟展示</h3><blockquote><p>如果在mutations中包含异步操作，可能会导致开发工具显示不准确</p><p>将异步操作放到actions中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br><br>   <span class="hljs-comment">// 修改数据</span><br>   <span class="hljs-title function_">updateName</span>(<span class="hljs-params">state, newName</span>) &#123;<br>     state.<span class="hljs-property">name</span> = newName<br>   &#125;,<br><br>   <span class="hljs-title function_">updateAge</span>(<span class="hljs-params">state, newAge</span>) &#123;<br>     state.<span class="hljs-property">age</span> = newAge<br>   &#125;,<br><br>   <span class="hljs-comment">// 从服务器获取用户名年龄</span><br>   <span class="hljs-comment">// 如果在mutations中包含异步操作，可能会导致开发工具显示不准确</span><br>   <span class="hljs-keyword">async</span> <span class="hljs-title function_">updateServerName</span>(<span class="hljs-params">state, user</span>) &#123;<br>     <span class="hljs-keyword">const</span> &#123;name, age&#125; = user<br>     state.<span class="hljs-property">name</span> = name<br>     state.<span class="hljs-property">age</span> = age<br>   &#125;<br><br> &#125;,<br> <span class="hljs-attr">actions</span>: &#123;<br>   <span class="hljs-keyword">async</span> <span class="hljs-title function_">updateServerName</span>(<span class="hljs-params">context</span>) &#123;<br>     <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/user&#x27;</span>)<br>     <span class="hljs-comment">// 通过context调用mutations中的方法</span><br>     context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateServerName&#x27;</span>, resp.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>)<br>   &#125;<br> &#125;,<br></code></pre></td></tr></table></figure><p>在调用时通过调用actions中的方法间接调用mutations中的方法</p><blockquote><p>通过mapActions调用actions中的方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import &#123;mapActions&#125; from &#x27;vuex&#x27;<br>const options = &#123;<br>    methods: &#123;<br>        ...mapActions([&#x27;updateServerName&#x27;])<br>    &#125;<br>&#125;<br>export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.导航菜单</title>
    <link href="/2022/10/08/%E5%89%8D%E7%AB%AF/elementUI/7.%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/"/>
    <url>/2022/10/08/%E5%89%8D%E7%AB%AF/elementUI/7.%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h2 id="7-导航菜单"><a href="#7-导航菜单" class="headerlink" title="7.导航菜单"></a>7.导航菜单</h2><p><strong>案例</strong></p><blockquote><p>el-menu 里的router属性：是否使用 vue-router 的模式，启用该模式会在激活导航时以 index 作为 path 进行路由跳转</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;el-container&gt;<br><br>        &lt;!-- 顶部 --&gt;<br>        &lt;el-header&gt;<br>            <br>            &lt;el-button icon=&quot;el-icon-search&quot; circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c/p1&#x27;)&quot;&gt;&lt;/el-button&gt;<br>            &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c/p2&#x27;)&quot;&gt;&lt;/el-button&gt;<br>            &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c/p3&#x27;)&quot;&gt;&lt;/el-button&gt;<br><br>        &lt;/el-header&gt;<br><br>        &lt;el-container&gt;<br><br>            &lt;!-- 侧边栏 --&gt;<br>            &lt;el-aside width=&quot;200px&quot;&gt;<br><br>                &lt;!-- 导航栏 --&gt;<br>                &lt;el-menu<br>                    router<br>                    background-color=&quot;#545c64&quot;<br>                    text-color=&quot;#fff&quot;<br>                    active-text-color=&quot;#ffd04b&quot;&gt;<br>                    <br>                    &lt;!-- 选项 --&gt;<br>                    &lt;el-menu-item index=&quot;/c/p1&quot;&gt;<br>                        &lt;!-- 用span将元素组合在一起，不然可能会错位 --&gt;<br>                        &lt;span slot=&quot;title&quot;&gt;<br>                            &lt;i class=&quot;el-icon-setting&quot;&gt;&lt;/i&gt;<br>                            菜单1<br>                        &lt;/span&gt;<br>                    &lt;/el-menu-item&gt;<br>                        &lt;el-submenu&gt;<br>                            <br>                            &lt;span slot=&quot;title&quot;&gt;<br>                                &lt;i class=&quot;el-icon-star-off&quot;&gt;&lt;/i&gt;<br>                                菜单2<br>                            &lt;/span&gt;<br>                        &lt;el-menu-item&gt;子项1&lt;/el-menu-item&gt;<br>                        &lt;el-menu-item&gt;子项2&lt;/el-menu-item&gt;<br>                        &lt;el-menu-item&gt;子项3&lt;/el-menu-item&gt;<br>                    &lt;/el-submenu&gt;<br>                    <br>                    &lt;el-menu-item index=&quot;/c/p3&quot;&gt;<br>                        &lt;span slot=&quot;title&quot;&gt;<br>                            &lt;i class=&quot;el-icon-phone&quot;&gt;&lt;/i&gt;<br>                            菜单3<br>                        &lt;/span&gt;<br>                    &lt;/el-menu-item&gt;<br><br>                &lt;/el-menu&gt;<br><br>            &lt;/el-aside&gt;<br><br>            &lt;!-- 主分区 --&gt;<br>            &lt;el-main&gt;<br>                &lt;router-view&gt;&lt;/router-view&gt;<br>            &lt;/el-main&gt;<br><br>        &lt;/el-container&gt;<br>        &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95.png"></p><p><strong>案例</strong></p><blockquote><p>动态添加菜单</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;el-container&gt;<br>            &lt;el-header&gt;&lt;/el-header&gt;<br>            &lt;el-container&gt;<br>                &lt;el-aside width=&quot;200px&quot;&gt;<br>                    &lt;!-- 动态菜单 --&gt;<br>                    &lt;el-menu router<br>                        default-active=&quot;2&quot;<br>                        class=&quot;el-menu-vertical-demo&quot;<br>                        @open=&quot;handleOpen&quot;<br>                        @close=&quot;handleClose&quot;<br>                        background-color=&quot;#545c64&quot;<br>                        text-color=&quot;#fff&quot;<br>                        active-text-color=&quot;#ffd04b&quot;<br>                        unique-opened&gt;<br>                        &lt;template v-for=&quot;m1 of top&quot;&gt;<br>                            &lt;el-submenu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;<br>                                &lt;span slot=&quot;title&quot;&gt;<br>                                    &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt;<br>                                    &#123;&#123;m1.name&#125;&#125;<br>                                &lt;/span&gt;<br>                                &lt;el-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot; :index=&quot;m2.path&quot;&gt;<br>                                    &lt;span slot=&quot;title&quot;&gt;<br>                                        &lt;i :class=&quot;m2.icon&quot;&gt;&lt;/i&gt;<br>                                        &#123;&#123;m2.name&#125;&#125;<br>                                    &lt;/span&gt;<br>                                &lt;/el-menu-item&gt;<br>                            &lt;/el-submenu&gt;<br>                            &lt;el-menu-item v-else :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;<br>                                &lt;span slot=&quot;title&quot;&gt;<br>                                    &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt;<br>                                    &#123;&#123;m1.name&#125;&#125;<br>                                &lt;/span&gt;<br>                            &lt;/el-menu-item&gt;<br>                        &lt;/template&gt;<br>                    &lt;/el-menu&gt;<br><br>                &lt;/el-aside&gt;<br>                &lt;el-main&gt;&lt;/el-main&gt;<br>            &lt;/el-container&gt;<br>            &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br><br><br><br><br>&lt;script&gt;<br>const options = &#123;<br>    data() &#123;<br>        return &#123;    <br>            top: []<br>        &#125;<br>    &#125;, <br><br>    mounted() &#123;<br>        // 页面加载时，获取sessionStorage中的信息<br>        const serverRouters = sessionStorage.getItem(&#x27;serverRoutes&#x27;);<br>        const array = JSON.parse(serverRouters)<br><br>        // 解析数据<br>        const map = new Map()<br>        for (const obj of array) &#123;<br>            map.set(obj.id, obj)<br>        &#125;<br>        // 将子菜单放到父菜单下<br>        const top = []; // 根菜单<br>        for (const obj of array) &#123;<br>            const parent = map.get(obj.pid)<br>            if (parent) &#123;<br>                parent.children ??= []<br>                parent.children.push(obj)<br>            &#125; else &#123;<br>                top.push(obj);<br>            &#125;<br>        &#125;<br>        this.top = top<br>    &#125;<br><br><br>&#125;<br>export default options;<br>&lt;/script&gt;<br><br><br><br><br><br><br>&lt;style scoped&gt;<br>.container &#123;<br>    height: 500px;<br>    background-color: cornsilk;<br>    background-image: url(&quot;data:image/svg+xml,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Ctext x=&#x27;15&#x27; y=&#x27;10&#x27; font-size=&#x27;14&#x27; font-family=&#x27;system-ui, sans-serif&#x27; text-anchor=&#x27;middle&#x27; dominant-baseline=&#x27;middle&#x27;%3E主页%3C/text%3E%3C/svg%3E&quot;);<br>    padding: 20px;<br>    box-sizing: border-box;<br>&#125;<br><br>.el-container &#123;<br>    height: 100%;<br>&#125;<br><br>.el-header &#123;<br>    background-color: aquamarine;<br>&#125;<br><br>.el-aside &#123;<br>    background-color: gold;<br>&#125;<br><br>.el-main &#123;<br>    background-color: dodgerblue;<br>&#125;<br><br>a &#123;<br>    text-decoration: none;<br>    display: block;<br>    margin: 10px 10px 0 10px;<br>    padding: 3px;<br>    font-size: 13px;<br>&#125;<br><br>.router-link-active &#123;<br>    color: #fff;<br>    background-color: darkslateblue;<br>&#125;<br><br>.el-button &#123;<br>    margin-top: 15px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E5%8A%A8%E6%80%81%E8%8F%9C%E5%8D%95.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.布局容器</title>
    <link href="/2022/10/08/%E5%89%8D%E7%AB%AF/elementUI/6.%E5%B8%83%E5%B1%80%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/10/08/%E5%89%8D%E7%AB%AF/elementUI/6.%E5%B8%83%E5%B1%80%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="6-布局容器"><a href="#6-布局容器" class="headerlink" title="6.布局容器"></a>6.布局容器</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/container#container-bu-ju-rong-qi">布局容器</a></p><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-container&gt;<br>  &lt;el-header&gt;Header&lt;/el-header&gt;<br>  &lt;el-container&gt;<br>    &lt;el-aside width=&quot;200px&quot;&gt;Aside&lt;/el-aside&gt;<br>    &lt;el-main&gt;Main&lt;/el-main&gt;<br>  &lt;/el-container&gt;<br>&lt;/el-container&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.路由</title>
    <link href="/2022/10/07/%E5%89%8D%E7%AB%AF/vue/9.%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/10/07/%E5%89%8D%E7%AB%AF/vue/9.%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="9-路由"><a href="#9-路由" class="headerlink" title="9.路由"></a>9.路由</h2><blockquote><p>vue 属于<strong>单页面应用</strong>，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p></blockquote><p>默认路由的配置是router目录下的index.js文件</p><p>可以根据这个文件来写路由</p><h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><ul><li>自定义路由文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 绝对路径导入，@表示src</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ContainerView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/example13/ContainerView.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LoginView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/example13/LoginView.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NotFoundView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/example13/NotFoundView.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 建立路径和组件之间的对应关系</span><br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">ContainerView</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">LoginView</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/404&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">NotFoundView</span><br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><ul><li>在入口main.js中导入编写的路由文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/example13&#x27;</span> <span class="hljs-comment">// 导入自定义的路由</span><br></code></pre></td></tr></table></figure><ul><li><p>修改主视图</p><blockquote><p> <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><blockquote><ul><li>静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度</li><li>动态导入是将组件的 js 代码放入独立的文件，用到时才加载</li></ul></blockquote><p><strong>案例</strong></p><p>将上面的静态导入改为动态导入</p><p>通过lambda表达式<code>() =&gt; import(&#39;文件路径&#39;)</code>来动态导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 绝对路径导入，@表示src</span><br><span class="hljs-comment">// import ContainerView from &#x27;@/views/example13/ContainerView.vue&#x27;</span><br><span class="hljs-comment">// import LoginView from &#x27;@/views/example13/LoginView.vue&#x27;</span><br><span class="hljs-comment">// import NotFoundView from &#x27;@/views/example13/NotFoundView.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 建立路径和组件之间的对应关系</span><br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/ContainerView.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/LoginView.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/404&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/NotFoundView.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><h3 id="嵌套导入"><a href="#嵌套导入" class="headerlink" title="嵌套导入"></a>嵌套导入</h3><blockquote><p>也叫子路由，组件内再要切换内容，就需要用到嵌套路由</p><p>通过children属性来定义嵌套路由</p></blockquote><p><strong>案例</strong></p><blockquote><p>定义嵌套路由和重定向</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  <span class="hljs-comment">// 建立路径和组件之间的对应关系</span><br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/ContainerView.vue&#x27;</span>),<br>    <span class="hljs-comment">// 重定向，相当于选择了默认的嵌套路由</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/c/p1&#x27;</span>,<br><span class="hljs-comment">// 嵌套路由</span><br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;c/p1&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/container/P1View.vue&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;c/p2&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/container/P2View.vue&#x27;</span>)<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;c/p3&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/container/P3View.vue&#x27;</span>)<br>      &#125;,<br>      <br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/LoginView.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/404&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/example13/NotFoundView.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br><span class="hljs-comment">// 从定向用法，访问不存在的路径跳转到指定的组件上去</span><br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span><br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>跳转方式：</p><ul><li>标签式：通过to属性实现跳转</li><li>编程式：自定义方法，通过this.$router.push(url)方式实现跳转</li></ul><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>        &lt;el-container&gt;<br>        &lt;el-header&gt;<br>            &lt;!-- 编程式 --&gt;<br>            &lt;el-button icon=&quot;el-icon-search&quot; circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c/p1&#x27;)&quot;&gt;&lt;/el-button&gt;<br>            &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c/p2&#x27;)&quot;&gt;&lt;/el-button&gt;<br>            &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle size=&quot;mini&quot; @click=&quot;jump(&#x27;/c/p3&#x27;)&quot;&gt;&lt;/el-button&gt;<br>        &lt;/el-header&gt;<br>        &lt;el-container&gt;<br>            &lt;el-aside width=&quot;200px&quot;&gt;<br>                &lt;!-- 标签式 --&gt;<br>                &lt;router-link to=&quot;/c/p1&quot;&gt;p1&lt;/router-link&gt;<br>                &lt;router-link to=&quot;/c/p2&quot;&gt;p2&lt;/router-link&gt;<br>                &lt;router-link to=&quot;/c/p3&quot;&gt;p3&lt;/router-link&gt;<br>            &lt;/el-aside&gt;<br>            &lt;el-main&gt;<br>                &lt;router-view&gt;&lt;/router-view&gt;<br>            &lt;/el-main&gt;<br>        &lt;/el-container&gt;<br>        &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    const options = &#123;<br>        methods: &#123;<br>            jump(url) &#123;<br>                // 根据路径进行跳转<br>                this.$router.push(url);<br>            &#125;<br>        &#125;<br>    &#125;<br>    export default options;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><blockquote><p>从后端动态的获取路由信息添加到路由中</p></blockquote><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;login&quot;&gt;<br>        &lt;el-input v-model=&quot;username&quot; placeholder=&quot;请输入用户名&quot; size=&quot;mini&quot;&gt;&lt;/el-input&gt;<br>        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;login()&quot;&gt;登录&lt;/el-button&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    import axios from &#x27;../../utils/myaxios.js&#x27;<br>    import &#123;resetRouter&#125; from &#x27;@/router/example14&#x27;<br><br>    const options = &#123;<br>        data() &#123;<br>            return &#123;<br>                username: &#x27;admin&#x27;<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            // 将登录用户可以访问的路径添加到路由中<br>            async login() &#123;<br>                resetRouter();<br>                const resp = await axios.get(`/api/menu/$&#123;this.username&#125;`)<br>                for (const &#123;id, path, component&#125; of resp.data.data) &#123;<br>                    if (component !== null) &#123;<br>                        // 在父路由中添加路由<br>                        this.$router.addRoute(&#x27;c&#x27;, &#123;<br>                            path: path,<br>                            name: id,<br>                            component: () =&gt; import(`@/views/example14/container/$&#123;component&#125;`)<br>                        &#125;)<br>                    &#125;<br>                &#125;<br>                <br>                // 打印路由<br>                console.log(this.$router.getRoutes())<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    export default options;<br>&lt;/script&gt;<br><br><br><br><br><br>&lt;style scoped&gt;<br>.login &#123;<br>    height: 100%;<br>    background-color: darkseagreen;<br>    /* background-image: url(&quot;data:image/svg+xml,%3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27;%3E%3Ctext x=&#x27;15&#x27; y=&#x27;10&#x27; font-size=&#x27;14&#x27; font-family=&#x27;system-ui, sans-serif&#x27; text-anchor=&#x27;middle&#x27; dominant-baseline=&#x27;middle&#x27;%3E登录%3C/text%3E%3C/svg%3E&quot;); */<br>&#125;<br><br>.el-input--mini &#123;<br>    width: 193px;<br>    margin: 10px 10px 0 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><strong>保存路由信息</strong></p><p>每次刷新页面，路由信息都会丢失</p><p>将路由数据存到localStorage或sessionStorage可以在每次刷新时来恢复路由</p><p>router文件中</p><blockquote><p>抽出两个方法：重置路由和添加路由</p><p>还有每次运行时查询缓存</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查询sessionStorage中是否有缓存的路由信息</span><br><span class="hljs-keyword">const</span> serverRoutes = sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;serverRoutes&#x27;</span>)<br><span class="hljs-keyword">if</span> (serverRoutes) &#123;<br>  <span class="hljs-keyword">const</span> array = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(serverRoutes)<br>  <span class="hljs-title function_">addServerRoutes</span>(array)<br>&#125;<br><br><br><span class="hljs-comment">// 重置路由，新建一个路由，把空的matcher赋值给现在的路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">resetRouter</span>(<span class="hljs-params"></span>) &#123; <br>  router.<span class="hljs-property">matcher</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;routes&#125;).<span class="hljs-property">matcher</span><br>&#125;<br><br><span class="hljs-comment">// 添加路由信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addServerRoutes</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-title function_">resetRouter</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> &#123;id, path, component&#125; <span class="hljs-keyword">of</span> array) &#123;<br>      <span class="hljs-keyword">if</span> (component !== <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-comment">// 在父路由中添加路由</span><br>          router.<span class="hljs-title function_">addRoute</span>(<span class="hljs-string">&#x27;c&#x27;</span>, &#123;<br>              <span class="hljs-attr">path</span>: path,<br>              <span class="hljs-attr">name</span>: id,<br>              <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">`@/views/example14/container/<span class="hljs-subst">$&#123;component&#125;</span>`</span>)<br>          &#125;)<br>      &#125;<br>  &#125;<br>                <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.级联选择器</title>
    <link href="/2022/10/07/%E5%89%8D%E7%AB%AF/elementUI/5.%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2022/10/07/%E5%89%8D%E7%AB%AF/elementUI/5.%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="5-级联选择器"><a href="#5-级联选择器" class="headerlink" title="5.级联选择器"></a>5.级联选择器</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/cascader#cascader-ji-lian-xuan-ze-qi">级联选择器</a></p><p><strong>案例1</strong></p><ul><li>将静态数据写到级联选择器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-cascader :options=&quot;ops&quot;&gt;&lt;/el-cascader&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  // import axios from &#x27;../utils/myaxios&#x27;<br>  const options = &#123;<br>    data() &#123;<br>      return &#123;<br>        // 通过children来添加子选项,可嵌套多层<br>        ops: [<br>          &#123;value: 100, label: &#x27;主页&#x27;, children: [<br>            &#123;value: 101, label: &#x27;菜单1&#x27;, children:[<br>              &#123;value: 102, label: &#x27;菜单11&#x27;&#125;,<br>              &#123;value: 102, label: &#x27;菜单12&#x27;&#125;,<br>            ]&#125;,<br>            &#123;value: 102, label: &#x27;菜单2&#x27;&#125;,<br>            &#123;value: 103, label: &#x27;菜单3&#x27;&#125;,<br>          ]&#125;<br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A8.png"></p><p><strong>案例2</strong></p><ul><li>将后端数据写到级联选择器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-cascader :options=&quot;ops&quot; clearable&gt;&lt;/el-cascader&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;../utils/myaxios&#x27;<br>  const options = &#123;<br>    data() &#123;<br>      return &#123;<br>        ops: []<br>      &#125;<br>    &#125;,<br><br>    // 组件加载完后将数据填入<br>    async mounted() &#123;<br>      const resp = await axios.get(&#x27;/api/menu&#x27;)<br><br>      // 前端处理发来的数据<br>      const map = new Map()<br>      for (const &#123;id, name, pid&#125; of resp.data.data) &#123;<br>        // 将数据存到map中<br>        map.set(id, &#123;value: id, label: name, pid: pid&#125;)<br>      &#125;<br>      const root = []<br>      for (const obj of map.values()) &#123;<br>        const parent = map.get(obj.pid) // 获取父标签<br>        if (parent !== undefined) &#123;<br>          parent.children ??= []<br>          parent.children.push(obj) // 添加到父标签里<br>        &#125; else &#123;<br>          root.push(obj)  //没有父标签，该标签为根标签<br>        &#125;<br>      &#125;<br>      this.ops = root<br>    &#125;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E7%BA%A7%E8%81%94%E9%80%89%E6%8B%A9%E5%99%A82.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.搜索</title>
    <link href="/2022/10/07/%E5%89%8D%E7%AB%AF/elementUI/4.%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/10/07/%E5%89%8D%E7%AB%AF/elementUI/4.%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="4-搜索"><a href="#4-搜索" class="headerlink" title="4.搜索"></a>4.搜索</h2><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 搜索框 --&gt;<br>    &lt;el-input placeholder=&quot;请输入姓名&quot; size=&quot;mini&quot; v-model=&quot;queryDto.name&quot;&gt;&lt;/el-input&gt;<br>    &lt;!-- 下拉框 --&gt;<br>    &lt;el-select placeholder=&quot;请选择性别&quot; size=&quot;mini&quot; v-model=&quot;queryDto.sex&quot; clearable&gt;<br>      &lt;el-option value=&quot;男&quot;&gt;&lt;/el-option&gt;<br>      &lt;el-option value=&quot;女&quot;&gt;&lt;/el-option&gt;<br>    &lt;/el-select&gt;<br>    &lt;el-select placeholder=&quot;请选择年龄&quot; size=&quot;mini&quot; v-model=&quot;queryDto.age&quot; clearable&gt;<br>      &lt;el-option value=&quot;0,20&quot; label=&quot;0-20&quot;&gt;&lt;/el-option&gt;<br>      &lt;el-option value=&quot;21,30&quot; label=&quot;21-30&quot;&gt;&lt;/el-option&gt;<br>      &lt;el-option value=&quot;31,40&quot; label=&quot;31-40&quot;&gt;&lt;/el-option&gt;<br>      &lt;el-option value=&quot;41,120&quot; label=&quot;41-120&quot;&gt;&lt;/el-option&gt;<br>    &lt;/el-select&gt;<br><br>    &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;search&quot;&gt;搜索&lt;/el-button&gt;<br><br>    &lt;el-table :data=&quot;students&quot;&gt;<br>      &lt;!-- id是students的属性 --&gt;<br>      &lt;el-table-column lable=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br><br>    &lt;!-- 总记录数，每页大小，当前页, 组件布局 --&gt;<br>    &lt;!-- 改变当前页时触发，改变页大小时触发 --&gt;<br>    &lt;el-pagination <br>        :total=&quot;total&quot;     <br>        :page-size=&quot;queryDto.size&quot;<br>        :page-sizes=&quot;[5, 10]&quot;<br>        :current-page=&quot;queryDto.page&quot;<br>        layout=&quot;prev, pager, next, jumper, sizes, -&gt;, total&quot;<br>        @current-change=&quot;currentChange&quot;<br>        @size-change=&quot;sizeChange&quot;<br>    &gt;&lt;/el-pagination&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import axios from &#x27;../utils/myaxios&#x27;<br>  const options = &#123;<br>    data() &#123;<br>      return &#123;<br>        students: [],<br>        total: 0,<br>        // 查询条件<br>        queryDto: &#123;<br>          page: 1,<br>          size: 5,<br>          name: &#x27;&#x27;,<br>          sex: &#x27;&#x27;,<br>          age: &#x27;&#x27;<br>        &#125;<br>      &#125;<br>    &#125;,<br><br>    // 钩子函数, 数据挂载后, 视图的数据被Vue的替换<br>    mounted() &#123;<br>      // 发送请求，返回学生数据<br>      this.query();<br>    &#125;,<br><br>    methods: &#123;<br>      // 会返回页号<br>      currentChange(page) &#123;<br>        this.queryDto.page = page<br>        this.query();<br>      &#125;,<br><br>      // 返回页面大小<br>      sizeChange(size) &#123;<br>        this.queryDto.size = size<br>        this.query();<br>      &#125;,<br><br>      search() &#123;<br>        this.query()<br>      &#125;,<br><br>      // 通过此方法发送请求<br>      async query() &#123;<br>        const resp = await axios.get(&#x27;/api/students/q&#x27;, &#123;<br>          params: this.queryDto<br>        &#125;)<br>        //console.log(resp)<br>        this.students = resp.data.data.list<br>        this.total = resp.data.data.total<br>      &#125;<br>    &#125;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>  .el-input--mini,<br>  .el-search--mini &#123;<br>    width: 193px;<br>    margin: 10px 10px 0 0;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E6%90%9C%E7%B4%A2.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.分页组件</title>
    <link href="/2022/10/06/%E5%89%8D%E7%AB%AF/elementUI/3.%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/10/06/%E5%89%8D%E7%AB%AF/elementUI/3.%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="3-分页条组件"><a href="#3-分页条组件" class="headerlink" title="3.分页条组件"></a>3.分页条组件</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/pagination#pagination-fen-ye">分页条组件</a></p><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;students&quot;&gt;<br>      &lt;!-- id是students的属性 --&gt;<br>      &lt;el-table-column lable=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br><br>    &lt;!-- 总记录数，每页大小，当前页, 组件布局 --&gt;<br>    &lt;!-- 改变当前页时触发，改变页大小时触发 --&gt;<br>    &lt;el-pagination <br>        :total=&quot;total&quot;     <br>        :page-size=&quot;queryDto.size&quot;<br>        :page-sizes=&quot;[5, 10]&quot;<br>        :current-page=&quot;queryDto.page&quot;<br>        layout=&quot;prev, pager, next, jumper, sizes, -&gt;, total&quot;<br>        @current-change=&quot;currentChange&quot;<br>        @size-change=&quot;sizeChange&quot;<br>    &gt;&lt;/el-pagination&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import axios from &#x27;../utils/myaxios&#x27;<br>  const options = &#123;<br>    data() &#123;<br>      return &#123;<br>        students: [],<br>        total: 0,<br>        // 查询条件<br>        queryDto: &#123;<br>          page: 1,<br>          size: 10,<br>        &#125;<br>      &#125;<br>    &#125;,<br><br>    // 钩子函数, 数据挂载后, 视图的数据被Vue的替换<br>    mounted() &#123;<br>      // 发送请求，返回学生数据<br>      this.query();<br>    &#125;,<br><br>    methods: &#123;<br>      // 会返回页号<br>      currentChange(page) &#123;<br>        this.queryDto.page = page<br>        this.query();<br>      &#125;,<br><br>      // 返回页面大小<br>      sizeChange(size) &#123;<br>        this.queryDto.size = size<br>        this.query();<br>      &#125;,<br><br>      // 通过此方法发送请求<br>      async query() &#123;<br>        const resp = await axios.get(&#x27;/api/students/q&#x27;, &#123;<br>          params: this.queryDto<br>        &#125;)<br>        //console.log(resp)<br>        this.students = resp.data.data.list<br>        this.total = resp.data.data.total<br>      &#125;<br>    &#125;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E5%88%86%E9%A1%B5%E6%9D%A1%E7%BB%84%E4%BB%B6.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.表格组件</title>
    <link href="/2022/10/06/%E5%89%8D%E7%AB%AF/elementUI/2.%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/10/06/%E5%89%8D%E7%AB%AF/elementUI/2.%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="2-表格组件"><a href="#2-表格组件" class="headerlink" title="2.表格组件"></a>2.表格组件</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/table#table-biao-ge">表格组件</a></p><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-table :data=&quot;students&quot;&gt;<br>      &lt;!-- id、name等是students的属性 --&gt;<br>      &lt;el-table-column lable=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column lable=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import axios from &#x27;../utils/myaxios&#x27;<br>  const options = &#123;<br>    data() &#123;<br>      return &#123;<br>        students: []<br>      &#125;<br>    &#125;,<br>    // 钩子函数, 数据挂载后, 视图的数据被Vue的替换<br>    async mounted() &#123;<br>      // 发送请求，返回学生数据<br>      const resp = await axios.get(&#x27;/api/students&#x27;)<br>      this.students = resp.data.data<br>    &#125;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/qianduan_img/el%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.elementUI安装</title>
    <link href="/2022/10/06/%E5%89%8D%E7%AB%AF/elementUI/1.elementUI%E5%AE%89%E8%A3%85/"/>
    <url>/2022/10/06/%E5%89%8D%E7%AB%AF/elementUI/1.elementUI%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1-elementUI安装"><a href="#1-elementUI安装" class="headerlink" title="1.elementUI安装"></a>1.elementUI安装</h2><blockquote><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p></blockquote><p><strong>安装</strong></p><blockquote><p>在项目文件夹下</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install element-ui -S<br></code></pre></td></tr></table></figure><p><strong>引入组件</strong></p><blockquote><p>在main.js文件下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 导入elementui组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Element</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><br><span class="hljs-comment">// 全局导入</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Element</span>)<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-button&gt;按钮&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  const options = &#123;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8.重用组件</title>
    <link href="/2022/10/06/%E5%89%8D%E7%AB%AF/vue/8.%E9%87%8D%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/10/06/%E5%89%8D%E7%AB%AF/vue/8.%E9%87%8D%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="8-重用组件"><a href="#8-重用组件" class="headerlink" title="8.重用组件"></a>8.重用组件</h2><p><strong>案例</strong></p><p>子组件</p><blockquote><p>编写了一些css样式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br><br>    &lt;div class=&quot;button&quot; :class=&quot;[type, size]&quot;&gt;<br>        &lt;!-- 插槽，会将父标签的本文填充到里面 --&gt;<br>        &lt;slot&gt;&lt;/slot&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    const options = &#123;<br>        // 父组件使用时可以添加的属性<br>        props: [&quot;type&quot;, &quot;size&quot;]<br>    &#125;<br>    export default options;<br>&lt;/script&gt;<br><br>&lt;!-- 使用scoped可以让CSS样式只对局部元素生效 --&gt;<br>&lt;style scoped&gt;<br>.button &#123;<br>    display: inline-block;<br>    text-align: center;<br>    border-radius: 30px;<br>    margin: 5px;<br>    font: bold 12px/25px Arial, sans-serif;<br>    padding: 0 2px;<br>    text-shadow: 1px 1px 1px rgba(255, 255, 255, .22);<br>    box-shadow: 1px 1px 1px rgba(0, 0, 0, .29), inset 1px 1px 1px rgba(255, 255, 255, .44);<br>    transition: all 0.15s ease;<br>&#125;<br><br>.button:hover &#123;<br>    box-shadow: 1px 1px 1px rgba(0, 0, 0, .29), inset 1px 1px 2px rgba(0, 0, 0, .5);<br>&#125;<br><br>.button:active &#123;<br>    box-shadow: inset 1px 1px 2px rgba(0, 0, 0, .8);<br>&#125;<br><br>.primary &#123;<br>    background-color: #1d6ef9;<br>    color: #b5e3f1;<br>&#125;<br><br>.danger &#123;<br>    background-color: rgb(196, 50, 50);<br>    color: white;<br>&#125;<br><br>.success &#123;<br>    background-color: #a5cd4e;<br>    ;<br>    color: #3e5706;<br>&#125;<br><br>.small &#123;<br>    width: 40px;<br>    height: 20px;<br>    font-size: 10px;<br>    line-height: 20px;<br>&#125;<br><br>.middle &#123;<br>    width: 50px;<br>    height: 25px;<br>    font-size: 14px;<br>    line-height: 25px;<br>&#125;<br><br>.large &#123;<br>    width: 60px;<br>    height: 30px;<br>    font-size: 18px;<br>    line-height: 30px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>父组件</p><blockquote><p>调用子组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;父组件&lt;/h1&gt;<br>    &lt;!-- 使用子组件 --&gt;<br>    &lt;my-button type=&quot;primary&quot; size=&quot;small&quot;&gt;1&lt;/my-button&gt;<br>    &lt;my-button type=&quot;danger&quot; size=&quot;middle&quot;&gt;2&lt;/my-button&gt;<br>    &lt;my-button type=&quot;success&quot; size=&quot;large&quot;&gt;3&lt;/my-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  // 导入子组件<br>  import myButton from &#x27;../components/MyButton.vue&#x27;<br>  const options = &#123;<br>    // 添加要使用的子组件<br>    components: &#123;<br>      myButton<br>    &#125;<br>  &#125;<br>  export default options<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>  div &#123;<br>    background-color: gainsboro;<br>    widows: 100px;<br>    height: 400px;<br>  &#125;<br>  h1 &#123;<br>    font-family: 华文行楷;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios API</title>
    <link href="/2022/10/05/%E5%89%8D%E7%AB%AF/api/axios-API/"/>
    <url>/2022/10/05/%E5%89%8D%E7%AB%AF/api/axios-API/</url>
    
    <content type="html"><![CDATA[<h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><blockquote><p>axios 的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，</p><p>xhr 相对于之前讲过的 fetch api 来说，功能更强大，</p><p>但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p></blockquote><h3 id="通过npm安装"><a href="#通过npm安装" class="headerlink" title="通过npm安装"></a>通过npm安装</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在项目的文件夹下<br>npm install axios -S<br></code></pre></td></tr></table></figure><p>安装完后会在项目的node-modules文件夹下创建axios文件夹，和在package.json文件中导入axios依赖</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><strong>案例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    // 使用前先导入<br>    import axios from &#x27;axios&#x27;<br>    // axios<br>    const option = &#123;<br>        methods: &#123;<br>            async sendReq() &#123;<br>                // 通过axios发送同步get请求<br>                const resp = await axios.get(&quot;/api/students&quot;)<br>                console.log(resp)<br>            &#125;<br>        &#125;<br>    &#125;<br>    export default option<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><table><thead><tr><th>请求</th><th>备注</th></tr></thead><tbody><tr><td><strong>axios.get(url[, config])</strong></td><td></td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td><strong>axios.post(url[, data[, config]])</strong></td><td></td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr></tbody></table><p><strong>案例</strong></p><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xw.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AxiosController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/api/a1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;get request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a3&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a3</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;Authorization&quot;)</span> String authorization)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;authorization 头 &quot;</span> + authorization);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a4&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a4</span><span class="hljs-params">(String name, Integer age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + name + <span class="hljs-string">&quot; age:&quot;</span> + age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a5&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a5</span><span class="hljs-params">(A5 a5)</span> &#123;<br>        System.out.println(a5);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a5json&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a5json</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> A5 a5)</span> &#123;<br>        System.out.println(a5);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a6set&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a6set</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;========== a6 set ==========&quot;</span>);<br>        System.out.println(session.getId());<br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a6get&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a6get</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;========== a6 get ==========&quot;</span>);<br>        System.out.println(session.getId());<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>前端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    // 使用前先导入<br>    import axios from &#x27;axios&#x27;<br>    // axios<br>    const option = &#123;<br>        methods: &#123;<br>            async sendReq() &#123;<br>                // 1.通过axios发送同步get请求<br>                // const resp = await axios.get(&quot;/api/a1&quot;)<br><br>                // 2.通过axios发送同步post请求<br>                // const resp = await axios.post(&quot;/api/a2&quot;)<br><br>                // 3.axios请求中添加请求头（url，请求体数据，选项对象）<br>                // const resp = await axios.post(&quot;/api/a3&quot;, &#123;&#125;, &#123;<br>                //     headers: &#123;<br>                //         Authorization: &#x27;abc&#x27;<br>                //     &#125;<br>                // &#125;)<br><br>                // 4.1axios请求中携带参数（字符串拼接）<br>                // const name = encodeURIComponent(&#x27;!@#%$&#x27;) //编码后发送<br>                // const age = 20<br>                // const resp = await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`)<br><br>                // // 4.axios请求中携带参数（选项对象）<br>                // const resp = await axios.post(&#x27;/api/a4&#x27;, &#123;&#125;, &#123;<br>                //     params: &#123;<br>                //         name: &#x27;!@#%$&#x27;,  //会自动编码<br>                //         age: 20<br>                //     &#125;<br>                // &#125;)<br><br>                // 4.2axios请求中携带参数（请求体json）<br>                // 请求体中的是json格式，后端是通过参数名接收，故不能直接写在参数里<br>                // const params = new URLSearchParams()    // 通过URLSearchParams封装参数<br>                // params.append(&quot;name&quot;, &quot;张三&quot;)<br>                // params.append(&quot;age&quot;, 20)<br>                // const resp = await axios.post(&#x27;/api/a4&#x27;, params)<br><br>                // 4.3axios请求中携带参数（请求体multipart）<br>                // const params = new FormData()    // 通过FormData封装参数<br>                // params.append(&quot;name&quot;, &quot;张三&quot;)<br>                // params.append(&quot;age&quot;, 21)<br>                // const resp = await axios.post(&#x27;/api/a5&#x27;, params)<br><br>                // 4.4axios请求中携带参数（请求体json, 后端用对象接收）<br>                // 自动通过JSON.stringify转换为json<br>                const resp = await axios.post(&#x27;/api/a5json&#x27;, &#123;<br>                    name: &#x27;李四&#x27;,<br>                    age: 21<br>                &#125;)<br><br>                console.log(resp)<br>            &#125;<br>        &#125;<br>    &#125;<br>    export default option<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="axios配置"><a href="#axios配置" class="headerlink" title="axios配置"></a>axios配置</h3><p>常见config配置</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>baseURL</td><td>将自动加在 url 前面</td></tr><tr><td>headers</td><td>请求头，类型为简单对象</td></tr><tr><td>params</td><td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td></tr><tr><td>data</td><td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td></tr><tr><td>withCredentials</td><td>跨域时是否携带 Cookie 等凭证，默认为 false</td></tr><tr><td>responseType</td><td>响应类型，默认为 json</td></tr></tbody></table><p><strong>案例</strong></p><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-comment">//开启跨域和允许携带凭证</span><br><span class="hljs-meta">@CrossOrigin(value = &quot;http://localhost:7070&quot;, allowCredentials = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AxiosController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/api/a6set&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a6set</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;========== a6 set ==========&quot;</span>);<br>        System.out.println(session.getId());<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            模拟登录，将用户名存入session</span><br><span class="hljs-comment">        */</span><br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/a6get&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a6get</span><span class="hljs-params">(HttpSession session)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;========== a6 get ==========&quot;</span>);<br>        System.out.println(session.getId());<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;post request&quot;</span>;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p> 前端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    // 使用前先导入<br>    import axios from &#x27;axios&#x27;<br>    // axios<br>    const option = &#123;<br>        methods: &#123;<br>            async sendReq() &#123;                <br>                // axios配置<br>                const _axios = axios.create(&#123;<br>                    // 会被添加在每个请求url前<br>                    baseURL: &#x27;http://localhost:8080&#x27;,<br>                    // 跨域时是否携带 Cookie 等凭证，默认为 false<br>                    withCredentials: true<br>                &#125;)<br>                await _axios.post(&#x27;/api/a6set&#x27;, &#123;&#125;)<br>                await _axios.post(&#x27;/api/a6get&#x27;, &#123;&#125;)<br>            &#125;<br>        &#125;<br>    &#125;<br>    export default option<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据 :star:</td></tr><tr><td>status</td><td>状态码 :star:</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><ul><li>200 表示响应成功</li><li>400 请求数据不正确 age&#x3D;abc</li><li>401 身份验证没通过</li><li>403 没有权限</li><li>404 资源不存在</li><li>405 不支持请求方式 post</li><li>500 服务器内部错误</li></ul><h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><p><strong>请求拦截</strong></p><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">const _axios = axios.create(&#123;<br>    // 会被添加在每个请求url前<br>    baseURL: &#x27;http://localhost:8080&#x27;,<br>    // 跨域时是否携带 Cookie 等凭证，默认为 false<br>    withCredentials: true<br>&#125;)<br>// 请求拦截器<br>_axios.interceptors.request.use(<br>// 请求正常时<br>    function (config) &#123;<br>// 给每个请求都添加头Authorization<br>        config.headers = &#123;<br>        Authorization: &#x27;aaa.bbb.ccc&#x27;<br>    &#125;<br>    return config<br>    &#125;,<br>// 请求错误时<br>    function (error) &#123;<br>        return Promise.reject(error);<br>    &#125;<br>)<br>_axios.get(&quot;/api/students&quot;)<br></code></pre></td></tr></table></figure><p><strong>响应拦截器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 响应拦截器<br>_axios.interceptors.response.use(<br>    // 响应码在200之内<br>    function (response) &#123;<br>        console.log(&#x27;响应正常&#x27;)<br>        return response<br>&#125;,<br>    // 响应码大于200时<br>    function (error) &#123;<br>        if (error.response.status === 400) &#123;<br>        console.log(&#x27;请求参数错误&#x27;)<br>        &#125; else if (error.response.status === 500) &#123;<br>        console.log(&#x27;服务器错误&#x27;)<br>        &#125; else if (error.response.status === 404) &#123;<br>        console.log(&#x27;资源未找到&#x27;)<br>        &#125; else &#123;<br>        console.log(&#x27;未知错误&#x27;)<br>        &#125;<br>        return Promise.reject(error)<br>&#125;<br>)<br>_axios.get(&quot;/api/students&quot;)<br></code></pre></td></tr></table></figure><p>可以将配置好的axios抽出来成为一个工具类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs vue">// axios工具类<br>import axios from &#x27;axios&#x27;<br><br>// 配置<br>const _axios = axios.create(&#123;<br>    baseURL: &#x27;http://localhost:8080&#x27;,<br>    withCredentials: true<br>&#125;)<br><br>// 请求拦截器<br>_axios.interceptors.request.use(<br>    function (config) &#123;<br>        config.headers = &#123;<br>            Authorization: &#x27;aaa.bbb.ccc&#x27;<br>        &#125;<br>        return config<br>    &#125;,<br>    function (error) &#123;<br>        return Promise.reject(error);<br>    &#125;<br>)<br><br>// 响应拦截器<br>_axios.interceptors.response.use(<br>    // 响应码在200之内<br>    function (response) &#123;<br>        console.log(&#x27;响应正常&#x27;)<br>        return response<br>    &#125;,<br>    // 响应码大于200时<br>    function (error) &#123;<br>        if (error.response.status === 400) &#123;<br>            console.log(&#x27;请求参数错误&#x27;)<br>        &#125; else if (error.response.status === 500) &#123;<br>            console.log(&#x27;服务器错误&#x27;)<br>        &#125; else if (error.response.status === 404) &#123;<br>            console.log(&#x27;资源未找到&#x27;)<br>        &#125; else &#123;<br>            console.log(&#x27;未知错误&#x27;)<br>        &#125;<br>        return Promise.reject(error)<br>    &#125;<br>)<br><br>export default _axios<br></code></pre></td></tr></table></figure><p>用的时候导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    // 导入自己配置好的axios<br>    import _axios from &#x27;../utils/myaxios&#x27;<br>    const option = &#123;<br>        methods: &#123;<br>            async sendReq() &#123;<br>                const resp = await _axios.get(&#x27;/api/students&#x27;)<br>                console.log(resp)<br>            &#125;<br>        &#125;<br>    &#125;<br>    export default option<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fetch API</title>
    <link href="/2022/10/04/%E5%89%8D%E7%AB%AF/api/FetchAPI/"/>
    <url>/2022/10/04/%E5%89%8D%E7%AB%AF/api/FetchAPI/</url>
    
    <content type="html"><![CDATA[<h2 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API</a> 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch"><code>fetch()</code></a> 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p></blockquote><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch()"></a>fetch()</h3><blockquote><p>用于发起获取资源的请求。它返回一个 promise，这个 promise 会在请求响应后被 resolve，并传回 Response 对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(url[, init])<span class="hljs-comment">//init：对请求的设置</span><br></code></pre></td></tr></table></figure><h3 id="同步方式接收响应"><a href="#同步方式接收响应" class="headerlink" title="同步方式接收响应"></a>同步方式接收响应</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> 结果 = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span><span class="hljs-comment">//会阻塞之后的代码，直到接收到响应结果</span><br></code></pre></td></tr></table></figure><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li></ul><p><strong>案例</strong></p><blockquote><p>前面的部分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>学生列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thead&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row bold&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tbody&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span>xx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>同步接收数据，并写到html表单里</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">findStudents</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 向students.json发送request请求</span><br>        <span class="hljs-keyword">const</span> resp = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;students.json&#x27;</span>)<br>        <span class="hljs-comment">// 获取响应体，按json方式解析</span><br>        <span class="hljs-keyword">const</span> array = <span class="hljs-keyword">await</span> resp.<span class="hljs-title function_">json</span>();<span class="hljs-comment">//.json返回的还是一个Promise</span><br><br>        <span class="hljs-comment">// 获取模板</span><br>        <span class="hljs-keyword">const</span> tp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tp&quot;</span>);<br>        <span class="hljs-keyword">const</span> row = tp.<span class="hljs-property">content</span>;<br><br>        <span class="hljs-comment">// 将数据填入模板，并复制到要显示的文本中</span><br>        <span class="hljs-keyword">const</span> [c1, c2, c3, c4] = row.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.col&quot;</span>);<br>        <span class="hljs-keyword">const</span> tbody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.tbody&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> &#123;id, name, sex, age&#125; <span class="hljs-keyword">of</span> array) &#123;<br>            c1.<span class="hljs-property">textContent</span> = id;<br>            c2.<span class="hljs-property">textContent</span> = name;<br>            c3.<span class="hljs-property">textContent</span> = sex;<br>            c4.<span class="hljs-property">textContent</span> = age;<br><br>            <span class="hljs-keyword">const</span> newRow = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">importNode</span>(row, <span class="hljs-literal">true</span>);<br>            tbody.<span class="hljs-title function_">appendChild</span>(newRow);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">findStudents</span>();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="异步方式接收响应"><a href="#异步方式接收响应" class="headerlink" title="异步方式接收响应"></a>异步方式接收响应</h3><blockquote><p>通过.then来异步接收响应</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;students.json&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.<span class="hljs-title function_">json</span>())<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">array</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 获取模板</span><br>    <span class="hljs-keyword">const</span> tp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tp&quot;</span>);<br>    <span class="hljs-keyword">const</span> row = tp.<span class="hljs-property">content</span>;<br><br>    <span class="hljs-comment">// 将数据填入模板，并复制到要显示的文本中</span><br>    <span class="hljs-keyword">const</span> [c1, c2, c3, c4] = row.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.col&quot;</span>);<br>    <span class="hljs-keyword">const</span> tbody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.tbody&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> &#123;id, name, sex, age&#125; <span class="hljs-keyword">of</span> array) &#123;<br>        c1.<span class="hljs-property">textContent</span> = id;<br>        c2.<span class="hljs-property">textContent</span> = name;<br>        c3.<span class="hljs-property">textContent</span> = sex;<br>        c4.<span class="hljs-property">textContent</span> = age;<br><br>        <span class="hljs-keyword">const</span> newRow = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">importNode</span>(row, <span class="hljs-literal">true</span>);<br>        tbody.<span class="hljs-title function_">appendChild</span>(newRow);<br>    &#125;<br>&#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)) <span class="hljs-comment">//捕获异常</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><blockquote><p>同源检查是浏览器的行为，而且只针对 fetch、xhr（XMLHTTPRequest） 请求</p><p>只要协议、主机、端口之一不同，就不同源</p></blockquote><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域</li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】</li></ul><p><strong>通过添加响应头解决</strong></p><ul><li><p>java后端添加注解CrossOrigin来添加 Access-Control-Allow-Origin响应头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/api/students&quot;)</span><br><span class="hljs-meta">@CrossOrigin(&quot;http://localhost:7070&quot;)</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">all</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> R.ok(studentService.findAll());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>也可以配置全局跨域</p><blockquote><p>实现WebMvcConfigurer的addCorsMappings方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> LoginInterceptor <span class="hljs-title function_">loginInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/api/**&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 跨域全局配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">//对所有请求支持跨域</span><br>                .allowedOrigins(<span class="hljs-string">&quot;http://localhost:7070&quot;</span>)    <span class="hljs-comment">//跨域请求来源</span><br>                .allowCredentials(<span class="hljs-literal">true</span>);    <span class="hljs-comment">//允许携带凭证(cookie)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>通过代理解决</strong></p><blockquote><p>浏览器要访问跨域的资源时，将请求发到前端的代理中，让代理去获得资源再返回</p></blockquote><ul><li><p>安装</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">npm install <span class="hljs-keyword">http</span>-proxy-middleware <span class="hljs-comment">--save-dev</span><br></code></pre></td></tr></table></figure></li><li><p>在启动代码中导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createProxyMiddleware&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span><br><br><span class="hljs-comment">//创建代理中间件，请求url为&#x27;/api&#x27;的都会被代理</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, <span class="hljs-title function_">createProxyMiddleware</span>(&#123; <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>, <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span> &#125;));<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建前端服务器</title>
    <link href="/2022/10/03/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/10/03/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建前端服务器"><a href="#搭建前端服务器" class="headerlink" title="搭建前端服务器"></a>搭建前端服务器</h2><p><strong>案例</strong></p><ul><li><p>新建项目文件夹</p></li><li><p>执行命令</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install <span class="hljs-built_in">express</span> --<span class="hljs-built_in">save</span>-dev<br></code></pre></td></tr></table></figure></li><li><p>修改<code>package.json</code>文件</p><blockquote><p>添加”type”: “module”就可以使用import来导入模块</p><p>其中 devDependencies 是 npm install –save-dev 添加的</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;module&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.18.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>编写<code>main.js</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">import express from &#x27;express&#x27;<br>const app = express()<br><br>app.use(express.static(&#x27;./&#x27;))<br>app.listen(<span class="hljs-number">7070</span>)<br></code></pre></td></tr></table></figure><p>代码解释：</p><ul><li><p>const app &#x3D; express()：创建一个新的应用程序</p></li><li><p>app.listen(7070)：设置监听的端口</p></li><li><p>app.use(express.static(‘.&#x2F;‘))：设置静态文件目录</p></li></ul></li><li><p>控制台(VSCode快捷键: ctrl+shift+反引号)执行命名</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">main</span>.js<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装nvm</title>
    <link href="/2022/10/03/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E5%AE%89%E8%A3%85nvm/"/>
    <url>/2022/10/03/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/%E5%AE%89%E8%A3%85nvm/</url>
    
    <content type="html"><![CDATA[<h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><blockquote><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p></blockquote><p><a href="https://github.com/coreybutler/nvm-windows/releases">github下载</a> , 下载<code>nvm-setup.zip</code></p><p>安装注意事项</p><ul><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li></ul><h3 id="安装nvm-1"><a href="#安装nvm-1" class="headerlink" title="安装nvm"></a>安装nvm</h3><ul><li><p>首次运行前设置好国内镜像地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">nvm node_mirror http:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>node/<br>nvm npm_mirror https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>npm/<br></code></pre></td></tr></table></figure></li><li><p>查看nodejs可用版本</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">nvm list available<br></code></pre></td></tr></table></figure></li><li><p>建议下载LTS(长期支持版)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> install <span class="hljs-number">16</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">nvm</span> install <span class="hljs-number">14</span>.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>切换nodejs版本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvm</span> use <span class="hljs-number">16</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="检查npm"><a href="#检查npm" class="headerlink" title="检查npm"></a>检查npm</h3><blockquote><p>npm（node package manager） 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p></blockquote><ul><li><p>检查镜像</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">get</span> registry<br></code></pre></td></tr></table></figure></li><li><p>设置国内镜像</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org/</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多级缓存</title>
    <link href="/2022/09/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <url>/2022/09/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/img/weifuwu_img/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98.png"></p><p>tomcat查询的速度比较慢，尽量通过缓存来减少tomcat的查询</p><p><strong>多级缓存</strong>就是充分利用请求处理的每个环节，分别添加缓存，减轻Tomcat压力，提升服务性能</p><p>多级缓存的关键有两个：</p><ul><li><p>一个是在nginx中编写业务，实现nginx本地缓存、Redis、Tomcat的查询</p></li><li><p>另一个就是在Tomcat中实现JVM进程缓存</p></li></ul><h3 id="JVM进程缓存"><a href="#JVM进程缓存" class="headerlink" title="JVM进程缓存"></a>JVM进程缓存</h3><h4 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h4><blockquote><p><strong>Caffeine</strong>是一个基于Java8开发的，提供了近乎最佳命中率的高性能的本地缓存库。目前Spring内部的缓存使用的就是Caffeine</p><p><a href="https://github.com/ben-manes/caffeine">github地址</a></p></blockquote><h4 id="使用Caffeine"><a href="#使用Caffeine" class="headerlink" title="使用Caffeine"></a>使用Caffeine</h4><ul><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>caffeine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//创建缓存对象</span><br>    Cache&lt;String, String&gt; cache = Caffeine.newBuilder().build();<br><br>    <span class="hljs-comment">//添加数据到缓存</span><br>    cache.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>    System.out.println(cache.getIfPresent(<span class="hljs-string">&quot;name&quot;</span>));<br><br>    <span class="hljs-comment">//类似getOrDefault，可以在查不到缓存的时候查数据库来返回值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cache.get(<span class="hljs-string">&quot;defaultName&quot;</span>, key -&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ls&quot;</span>;<br>    &#125;);<br>    System.out.println(name);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    Cache&lt;String, String&gt; cache = Caffeine.newBuilder()<br>        <span class="hljs-comment">//添加清除缓存策略</span><br>        .maximumSize(<span class="hljs-number">1</span>)     <span class="hljs-comment">//基于容量，超过1个缓存就会清除旧的</span><br>        .expireAfterWrite(Duration.ofSeconds(<span class="hljs-number">10</span>))   <span class="hljs-comment">//基于时间, 10s后清除</span><br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实例</p><p>注入到容器实现自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaffeineConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cache&lt;Long, Item&gt; <span class="hljs-title function_">itemCache</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Caffeine.newBuilder()<br>                .initialCapacity(<span class="hljs-number">100</span>)<br>                .maximumSize(<span class="hljs-number">10000</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cache&lt;Long, ItemStock&gt; <span class="hljs-title function_">itemStockCache</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Caffeine.newBuilder()<br>                .initialCapacity(<span class="hljs-number">100</span>)<br>                .maximumSize(<span class="hljs-number">10000</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过Cache实现JVM进程缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;item&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemController</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemService itemService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemStockService stockService;<br>    <br>    <span class="hljs-comment">//商品缓存</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cache&lt;Long, Item&gt; itemCache;<br>    <span class="hljs-comment">//库存缓存</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cache&lt;Long, ItemStock&gt; itemStockCache;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Item <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        <span class="hljs-comment">//先查缓存，没有再查数据库</span><br>        <span class="hljs-keyword">return</span> itemCache.get(id, key -&gt; &#123;<br>           <span class="hljs-keyword">return</span>  itemService.query()<br>                   .ne(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">3</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id)<br>                   .one();<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/stock/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ItemStock <span class="hljs-title function_">findStockById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> itemStockCache.get(id, key -&gt; &#123;<br>            <span class="hljs-keyword">return</span> stockService.getById(id);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Lua语法入门"><a href="#Lua语法入门" class="headerlink" title="Lua语法入门"></a>Lua语法入门</h3><blockquote><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了<strong>嵌入应用程序</strong>中，从而为应用程序提供灵活的扩展和定制功能。<a href="https://www.lua.org/">官网</a></p><p>Lua经常嵌入到C语言开发的程序中，例如游戏开发、游戏插件等。</p><p>Nginx本身也是C语言开发，因此也允许基于Lua做拓展。</p></blockquote><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><ul><li><p>创建hello.lua文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> hello.lua<br><span class="hljs-comment"># 编辑</span><br>vim hello.lua<br></code></pre></td></tr></table></figure></li><li><p>文件内</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello lua&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>运行hello.lua</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">lua hello.lua<br></code></pre></td></tr></table></figure><p><img src="/img/weifuwu_img/luaHelloWorld.png"></p></li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p><strong>变量类型</strong></p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>表示一个无效值或false</td></tr><tr><td>boolean</td><td>true&#x2F;false</td></tr><tr><td>number</td><td>双精度浮点数</td></tr><tr><td>string</td><td>字符串</td></tr><tr><td>function</td><td>函数</td></tr><tr><td>table</td><td>可以作为数组或map来使用</td></tr></tbody></table><blockquote><p>通过函数type()可以查看变量类型</p></blockquote><p><img src="/img/weifuwu_img/luaType.png"></p><p><strong>声明变量</strong></p><blockquote><p>Lua声明变量的时候无需指定数据类型</p></blockquote><ul><li><p>local 关键字声明局部变量，没有则是全局变量</p><p><img src="/img/weifuwu_img/lua%E5%8F%98%E9%87%8F1.png"></p></li><li><p>string、number、boolean</p><p><img src="/img/weifuwu_img/lua%E5%8F%98%E9%87%8F2.png"></p></li><li><p>table</p><p><img src="/img/weifuwu_img/lua%E5%8F%98%E9%87%8F3.png"></p></li><li><p>访问table</p><blockquote><p>下标从1开始</p></blockquote><p><img src="/img/weifuwu_img/lua%E5%8F%98%E9%87%8F4.png"></p><p><img src="/img/weifuwu_img/lua%E5%8F%98%E9%87%8F5.png"></p></li></ul><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><blockquote><p>循环数组用ipairs，循环map用pairs</p></blockquote><p><img src="/img/weifuwu_img/lua%E5%BE%AA%E7%8E%AF1.png"></p><p><img src="/img/weifuwu_img/lua%E5%BE%AA%E7%8E%AF2.png"></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><img src="/img/weifuwu_img/lua%E5%87%BD%E6%95%B01.png"></p><p><img src="/img/weifuwu_img/lua%E5%87%BD%E6%95%B02.png"></p><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>语法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span>(布尔表达式)<br><span class="hljs-keyword">then</span><br>   <span class="hljs-comment">--[ 布尔表达式为 true 时执行该语句块 --]</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-comment">--[ 布尔表达式为 false 时执行该语句块 --]</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><blockquote><p>&amp;&amp; || !     对应    and or not</p></blockquote><p><img src="/img/weifuwu_img/lua%E6%9D%A1%E4%BB%B61.png"></p><p><img src="/img/weifuwu_img/lua%E6%9D%A1%E4%BB%B62.png"></p><h3 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h3><blockquote><p>基于 Nginx的高性能 Web 平台，用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。<a href="https://openresty.org/cn/">官网</a></p></blockquote><p>特点：</p><ul><li>具备Nginx的完整功能</li><li>基于Lua语言进行扩展，集成了大量精良的 Lua 库、第三方模块</li><li>允许使用Lua<strong>自定义业务逻辑</strong>、<strong>自定义库</strong></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>安装OpenResty依赖开发库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y pcre-devel openssl-devel gcc --skip-broken<br></code></pre></td></tr></table></figure></li><li><p>安装OpenResty仓库，便于未来安装或更新我们的软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo<br></code></pre></td></tr></table></figure></li><li><p>安装OpenResty</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y openresty<br></code></pre></td></tr></table></figure></li><li><p>安装opm工具</p><blockquote><p>opm是OpenResty的一个管理工具，可以帮助我们安装一个第三方的Lua模块</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y openresty-opm<br></code></pre></td></tr></table></figure></li><li><p>默认情况下，OpenResty安装的目录是：&#x2F;usr&#x2F;local&#x2F;openresty</p><p>OpenResty就是在Nginx基础上集成了一些Lua模块</p></li></ul><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#打开配置文件</span><br>vi /etc/profile<br><br><span class="hljs-comment"># 添加环境变量</span><br><span class="hljs-built_in">export</span> NGINX_HOME=/usr/local/openresty/nginx<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;NGINX_HOME&#125;</span>/sbin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-comment"># 让配置文件生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>运行方式与nginx基本一致</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动nginx</span><br>nginx<br><span class="hljs-comment"># 重新加载配置</span><br>nginx -s reload<br><span class="hljs-comment"># 停止</span><br>nginx -s stop<br></code></pre></td></tr></table></figure><blockquote><p> <code>/usr/local/openresty/nginx/conf/nginx.conf</code>为nginx默认的配置文件，里面注释比较多，可以将nginx.conf中的注释部分删除，保留有效部分。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><span class="hljs-attribute">error_log</span>  logs/<span class="hljs-literal">error</span>.log;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">8081</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通过OpenResty响应请求"><a href="#通过OpenResty响应请求" class="headerlink" title="通过OpenResty响应请求"></a>通过OpenResty响应请求</h4><p><strong>案例</strong></p><ul><li><p>做反向代理的nginx的配置文件</p><blockquote><p>将请求发送到OpenResty端口</p></blockquote><p><img src="/img/weifuwu_img/OpenResty%E6%A1%88%E4%BE%8B1.png"></p></li><li><p>OpenResty配置文件</p><blockquote><p>在http下面添加Lua依赖库</p><p>改完配置文件nginx -s reload 重新加载一下配置文件</p></blockquote><p><img src="/img/weifuwu_img/OpenResty%E6%A1%88%E4%BE%8B2.png"></p></li><li><p>在OpenResty的<code>/usr/local/openresty/nginx</code>下创建<code>lua/item.lua</code>文件</p><p><img src="/img/weifuwu_img/OpenResty%E6%A1%88%E4%BE%8B3.png"></p></li><li><p>在<code>lua/item.lua</code>文件里面编写响应的逻辑</p><blockquote><p>这里通过ngx.say()返回假数据</p></blockquote><p><img src="/img/weifuwu_img/OpenResty%E6%A1%88%E4%BE%8B4.png"></p></li><li><p>页面再次请求，返回lua文件里的响应</p><blockquote><p>没有反应的把nginx进程杀掉再试试</p></blockquote></li></ul><h4 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h4><p><img src="/img/weifuwu_img/Lua%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><p><strong>案例</strong></p><ul><li><p>openResty配置文件</p><p><img src="/img/weifuwu_img/Lua%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B02.png"></p></li><li><p>item.lua文件</p><p><img src="/img/weifuwu_img/Lua%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B03.png"></p></li></ul><h3 id="OpenResty查询Tomcat"><a href="#OpenResty查询Tomcat" class="headerlink" title="OpenResty查询Tomcat"></a>OpenResty查询Tomcat</h3><p><strong>OpenResty发送http请求方式</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> resp = ngx.location.capture(<span class="hljs-string">&quot;/path&quot;</span>,&#123;<br>    method = ngx.HTTP_GET,   <span class="hljs-comment">-- 请求方式</span><br>    args = &#123;a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>&#125;,  <span class="hljs-comment">-- get方式传参数</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>返回的响应内容包括：</p><ul><li>resp.status：响应状态码</li><li>resp.header：响应头，是一个table</li><li>resp.body：响应体，就是响应数据</li></ul><p>注意：这里的path是路径，并不包含IP和端口。这个请求会被nginx内部的server监听并处理。</p><p><strong>通过nginx反向代理发送请求到tomcat</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#将/path请求代理到tomcat的ip和端口</span><br><span class="hljs-section">location</span> /path &#123;<br>     <span class="hljs-comment"># 这里是windows电脑的ip和Java服务端口，需要确保windows防火墙处于关闭状态</span><br>     <span class="hljs-attribute">proxy_pass</span> http://192.168.229.1:8081; <br> &#125;<br></code></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul><li><p>在<code>/usr/local/openresty/lualib</code>目录下编写common.lua工具类</p><blockquote><p>将read_http函数封装到_M这个table类型的变量中，并且返回，这类似于导出</p><p>使用的时候，可以利用<code>require(&#39;common&#39;)</code>来导入该函数库，这里的common是函数库的文件名</p></blockquote><p><img src="/img/weifuwu_img/OpenResty%E6%9F%A5%E8%AF%A2tomcat1.png"></p></li><li><p>在<code>/usr/local/openresty/nginx/conf/nginx.conf</code>配置文件中添加location</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /item &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://192.168.229.1:8081;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改item.lua文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入自定义的common.lua 工具模块</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;common&#x27;</span>)<br><span class="hljs-comment">-- 导入json解析模块</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cjson&#x27;</span>)<br><br><br><span class="hljs-comment">-- 获取id</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">-- 从common中获取read_http函数</span><br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-comment">-- 发送请求获取商品和库存</span><br><span class="hljs-keyword">local</span> itemJson = read_http(<span class="hljs-string">&#x27;/item/&#x27;</span> .. id, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">local</span> itemStockJson = read_http(<span class="hljs-string">&#x27;/item/stock/&#x27;</span> .. id, <span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">-- 解析json，将两个查询结果合成一个</span><br><span class="hljs-keyword">local</span> item = cjson.decode(itemJson)<br><span class="hljs-keyword">local</span> stock = cjson.decode(itemStockJson)<br>item.stock = stock.stock <br>item.sold = stock.sold<br><br><span class="hljs-comment">-- 将查询结果重新序列化为json并返回</span><br>ngx.say(cjson.encode(item))<br></code></pre></td></tr></table></figure></li><li><p>nginx重新加载配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -s reload<br></code></pre></td></tr></table></figure></li></ul><h4 id="基于查询id的负载均衡"><a href="#基于查询id的负载均衡" class="headerlink" title="基于查询id的负载均衡"></a>基于查询id的负载均衡</h4><blockquote><p>相同的id都会代理到同一台tomcat服务器，不会出现一条数据缓存在多台服务器上的冗余</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> tomcat-cluster &#123;<br>    <span class="hljs-attribute">hash</span> <span class="hljs-variable">$request_uri</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.229.1:8081</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.229.1:8082</span>;<br>&#125;<br><br><span class="hljs-section">location</span> /item &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://tomcat-cluster;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 重新加载配置文件</span><br>nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="OpenResty查询Redis"><a href="#OpenResty查询Redis" class="headerlink" title="OpenResty查询Redis"></a>OpenResty查询Redis</h3><h4 id="Redis预热"><a href="#Redis预热" class="headerlink" title="Redis预热"></a>Redis预热</h4><blockquote><p>Redis刚启动时没有缓存，将热点数据提前查询并保存到Redis中称为预热</p></blockquote><ul><li><p>docker 安装redis</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> --name redis -p 6379:6379 -d redis redis-server --appendonly <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure></li><li><p>引入redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置redis地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><br></code></pre></td></tr></table></figure></li><li><p>编写初始化类</p><blockquote><p><strong>InitializingBean</strong>接口：为bean提供了属性初始化后的处理方法，它只有一个afterPropertiesSet方法，凡是继承该接口的类，在bean的属性初始化后都会执行该方法。</p><p><strong>ObjectMapper</strong>：spring默认的json处理工具</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.config;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ItemService itemService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ItemStockService itemStockService;<br><br>    <span class="hljs-comment">//json解析</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在对象被Spring创建并且成员变量全部注入后执行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取要放入redis中的数据</span><br>        List&lt;Item&gt; itemList = itemService.list();<br><br>        <span class="hljs-keyword">for</span> (Item item : itemList) &#123;<br>            <span class="hljs-comment">//转为json并存入redis</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(item);<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:id:&quot;</span> + item.getId(), json);<br>        &#125;<br><br>        <span class="hljs-comment">// 3.查询商品库存信息</span><br>        List&lt;ItemStock&gt; stockList = itemStockService.list();<br>        <span class="hljs-comment">// 4.放入缓存</span><br>        <span class="hljs-keyword">for</span> (ItemStock stock : stockList) &#123;<br>            <span class="hljs-comment">// 2.1.item序列化为JSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(stock);<br>            <span class="hljs-comment">// 2.2.存入redis</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:stock:id:&quot;</span> + stock.getId(), json);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启服务就能看到redis中被添加了数据</p></li></ul><h4 id="查询Redis缓存"><a href="#查询Redis缓存" class="headerlink" title="查询Redis缓存"></a>查询Redis缓存</h4><ul><li><p>在<code>/usr/local/openresty/lualib/common.lua</code>中封装查询redis的函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入依赖库</span><br><span class="hljs-comment">-- resty目录下的redis依赖库</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;resty.redis&#x27;</span>)<br><br><br><br><span class="hljs-comment">-- 发送http请求到tomcat</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_http</span> <span class="hljs-params">(path, params)</span></span><br><span class="hljs-comment">-- 发送请求 </span><br><span class="hljs-keyword">local</span> resp = ngx.location.capture(<span class="hljs-built_in">path</span>, &#123;<br>method = ngx.HTTP_GET,<br>args = params,<br>&#125;)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp <span class="hljs-keyword">then</span><br><span class="hljs-comment">-- 记录错误信息</span><br>ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;http请求查询失败, path: &quot;</span>, <span class="hljs-built_in">path</span> , <span class="hljs-string">&quot;, args: &quot;</span>, args)<br>ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">404</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 解析出响应体并返回</span><br><span class="hljs-keyword">return</span> resp.body<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 初始化redis</span><br><span class="hljs-keyword">local</span> red = redis:new()<br>red:set_timeouts(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)<span class="hljs-comment">-- 连接超时，请求超时，响应超时</span><br><span class="hljs-comment">-- 释放redis连接</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close_redis</span> <span class="hljs-params">(red)</span></span> <br><span class="hljs-keyword">local</span> pool_max_idle_time = <span class="hljs-number">10000</span><span class="hljs-comment">-- 连接的空闲时间,ms</span><br><span class="hljs-keyword">local</span> pool_size = <span class="hljs-number">100</span><br><span class="hljs-keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;释放redis连接失败&quot;</span>, err)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 查询redis</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_redis</span><span class="hljs-params">(ip, port, key)</span></span><br><span class="hljs-comment">-- 获取一个连接</span><br><span class="hljs-keyword">local</span> ok, err = red:connect(ip, port)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span> <br>ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;连接Redis失败&quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 查询redis</span><br><span class="hljs-keyword">local</span> resp, err = red:get(key)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp <span class="hljs-keyword">then</span><br>ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;查询Redis失败&quot;</span>, err, <span class="hljs-string">&quot;key = &quot;</span>, key)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 查询的数据为空时</span><br><span class="hljs-keyword">if</span> resp == ngx.null <span class="hljs-keyword">then</span><br>resp = <span class="hljs-literal">nil</span><br>ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;查询Redis数据为空&quot;</span>, err, <span class="hljs-string">&quot;key = &quot;</span>, key)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 释放连接</span><br>close_redis(red)<br>    <span class="hljs-comment">-- 这里resp是json数据，不用resp.body</span><br><span class="hljs-keyword">return</span> resp<br><span class="hljs-keyword">end</span><br><br><br><br><span class="hljs-comment">-- 将方法导出</span><br><span class="hljs-keyword">local</span> _M = &#123;<br>read_http = read_http,<br>read_redis = read_redis<br>&#125;<br><span class="hljs-keyword">return</span> _M<br></code></pre></td></tr></table></figure></li><li><p>修改<code>/usr/local/openresty/lua/item.lua</code>文件，改为先查redis再查tomcat</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入自定义的common.lua 工具模块</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;common&#x27;</span>)<br><span class="hljs-comment">-- 从common中获取函数</span><br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-keyword">local</span> read_redis = common.read_redis<br><span class="hljs-comment">-- 导入json解析模块</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cjson&#x27;</span>)<br><br><br><span class="hljs-comment">-- 封装查询方法</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_data</span><span class="hljs-params">(key, path, params)</span></span><br>    <span class="hljs-comment">-- 查询redis缓存</span><br>    <span class="hljs-keyword">local</span> data = read_redis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>, key)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data <span class="hljs-keyword">then</span> <br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;redis查询失败,尝试查询http, key:&quot;</span>, key)<br>        data = read_http(<span class="hljs-built_in">path</span>, params)<br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-keyword">end</span><br><br><br><br><span class="hljs-comment">-- 获取id</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">-- 发送请求获取商品和库存</span><br><span class="hljs-keyword">local</span> itemJson = read_data(<span class="hljs-string">&#x27;item:id:&#x27;</span> .. id, <span class="hljs-string">&#x27;/item/&#x27;</span> .. id, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">local</span> itemStockJson = read_data(<span class="hljs-string">&#x27;item:stock:id:&#x27;</span> .. id, <span class="hljs-string">&#x27;/item/stock/&#x27;</span> .. id, <span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">-- 解析json，将两个查询结果合成一个</span><br><span class="hljs-keyword">local</span> item = cjson.decode(itemJson)<br><span class="hljs-keyword">local</span> stock = cjson.decode(itemStockJson)<br>item.stock = stock.stock <br>item.sold = stock.sold<br><br><span class="hljs-comment">-- 将查询结果重新序列化为json并返回</span><br>ngx.say(cjson.encode(item))<br></code></pre></td></tr></table></figure></li><li><p>修改控制层逻辑，当查到JVM缓存的时候给Redis也存一份数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Item <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>    <span class="hljs-comment">//先查缓存，没有再查数据库</span><br>    <span class="hljs-type">Item</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> itemCache.get(id, key -&gt; &#123;<br>        <span class="hljs-keyword">return</span> itemService.query()<br>            .ne(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">3</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id)<br>            .one();<br>    &#125;);<br>    <span class="hljs-comment">//查到JVM缓存了，说明redis中没有数据，存入redis一份数据</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:id:&quot;</span> + id, mapper.writeValueAsString(data));<br>    &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/stock/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> ItemStock <span class="hljs-title function_">findStockById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>    <span class="hljs-type">ItemStock</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> itemStockCache.get(id, key -&gt; &#123;<br>        <span class="hljs-keyword">return</span> stockService.getById(id);<br>    &#125;);<br>    <span class="hljs-comment">//查到JVM缓存了，说明redis中没有数据，存入redis一份数据</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:stock:id:&quot;</span> + id, mapper.writeValueAsString(data));<br>    &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="OpenResty查询本地缓存"><a href="#OpenResty查询本地缓存" class="headerlink" title="OpenResty查询本地缓存"></a>OpenResty查询本地缓存</h3><blockquote><p>OpenResty为Nginx提供了<strong>shard dict</strong>的功能，可以在nginx的多个worker之间共享数据，实现缓存功能。</p></blockquote><ul><li><p>在nginx.conf的html下中开启本地缓存</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 开启共享字典(本地缓存)名称叫做：item_cache，大小150m</span><br><span class="hljs-attribute">lua_shared_dict</span> item_cache <span class="hljs-number">150m</span>; <br></code></pre></td></tr></table></figure></li><li><p>修改<code>/usr/local/openresty/lua/item.lua</code>文件，添加本地缓存逻辑</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入共享词典，本地缓存</span><br><span class="hljs-keyword">local</span> item_cache = ngx.shared.item_cache<br><br><br><span class="hljs-comment">-- 封装查询方法</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_data</span><span class="hljs-params">(key, path, params)</span></span><br>    <span class="hljs-comment">-- 先查本地缓存</span><br>    <span class="hljs-keyword">local</span> data = item_cache:get(key)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;本地缓存查询失败, 尝试查询Redis, key: &quot;</span>, key)<br>        <span class="hljs-comment">-- 查询redis缓存</span><br>        data = read_redis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>, key)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data <span class="hljs-keyword">then</span> <br>            ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;redis查询失败,尝试查询http, key:&quot;</span>, key)<br>            <span class="hljs-comment">-- 查询tomcat缓存</span><br>            data = read_http(<span class="hljs-built_in">path</span>, params)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 添加本地缓存, 键，值，过期时间</span><br>    item_cache:set(key, data, <span class="hljs-number">1000</span>)<br><br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="缓存同步"><a href="#缓存同步" class="headerlink" title="缓存同步"></a>缓存同步</h3><p>缓存数据同步的常见方式有三种：</p><p><strong>设置有效期</strong>：给缓存设置有效期，到期后自动删除。再次查询时更新</p><ul><li>优势：简单、方便</li><li>缺点：时效性差，缓存过期之前可能不一致</li><li>场景：更新频率较低，时效性要求低的业务</li></ul><p><strong>同步双写</strong>：在修改数据库的同时，直接修改缓存</p><ul><li>优势：时效性强，缓存与数据库强一致</li><li>缺点：有代码侵入，耦合度高；</li><li>场景：对一致性、时效性要求较高的缓存数据</li></ul><p><strong>异步通知：</strong>修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据</p><ul><li>优势：低耦合，可以同时通知多个缓存服务</li><li>缺点：时效性一般，可能存在中间不一致状态</li><li>场景：时效性要求一般，有多个服务需要同步</li></ul><h4 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h4><blockquote><p>canal是阿里巴巴旗下的一款开源项目，基于Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费。GitHub的地址：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a></p><p>Canal是基于<strong>mysql的主从同步</strong>来实现的</p><p>Canal就是把自己伪装成MySQL的一个slave节点，从而监听master的binary log变化。再把得到的变化信息通知给Canal的客户端，进而完成对其它数据库的同步。</p></blockquote><h4 id="Canal安装"><a href="#Canal安装" class="headerlink" title="Canal安装"></a>Canal安装</h4><ul><li><p>1.先打开mysql主从</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 打开mysql容器挂载的日志文件/tmp/mysql/conf</span><br>vi /tmp/mysql/conf/my.cnf<br><br><span class="hljs-comment"># 添加内容(二进制日志记录的位置，记录的数据库)</span><br>log-bin=/var/lib/mysql/mysql-bin<br>binlog-do-db=heima<br></code></pre></td></tr></table></figure></li><li><p>1.1添加用于数据同步的用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> canal@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;canal&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">REPLICATION</span> SLAVE, <span class="hljs-keyword">REPLICATION</span> CLIENT,SUPER <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;canal&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;canal&#x27;</span>;<br>FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br></code></pre></td></tr></table></figure></li><li><p>1.2重启mysql容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker restart mysql<br><br><span class="hljs-comment">#查看是否成功开启</span><br>show master status;<br></code></pre></td></tr></table></figure></li><li><p>2.创建网络让mysql和canal能够通信</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建网络(名字加heima)</span><br>docker network create heima<br><span class="hljs-comment"># 将mysql容器添加到网络中</span><br>docker network connect heima mysql<br></code></pre></td></tr></table></figure></li><li><p>3.<a href="https://blog.csdn.net/qq_29116427/article/details/106498040">安装canal</a></p></li><li><p>4.创建Canal容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -p 11111:11111 --name canal \<br>-e canal.destinations=heima \<br>-e canal.instance.master.address=mysql:3306  \<br>-e canal.instance.dbUsername=canal  \<br>-e canal.instance.dbPassword=canal  \<br>-e canal.instance.connectionCharset=UTF-8 \<br>-e canal.instance.tsdb.enable=<span class="hljs-literal">true</span> \<br>-e canal.instance.gtidon=<span class="hljs-literal">false</span>  \<br>-e canal.instance.filter.regex=heima\\..* \<br>--network heima \<br>-d canal/canal-server:v1.1.5<br></code></pre></td></tr></table></figure><ul><li><code>-p 11111:11111</code>：这是canal的默认监听端口</li><li><code>-e canal.instance.master.address=mysql:3306</code>：数据库地址和端口，如果不知道mysql容器地址，可以通过<code>docker inspect 容器id</code>来查看</li><li><code>-e canal.instance.dbUsername=canal</code>：数据库用户名</li><li><code>-e canal.instance.dbPassword=canal</code> ：数据库密码</li><li><code>-e canal.instance.filter.regex=</code>：要监听的表名称</li></ul></li></ul><h4 id="使用Canal"><a href="#使用Canal" class="headerlink" title="使用Canal"></a>使用Canal</h4><blockquote><p>当Canal监听到binlog变化时，会通知Canal的客户端</p></blockquote><p>使用GitHub上的第三方开源的<a href="https://github.com/NormanGyllenhaal/canal-client">canal-starter</a>客户端来使用Canal</p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>top.javatool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1-RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">canal:</span><br>  <span class="hljs-attr">destination:</span> <span class="hljs-string">heima</span>  <span class="hljs-comment">#canal集群名称</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:11111</span> <span class="hljs-comment">#canal对应ip端口</span><br></code></pre></td></tr></table></figure></li><li><p>通过@Id、@Column、等注解完成Item与数据库表字段的映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;tb_item&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<span class="hljs-comment">//商品id</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//商品名称</span><br>    <span class="hljs-keyword">private</span> String title;<span class="hljs-comment">//商品标题</span><br>    <span class="hljs-keyword">private</span> Long price;<span class="hljs-comment">//价格（分）</span><br>    <span class="hljs-keyword">private</span> String image;<span class="hljs-comment">//商品图片</span><br>    <span class="hljs-keyword">private</span> String category;<span class="hljs-comment">//分类名称</span><br>    <span class="hljs-keyword">private</span> String brand;<span class="hljs-comment">//品牌名称</span><br>    <span class="hljs-keyword">private</span> String spec;<span class="hljs-comment">//规格</span><br>    <span class="hljs-keyword">private</span> Integer status;<span class="hljs-comment">//商品状态 1-正常，2-下架</span><br>    <span class="hljs-keyword">private</span> Date createTime;<span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<span class="hljs-comment">//更新时间</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> Integer stock;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> Integer sold;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听mysql变化，更新redis缓存和JVM缓存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@CanalTable(&quot;tb_item&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EntryHandler</span>&lt;Item&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisHandler redisHandler;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cache&lt;Long, Item&gt; cache;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Item item)</span> &#123;<br>        cache.put(item.getId(), item);<br><br>        redisHandler.saveItem(item);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Item before, Item after)</span> &#123;<br>        cache.put(after.getId(), after);<br><br>        redisHandler.saveItem(after);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Item item)</span> &#123;<br>        cache.invalidate(item.getId());<br>        redisHandler.deleteItemById(item.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML图</title>
    <link href="/2022/09/29/%E8%BD%AF%E8%80%83/UML%E5%9B%BE/"/>
    <url>/2022/09/29/%E8%BD%AF%E8%80%83/UML%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><ul><li><p>类图</p><blockquote><p>展现了一组对象、接口、协作和它们之间的关系</p></blockquote></li><li><p>对象图</p><blockquote><p>展示某一时刻一组对象间的关系</p></blockquote></li><li><p>用例图</p><blockquote><p>展现了一组用例、参与者以及它们之间的关系</p><p>包含、扩展、泛化关系</p></blockquote><p><img src="/img/post_img/%E7%94%A8%E4%BE%8B%E5%9B%BE.png"></p></li><li><p>部署图</p><blockquote><p>描述了系统运行时进行处理的结点以及在结点上活动的构件的配置。强调了<strong>物理设备</strong>以及之间的连接关系。</p></blockquote><p><img src="/img/post_img/%E9%83%A8%E7%BD%B2%E5%9B%BE.png"></p></li><li><p>组件图</p><blockquote><p>构件图是用来表示系统中构件与构件之间，类或接口与构件之间的关系图。其中，构件图之间的关系表现为依赖关系，定义的类或接口与类之间的关系表现为依赖关系或实现关系</p></blockquote><p><img src="/img/post_img/%E7%BB%84%E4%BB%B6%E5%9B%BE.png"></p></li><li><p>状态图</p><blockquote><p>由状态、变迁、事件和活动组成的状态机，用来描述类的对象所有可能的状态以及时间发生时状态的转移条件。</p></blockquote><p><img src="/img/post_img/%E7%8A%B6%E6%80%81%E5%9B%BE.png"></p></li><li><p>活动图</p><blockquote><p>状态图的一种特殊情况，这些状态大都处于活动状态。本质是一种流程图，它描述了活动到活动的控制流。</p></blockquote><p><img src="/img/post_img/%E6%B4%BB%E5%8A%A8%E5%9B%BE.png"></p></li><li><p>时序图</p><p><img src="/img/post_img/%E6%97%B6%E5%BA%8F%E5%9B%BE.png"></p></li><li><p>协作图</p><p><img src="/img/post_img/%E5%8D%8F%E4%BD%9C%E5%9B%BE.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式缓存</title>
    <link href="/2022/09/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/"/>
    <url>/2022/09/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><blockquote><p>redis版本6.2.4</p></blockquote><h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><blockquote><p>RDB (Redis Database Backup file) Redis数据备份文件</p><p>AOF (Append Only File) 追加文件 </p></blockquote><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令：同步保存，会导致其他命令被阻塞</li><li>执行bgsave命令：background save 异步保存，不会影响主进程</li><li>Redis停机时：自动执行save命令</li><li>触发RDB条件时</li></ul><p> AOF原理</p><ul><li>Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件，记录的是步骤</li></ul><h4 id="设置RDB触发条件"><a href="#设置RDB触发条件" class="headerlink" title="设置RDB触发条件"></a>设置RDB触发条件</h4><ul><li><p>修改redis目录下的redis.conf文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span><br><span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span>  <br><span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span>  <br><span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span> <br><br><span class="hljs-comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span><br><span class="hljs-attribute">rdbcompression</span> yes<br><br><span class="hljs-comment"># RDB文件名称</span><br><span class="hljs-attribute">dbfilename</span> dump.rdb  <br><br><span class="hljs-comment"># 文件保存的路径目录</span><br><span class="hljs-attribute">dir</span> ./ <br></code></pre></td></tr></table></figure></li></ul><h4 id="设置AOF"><a href="#设置AOF" class="headerlink" title="设置AOF"></a>设置AOF</h4><ul><li><p>开启AOF</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#修改配置文件</span><br>appendonly <span class="hljs-literal">no</span>--&gt;   appendonly <span class="hljs-literal">yes</span><br><br><span class="hljs-comment">#AOF文件名</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>设置记录频率</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># always: 每执行一次写命令，立即记录到AOF文件</span><br><span class="hljs-comment"># every sync: 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span><br><span class="hljs-comment"># no: 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span><br><br><span class="hljs-comment"># appendfsync always</span><br><span class="hljs-attribute">appendfsync</span> everysec<br><span class="hljs-comment"># appendfsync no</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>因为是记录命令，AOF文件会比RDB文件大的多，故需要重写AOF文件来压缩体积</p></blockquote><ul><li><p>设置重写触发条件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span><br><span class="hljs-attribute">auto</span>-aof-rewrite-percentage <span class="hljs-number">100</span><br><span class="hljs-comment"># AOF文件体积最小多大以上才触发重写 </span><br><span class="hljs-attribute">auto</span>-aof-rewrite-min-size <span class="hljs-number">64</span>mb <br></code></pre></td></tr></table></figure></li></ul><h4 id="RDB和AOF比较"><a href="#RDB和AOF比较" class="headerlink" title="RDB和AOF比较"></a>RDB和AOF比较</h4><p><img src="/img/weifuwu_img/RDB%E5%92%8CAOF%E6%AF%94%E8%BE%83.png" alt="RDB和AOF比较"></p><h3 id="Redis主从节点"><a href="#Redis主从节点" class="headerlink" title="Redis主从节点"></a>Redis主从节点</h3><h4 id="配置主从节点"><a href="#配置主从节点" class="headerlink" title="配置主从节点"></a>配置主从节点</h4><ul><li><p>准备实例和配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 复制三份redis.conf配置文件到不同的文件夹下</span><br><span class="hljs-built_in">cp</span> redis-4.0.0/redis.conf 7001<br><span class="hljs-built_in">cp</span> redis-4.0.0/redis.conf 7002<br><span class="hljs-built_in">cp</span> redis-4.0.0/redis.conf 7003<br></code></pre></td></tr></table></figure><p><img src="/img/weifuwu_img/redis%E5%A4%8D%E5%88%B6%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="复制配置文件"></p></li><li><p>修改端口和工作目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s/6379/7001/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/home\/cyx\/redis\/7001\//g&#x27;</span> 7001/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/6379/7002/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/home\/cyx\/redis\/7002\//g&#x27;</span> 7002/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/6379/7003/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/home\/cyx\/redis\/7003\//g&#x27;</span> 7003/redis.conf<br></code></pre></td></tr></table></figure></li><li><p>修改每个实例的声明IP</p><blockquote><p>虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i <span class="hljs-string">&#x27;1a slave-announce-ip 192.168.229.128&#x27;</span> 7001/redis.conf<br>sed -i <span class="hljs-string">&#x27;1a slave-announce-ip 192.168.229.128&#x27;</span> 7002/redis.conf<br>sed -i <span class="hljs-string">&#x27;1a slave-announce-ip 192.168.229.128&#x27;</span> 7003/redis.conf<br></code></pre></td></tr></table></figure></li><li><p>启动服务端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 分别启动三个服务端</span><br>[root@root src]<span class="hljs-comment"># ./redis-server ../../7001/redis.conf</span><br><br>[root@root src]<span class="hljs-comment"># ./redis-server ../../7002/redis.conf</span><br><br>[root@root src]<span class="hljs-comment"># ./redis-server ../../7003/redis.conf</span><br></code></pre></td></tr></table></figure></li><li><p>客户端连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># -p选择端口</span><br>redis-cli -p 7001<br></code></pre></td></tr></table></figure></li><li><p>配置主从节点</p><blockquote><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）</p></li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7002</span><br>redis-cli -p 7002<br><span class="hljs-comment"># 执行slaveof</span><br>slaveof 192.168.229.128 7001<br><br><span class="hljs-comment"># 连接 7003</span><br>redis-cli -p 7003<br><span class="hljs-comment"># 执行slaveof</span><br>slaveof 192.168.229.128 7001<br></code></pre></td></tr></table></figure></li><li><p>测试</p><blockquote><p>通过7001端口的主节点写入数据，在从节点也能读得到</p></blockquote></li></ul><h4 id="主从同步流程"><a href="#主从同步流程" class="headerlink" title="主从同步流程"></a>主从同步流程</h4><p><img src="/img/weifuwu_img/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%B5%81%E7%A8%8B.png" alt="主从同步流程.png"></p><p>概念</p><blockquote><ul><li><strong>Replication Id</strong>：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li><strong>offset</strong>：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li></ul><p>因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据。</p></blockquote><p>完整流程描述：</p><ul><li>slave节点请求增量同步</li><li>master节点判断replid，发现不一致，拒绝增量同步</li><li>master将完整内存数据生成RDB，发送RDB到slave</li><li>slave清空本地数据，加载master的RDB</li><li>master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave</li><li>slave执行接收到的命令，保持与master之间的同步</li></ul><h3 id="Redis哨兵"><a href="#Redis哨兵" class="headerlink" title="Redis哨兵"></a>Redis哨兵</h3><blockquote><p>Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。</p></blockquote><h4 id="哨兵作用"><a href="#哨兵作用" class="headerlink" title="哨兵作用"></a>哨兵作用</h4><p><img src="/img/weifuwu_img/Redis%E5%93%A8%E5%85%B5.png" alt="Redis哨兵"></p><p>哨兵的作用如下：</p><ul><li><strong>监控</strong>：Sentinel 会不断检查您的master和slave是否按预期工作</li><li><strong>自动故障恢复</strong>：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li><strong>通知</strong>：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><p>Sentinel如何判断一个redis实例是否健康</p><ul><li>每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线</li><li>如果大多数sentinel都认为实例主观下线，则判定服务下线</li></ul><p>故障转移步骤有哪些？</p><ul><li>首先选定一个slave作为新的master，执行slaveof no one</li><li>然后让所有节点都执行slaveof 新master</li><li>修改故障节点配置，添加slaveof 新master</li></ul><h4 id="配置哨兵节点"><a href="#配置哨兵节点" class="headerlink" title="配置哨兵节点"></a>配置哨兵节点</h4><ul><li><p>准备实例和配置</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 创建三个文件夹，存放sentinel的配置文件</span><br></code></pre></td></tr></table></figure><p><img src="/img/weifuwu_img/Redis%E5%93%A8%E5%85%B5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p></li><li><p>每个目录下创建一个sentinel.conf文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">port 27001<br>sentinel announce-ip 192.168.229.128<br>sentinel monitor mymaster 192.168.229.128 7001 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 60000<br><span class="hljs-built_in">dir</span> <span class="hljs-string">&quot;/home/cyx/redis/sentinel1&quot;</span><br></code></pre></td></tr></table></figure><p>解读：</p><ul><li><code>port 27001</code>：是当前sentinel实例的端口</li><li><code>sentinel monitor mymaster 192.168.150.101 7001 2</code>：指定主节点信息<ul><li><code>mymaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.150.101 7001</code>：主节点的ip和端口</li><li><code>2</code>：选举master时的quorum值</li></ul></li></ul></li><li><p>修改每个配置文件的端口<code>port XXX</code></p></li><li><p>启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 第1个</span><br>.<span class="hljs-regexp">/redis-sentinel ../</span>..<span class="hljs-regexp">/sentinel1/</span>sentinel.conf<br><span class="hljs-comment"># 第2个</span><br>.<span class="hljs-regexp">/redis-sentinel ../</span>..<span class="hljs-regexp">/sentinel2/</span>sentinel.conf<br><span class="hljs-comment"># 第3个</span><br>.<span class="hljs-regexp">/redis-sentinel ../</span>..<span class="hljs-regexp">/sentinel3/</span>sentinel.conf<br></code></pre></td></tr></table></figure></li><li><p>出现无法故障转移的时候，试试把从节点的slaveof 改成 slaveof 127.0.0.1 主节点端口</p></li></ul><h4 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h4><p><strong>导入坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>配置Redis地址</strong></p><p>然后在配置文件application.yml中指定redis的sentinel相关信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  redis:<br>    sentinel:<br>      master: mymaster<br>      nodes:<br>        - <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span>:<span class="hljs-number">27001</span><br>        - <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span>:<span class="hljs-number">27002</span><br>        - <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span>:<span class="hljs-number">27003</span><br></code></pre></td></tr></table></figure><p><strong>配置读写分离</strong></p><p>在项目的启动类中，添加一个新的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="hljs-title function_">clientConfigurationBuilderCustomizer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> clientConfigurationBuilder -&gt; clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个bean中配置的就是读写策略，包括四种：</p><ul><li>MASTER：从主节点读取</li><li>MASTER_PREFERRED：优先从master节点读取，master不可用才读取replica</li><li>REPLICA：从slave（replica）节点读取</li><li>REPLICA _PREFERRED：优先从slave（replica）节点读取，所有的slave都不可用才读取master</li></ul><h3 id="Redis分片集群"><a href="#Redis分片集群" class="headerlink" title="Redis分片集群"></a>Redis分片集群</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>分片集群特点</p><ul><li><p>集群中有多个master，每个master保存不同数据</p></li><li><p>每个master都可以有多个slave节点</p></li><li><p>master之间通过ping监测彼此健康状态</p></li><li><p>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p></li></ul><p>散列插槽</p><p>0~16383共16384个插槽会被分配到master节点上，</p><p>数据key不是与节点绑定，而是与插槽绑定，redis会根据key的有效部分计算插槽值</p><ul><li>key中包含”{}”，且“{}”中至少包含1个字符，“{}”中的部分是有效部分，可以通过{}来将同一类数据存储到同一个Redis实例中</li><li>key中不包含“{}”，整个key都是有效部分</li></ul><h4 id="配置分片集群实例"><a href="#配置分片集群实例" class="headerlink" title="配置分片集群实例"></a>配置分片集群实例</h4><h5 id="准备实例和配置"><a href="#准备实例和配置" class="headerlink" title="准备实例和配置"></a>准备实例和配置</h5><ul><li><p>准备实例和配置</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.229.128</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.229.128</td><td align="center">7002</td><td align="center">master</td></tr><tr><td align="center">192.168.229.128</td><td align="center">7003</td><td align="center">master</td></tr><tr><td align="center">192.168.229.128</td><td align="center">8001</td><td align="center">slave</td></tr><tr><td align="center">192.168.229.128</td><td align="center">8002</td><td align="center">slave</td></tr><tr><td align="center">192.168.229.128</td><td align="center">8003</td><td align="center">slave</td></tr></tbody></table></li><li><p>创建配置文件redis.conf</p><p><img src="/img/weifuwu_img/redis%E5%88%86%E7%89%87%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">port 6379<br><span class="hljs-comment"># 开启集群功能</span><br>cluster-enabled <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span><br>cluster-config-file /home/cyx/redis/6379/nodes.conf<br><span class="hljs-comment"># 节点心跳失败的超时时间</span><br>cluster-node-timeout 5000<br><span class="hljs-comment"># 持久化文件存放目录</span><br><span class="hljs-built_in">dir</span> /home/cyx/redis/6379<br><span class="hljs-comment"># 绑定地址</span><br><span class="hljs-built_in">bind</span> 0.0.0.0<br><span class="hljs-comment"># 让redis后台运行</span><br>daemonize <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 注册的实例ip</span><br>replica-announce-ip 192.168.229.128<br><span class="hljs-comment"># 保护模式</span><br>protected-mode no<br><span class="hljs-comment"># 数据库数量</span><br>databases 1<br><span class="hljs-comment"># 日志</span><br>logfile /home/cyx/redis/6379/run.log<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 执行拷贝</span><br><span class="hljs-attribute">echo</span> <span class="hljs-number">7001</span> <span class="hljs-number">7002</span> <span class="hljs-number">7003</span> <span class="hljs-number">8001</span> <span class="hljs-number">8002</span> <span class="hljs-number">8003</span> | xargs -t -n <span class="hljs-number">1</span> cp redis.conf<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件,将其中的6379修改为与所在目录一致</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 同时修改配置文件</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i <span class="hljs-string">&#x27;s/6379/&#123;&#125;/g&#x27;</span> &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure></li><li><p>启动&#x2F;关闭</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#同时启动所有redis</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;/redis.conf<br><br><span class="hljs-comment">#查看redis进程</span><br>ps -ef | grep redis<br><br><span class="hljs-comment">#关闭所有redis进程</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<br></code></pre></td></tr></table></figure></li></ul><h5 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h5><ul><li><p>集群管理以及集成到了redis-cli中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster create --cluster-replicas 1 192.168.229.128:7001 192.168.229.128:7002 192.168.229.128:7003 192.168.229.128:8001 192.168.229.128:8002 192.168.229.128:8003<br></code></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul></li><li><p>查看集群状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -p 7001 cluster nodes<br></code></pre></td></tr></table></figure></li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ul><li><p>添加数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 打开客户端，-c代表集群操作</span><br>redis-cli -c -p 7001<br><span class="hljs-comment"># 之后就可以CRUD了，redis根据key算出的hash值存到对应插槽中</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="操作集群"><a href="#操作集群" class="headerlink" title="操作集群"></a>操作集群</h5><ul><li><p>查看帮助文档</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="/img/weifuwu_img/Redis%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C.png"></p><ul><li><p>添加节点到集群(add-node)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加的节点是没有插槽的</span><br>redis-cli --cluster add-node 要添加的节点ip:端口 一个maser节点的ip:端口<br></code></pre></td></tr></table></figure></li><li><p>转移插槽(reshard)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster reshard 要分配插槽的Redis实例的ip:端口<br><span class="hljs-comment"># 之后会让输入要分配的插槽数量、从哪个节点移动插槽、跟着提示来就行</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><h5 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h5><blockquote><p>出现宕机的节点时，自动提升一个slave为新的master</p><p>宕机的节点重新上线时，会变成slave节点</p></blockquote><h5 id="手动故障转移"><a href="#手动故障转移" class="headerlink" title="手动故障转移"></a>手动故障转移</h5><blockquote><p>进入节点的客户端，执行cluster failover命令，这个节点就会称为master节点</p></blockquote><h4 id="RedisTemplate访问集群"><a href="#RedisTemplate访问集群" class="headerlink" title="RedisTemplate访问集群"></a>RedisTemplate访问集群</h4><p> 和哨兵模式差不多</p><ul><li>引入redis的starter依赖</li><li>配置分片集群地址 (就这步有差异)</li><li>配置读写分离</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">cluster:</span><br>      <span class="hljs-attr">nodes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:7001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:7002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:7003</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:8001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:8002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><span class="hljs-string">:8003</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务</title>
    <link href="/2022/09/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/09/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h3 id="概念、理论"><a href="#概念、理论" class="headerlink" title="概念、理论"></a>概念、理论</h3><h4 id="本地事务的四大特性"><a href="#本地事务的四大特性" class="headerlink" title="本地事务的四大特性"></a><strong>本地事务</strong>的四大特性</h4><ul><li>原子性（Atomicity）</li><li>一致性（Consistency）</li><li>隔离性（Isolation）</li><li>持久性（Durability）</li></ul><p><img src="/img/weifuwu_img/%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7.png" alt="本地事务特性"></p><h4 id="分布式事务-1"><a href="#分布式事务-1" class="headerlink" title="分布式事务"></a><strong>分布式事务</strong></h4><blockquote><p>指不是在单个服务或单个数据库架构下，产生的事务</p></blockquote><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a><strong>CAP理论</strong></h4><blockquote><p>在P一定会出现的情况下，A和C之间只能实现一个</p></blockquote><ul><li><p>Consistency（一致性）</p><blockquote><p>用户访问分布式系统中的任意节点，得到的数据必须一致。</p></blockquote></li><li><p>Availability（可用性）</p><blockquote><p>用户访问集群中的任意健康节点，必须能得到响应</p></blockquote></li><li><p>Partition tolerance （分区容错性）</p><blockquote><p>为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区</p><p>在集群出现分区时，整个系统也要持续对外提供服务</p></blockquote></li></ul><h4 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h4><blockquote><p>是对CAP的一种解决思路</p></blockquote><ul><li><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>Soft State（软状态）：</strong>在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><h4 id="事务协调者"><a href="#事务协调者" class="headerlink" title="事务协调者"></a>事务协调者</h4><p><img src="/img/weifuwu_img/%E4%BA%8B%E5%8A%A1%E5%8D%8F%E8%B0%83%E8%80%85.png" alt="事务协调者"></p><h3 id="Seate"><a href="#Seate" class="headerlink" title="Seate"></a>Seate</h3><blockquote><p>Seata 是一款开源的分布式事务解决方案</p></blockquote><p><a href="http://seata.io/">官网</a></p><p><img src="/img/weifuwu_img/Seata%E6%9E%B6%E6%9E%84.png" alt="Seata架构"></p><ul><li><p><strong>TC (Transaction Coordinator) -</strong> <strong>事务协调者：</strong>维护全局和分支事务的状态，协调全局事务提交或回滚。</p></li><li><p><strong>TM (Transaction Manager) -</strong> <strong>事务管理器：</strong>定义全局事务的范围、开始全局事务、提交或回滚全局事务。</p></li><li><p><strong>RM (Resource Manager) -</strong> <strong>资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p></li></ul><h4 id="部署TC"><a href="#部署TC" class="headerlink" title="部署TC"></a>部署TC</h4><blockquote><p>**TC (Transaction Coordinator) -**事务协调者</p></blockquote><ol><li><p>下载seata-server包并解压<a href="http://seata.io/zh-cn/blog/download.html">http</a><a href="http://seata.io/zh-cn/blog/download.html">:&#x2F;&#x2F;seata.io&#x2F;zh-cn&#x2F;blog&#x2F;download</a><a href="http://seata.io/zh-cn/blog/download.html">.</a><a href="http://seata.io/zh-cn/blog/download.html">html</a> </p></li><li><p>修改registry.conf配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs conf">registry &#123;<br>  # tc服务的注册中心类file 、nacos 、eureka、redis、zk、consul、etcd3、sofa<br>  type = &quot;nacos&quot;<br><br>  nacos &#123;<br># seata tc 服务注册到 nacos的服务名称，可以自定义<br>    application = &quot;seata-tc-server&quot;<br>    serverAddr = &quot;127.0.0.1:8848&quot;<br>    group = &quot;DEFAULT_GROUP&quot;<br>    namespace = &quot;&quot;<br># 集群名<br>    cluster = &quot;default&quot;<br>    username = &quot;nacos&quot;<br>    password = &quot;nacos&quot;<br>  &#125;<br>  <br>&#125;<br><br>config &#123;<br>  # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置<br>  # file、nacos 、apollo、zk、consul、etcd3<br>  type = &quot;nacos&quot;<br><br>  nacos &#123;<br>    serverAddr = &quot;127.0.0.1:8848&quot;<br>    namespace = &quot;&quot;<br>    group = &quot;SEATA_GROUP&quot;<br>    username = &quot;nacos&quot;<br>    password = &quot;nacos&quot;<br>    dataId = &quot;seataServer.properties&quot;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>nacos添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 数据存储方式，db代表数据库</span><br><span class="hljs-attr">store.mode</span>=<span class="hljs-string">db</span><br><span class="hljs-attr">store.db.datasource</span>=<span class="hljs-string">druid</span><br><span class="hljs-attr">store.db.dbType</span>=<span class="hljs-string">mysql</span><br><span class="hljs-attr">store.db.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">store.db.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true&amp;serverTimezone=UTC</span><br><span class="hljs-attr">store.db.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">store.db.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">store.db.minConn</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">store.db.maxConn</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">store.db.globalTable</span>=<span class="hljs-string">global_table</span><br><span class="hljs-attr">store.db.branchTable</span>=<span class="hljs-string">branch_table</span><br><span class="hljs-attr">store.db.queryLimit</span>=<span class="hljs-string">100</span><br><span class="hljs-attr">store.db.lockTable</span>=<span class="hljs-string">lock_table</span><br><span class="hljs-attr">store.db.maxWait</span>=<span class="hljs-string">5000</span><br><span class="hljs-comment"># 事务、日志等配置</span><br><span class="hljs-attr">server.recovery.committingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.rollbackingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.timeoutRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.maxCommitRetryTimeout</span>=<span class="hljs-string">-1</span><br><span class="hljs-attr">server.maxRollbackRetryTimeout</span>=<span class="hljs-string">-1</span><br><span class="hljs-attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">server.undo.logSaveDays</span>=<span class="hljs-string">7</span><br><span class="hljs-attr">server.undo.logDeletePeriod</span>=<span class="hljs-string">86400000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 客户端与服务端传输方式</span><br><span class="hljs-attr">transport.serialization</span>=<span class="hljs-string">seata</span><br><span class="hljs-attr">transport.compressor</span>=<span class="hljs-string">none</span><br><span class="hljs-comment"># 关闭metrics功能，提高性能</span><br><span class="hljs-attr">metrics.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">metrics.registryType</span>=<span class="hljs-string">compact</span><br><span class="hljs-attr">metrics.exporterList</span>=<span class="hljs-string">prometheus</span><br><span class="hljs-attr">metrics.exporterPrometheusPort</span>=<span class="hljs-string">9898</span><br></code></pre></td></tr></table></figure></li><li><p>创建数据库seata，tc服务在管理分布式事务时，需要记录事务相关数据到数据库中，需要提前创建好这些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SET</span> NAMES utf8mb4;<br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- 分支事务表</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `branch_table`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `branch_table`  (<br>  `branch_id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `xid` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `resource_group_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `resource_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">256</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `branch_type` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">8</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `status` TINYINT(<span class="hljs-number">4</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `client_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `application_data` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` DATETIME(<span class="hljs-number">6</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_modified` DATETIME(<span class="hljs-number">6</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`branch_id`) <span class="hljs-keyword">USING</span> BTREE,<br>  INDEX `idx_xid`(`xid`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> INNODB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> COMPACT;<br><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- 全局事务表</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `global_table`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `global_table`  (<br>  `xid` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `status` TINYINT(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `application_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_service_group` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `transaction_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `timeout` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `begin_time` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `application_data` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2000</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` DATETIME <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_modified` DATETIME <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`xid`) <span class="hljs-keyword">USING</span> BTREE,<br>  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) <span class="hljs-keyword">USING</span> BTREE,<br>  INDEX `idx_transaction_id`(`transaction_id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> INNODB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> COMPACT;<br><br><span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>seata的bin目录下执行seata-server.bat来启动TC</p></li></ol><h4 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata</h4><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--seata--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置tc地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span> <span class="hljs-comment"># 注册中心类型 nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span> <span class="hljs-comment"># nacos地址</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># namespace，默认为空</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span> <span class="hljs-comment"># 分组，默认是DEFAULT_GROUP</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-tc-server</span> <span class="hljs-comment"># seata服务名称</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>  <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">seata-demo</span> <span class="hljs-comment"># 事务组名称</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">vgroup-mapping:</span> <span class="hljs-comment"># 事务组与cluster的映射关系</span><br>      <span class="hljs-attr">seata-demo:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Seata的分布式事务解决方案"><a href="#Seata的分布式事务解决方案" class="headerlink" title="Seata的分布式事务解决方案"></a>Seata的分布式事务解决方案</h4><p>Seata提供了四种不同的分布式事务解决方案：</p><ul><li><p>XA模式：<strong>强一致性</strong>分阶段事务模式，牺牲了一定的可用性，无业务侵入</p><blockquote><p>事务协调者通知每个事物参与者执行本地事务，只有事务都成功了才提交</p><p>优点：实现简单，并且没有代码侵入</p><p>缺点：性能较差</p></blockquote></li><li><p>TCC模式：最终一致的分阶段事务模式，有业务侵入</p><blockquote><ul><li>Try：资源的检测和<strong>预留</strong>； </li><li>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</li><li>Cancel：预留资源释放，可以理解为try的反向操作。</li></ul><p>优点：无需生成快照，无需使用全局锁，性能最强</p><p>缺点：<strong>有代码侵入</strong>，需要人为编写try、Confirm和Cancel接口，存在软状态</p></blockquote></li><li><p>AT模式：<strong>最终一致</strong>的分阶段事务模式，无业务侵入，也是Seata的默认模式</p><blockquote><p>完成事务直接提交，通过记录undo-log（数据快照）实现事务回滚，解决XA性能差的问题</p><p>优点：性能好，并且没有代码侵入</p><p>缺点：AT在一阶段和二阶段之间为软状态</p></blockquote></li><li><p>SAGA模式：长事务模式，有业务侵入</p></li></ul><h5 id="实现XA模式"><a href="#实现XA模式" class="headerlink" title="实现XA模式"></a><strong>实现XA模式</strong></h5><ul><li><p>配置开启XA模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">data-source-proxy-mode:</span> <span class="hljs-string">XA</span><br></code></pre></td></tr></table></figure></li><li><p>给发起全局事务的入口方法添加@GlobalTransactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实例</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@GlobalTransactional</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">create</span><span class="hljs-params">(Order order)</span> &#123;<br>    <span class="hljs-comment">// 创建订单</span><br>    orderMapper.insert(order);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 扣用户余额</span><br>        accountClient.deduct(order.getUserId(), order.getMoney());<br>        <span class="hljs-comment">// 扣库存</span><br>        storageClient.deduct(order.getCommodityCode(), order.getCount());<br><br>    &#125; <span class="hljs-keyword">catch</span> (FeignException e) &#123;<br>        log.error(<span class="hljs-string">&quot;下单失败，原因:&#123;&#125;&quot;</span>, e.contentUTF8(), e);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e.contentUTF8(), e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> order.getId();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启服务。 只有所有事务都成功，TC才会通知微服务提交事务</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4></li></ul><h5 id="实现AT模式"><a href="#实现AT模式" class="headerlink" title="实现AT模式"></a>实现AT模式</h5><ul><li><p>创建两张数据库表，记录全局锁，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库</p></li><li><p>配置开启AT模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">data-source-proxy-mode:</span> <span class="hljs-string">AT</span><br></code></pre></td></tr></table></figure></li><li><p>给发起全局事务的入口方法添加@GlobalTransactional注解</p></li><li><p>重启服务</p></li></ul><h5 id="实现TCC模式"><a href="#实现TCC模式" class="headerlink" title="实现TCC模式"></a>实现TCC模式</h5><p>概念：</p><ul><li>空回滚：在未执行try操作时先执行了cancel操作</li><li>业务悬挂：对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态</li></ul><p>实例：</p><ul><li><p>创建表,用于存储回滚时需要恢复的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">REATE <span class="hljs-keyword">TABLE</span> `account_freeze_tbl`  (<br>  `xid` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_id` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `freeze_money` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) UNSIGNED <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>  `state` <span class="hljs-type">INT</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;事务状态，0:try，1:confirm，2:cancel&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`xid`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> INNODB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> COMPACT;<br></code></pre></td></tr></table></figure><ul><li>xid：是全局事务id</li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul></li><li><p>声明TCC接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.account.service;<br><br><span class="hljs-comment">//声明为TCC事务</span><br><span class="hljs-meta">@LocalTCC</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountTCCService</span> &#123;<br><br>    <span class="hljs-comment">//Try</span><br>    <span class="hljs-meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;, commitMethod = &quot;confirm&quot;, rollbackMethod = &quot;cancel&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deduct</span><span class="hljs-params">(<span class="hljs-meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> String userId,</span><br><span class="hljs-params">                <span class="hljs-meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span> <span class="hljs-type">int</span> money)</span>;<br><br>    <span class="hljs-comment">//Confirm</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(BusinessActionContext ctx)</span>;<br><br>    <span class="hljs-comment">//Cancel</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(BusinessActionContext ctx)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现TCC接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.account.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountTccServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountTCCService</span> &#123;<br><br>    <span class="hljs-comment">//记录事务状态</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountFreezeMapper accountFreezeMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountMapper accountMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deduct</span><span class="hljs-params">(String userId, <span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-comment">//获取事务id</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">xid</span> <span class="hljs-operator">=</span> RootContext.getXID();<br>        <span class="hljs-comment">//是否业务悬挂</span><br>        <span class="hljs-keyword">if</span> (accountFreezeMapper.selectById(xid) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//证明业务已经执行过一次</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//执行业务操作</span><br>        accountMapper.deduct(userId, money);<br>        <span class="hljs-comment">//记录事务状态</span><br>        <span class="hljs-type">AccountFreeze</span> <span class="hljs-variable">freeze</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountFreeze</span>();<br>        freeze.setXid(xid);<br>        freeze.setUserId(userId);<br>        freeze.setFreezeMoney(money);<br>        freeze.setState(AccountFreeze.State.TRY);   <span class="hljs-comment">//设置事务状态为Try</span><br>        <span class="hljs-comment">//提交事务状态</span><br>        accountFreezeMapper.insert(freeze);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(BusinessActionContext ctx)</span> &#123;<br>        <span class="hljs-comment">//都成功后提交事务</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">xid</span> <span class="hljs-operator">=</span> ctx.getXid();<br>        <span class="hljs-comment">//删除冻结记录</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> accountFreezeMapper.deleteById(xid);<br><br>        <span class="hljs-keyword">return</span> count == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(BusinessActionContext ctx)</span> &#123;<br>        <span class="hljs-comment">//失败回滚事务</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">xid</span> <span class="hljs-operator">=</span> ctx.getXid();<br>        <span class="hljs-comment">//判断是否空回滚</span><br>        <span class="hljs-keyword">if</span>(accountFreezeMapper.selectById(xid) == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">AccountFreeze</span> <span class="hljs-variable">freeze</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountFreeze</span>();<br>            freeze.setXid(xid);<br>            freeze.setFreezeMoney(<span class="hljs-number">0</span>);<br>            freeze.setUserId(ctx.getActionContext(<span class="hljs-string">&quot;userId&quot;</span>).toString());<br>            freeze.setState(AccountFreeze.State.CANCEL);<br>            accountFreezeMapper.insert(freeze);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">AccountFreeze</span> <span class="hljs-variable">freeze</span> <span class="hljs-operator">=</span> accountFreezeMapper.selectById(xid);<br>        accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney()); <span class="hljs-comment">//自定义的方法，用于恢复之前的数据</span><br>        <span class="hljs-comment">//将事务状态改为CANCEL，并清空冻结金额</span><br>        freeze.setFreezeMoney(<span class="hljs-number">0</span>);<br>        freeze.setState(AccountFreeze.State.CANCEL);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> accountFreezeMapper.updateById(freeze);<br><br>        <span class="hljs-keyword">return</span> count == <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式搜索(2)</title>
    <link href="/2022/09/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2(2)/"/>
    <url>/2022/09/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式搜索-2"><a href="#分布式搜索-2" class="headerlink" title="分布式搜索(2)"></a>分布式搜索(2)</h2><h3 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h3><blockquote><p>对数据进行分类</p><p>参加聚合的字段必须是keyword、日期、数值、布尔类型</p></blockquote><h4 id="聚合种类"><a href="#聚合种类" class="headerlink" title="聚合种类"></a>聚合种类</h4><p>常见聚合：</p><ul><li><strong>桶（Bucket）</strong>聚合：用来对文档做分组<ul><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li><strong>度量（Metric）</strong>聚合：用以计算一些值，比如：最大值、最小值、平均值等<ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li></ul></li><li><strong>管道（pipeline）</strong>聚合：其它聚合的结果为基础做聚合</li></ul><h4 id="DSL聚合语法"><a href="#DSL聚合语法" class="headerlink" title="DSL聚合语法"></a>DSL聚合语法</h4><p><strong>桶聚合(Bucket)</strong></p><ul><li><p>TermAggregation实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 定义聚合</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//给聚合起个名字</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合的类型，按照品牌值聚合，所以选择term</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 参与聚合的字段</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-comment">// 希望获取的聚合结果数量</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span># 按照数量升序排序<br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>          <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>指定聚合范围，默认对所有文档聚合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"># bucket<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span># 只对查询到的结果进行聚合<br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>          <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>度量（Metric）</strong></p><blockquote><p>对聚合后的桶里的文档进行运算</p></blockquote><ul><li><p>Stats实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 是brands聚合的子聚合，也就是分组后对每组分别计算</span><br>        <span class="hljs-attr">&quot;score_stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合名称</span><br>          <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合类型，这里stats可以计算min、max、avg等</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;score&quot;</span> <span class="hljs-comment">// 聚合的字段，这里是对score进行运算</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="RestAPI聚合语法"><a href="#RestAPI聚合语法" class="headerlink" title="RestAPI聚合语法"></a>RestAPI聚合语法</h4><ul><li><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBucket</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//2.组织DSL参数</span><br>    <span class="hljs-comment">//2.1 query</span><br>    searchRequest.source().query(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">200</span>));<br>    <span class="hljs-comment">//2.2 size</span><br>    searchRequest.source().size(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//2.3 aggs</span><br>    searchRequest.source().aggregation(AggregationBuilders<br>                                       .terms(<span class="hljs-string">&quot;brandAgg&quot;</span>)  <span class="hljs-comment">//聚合类型和聚合名</span><br>                                       .field(<span class="hljs-string">&quot;brand&quot;</span>)           <span class="hljs-comment">//聚合的字段</span><br>                                       .order(BucketOrder.count(<span class="hljs-literal">true</span>)) <span class="hljs-comment">//排序</span><br>                                       .size(<span class="hljs-number">10</span>));     <span class="hljs-comment">//希望获取的聚合结果数量</span><br><br>    <span class="hljs-comment">//3.发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">//解析结果</span><br>    <span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations(); <span class="hljs-comment">//获得聚合集</span><br>    <span class="hljs-type">Terms</span> <span class="hljs-variable">brandAgg</span> <span class="hljs-operator">=</span> aggregations.get(<span class="hljs-string">&quot;brandAgg&quot;</span>);  <span class="hljs-comment">//获取指定的聚合</span><br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandAgg.getBuckets();   <span class="hljs-comment">//获取桶</span><br>    <span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">keyAsString</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>        System.out.println(keyAsString);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><h4 id="安装拼音分词器插件"><a href="#安装拼音分词器插件" class="headerlink" title="安装拼音分词器插件"></a>安装拼音分词器插件</h4><ul><li><p>下载<a href="https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v8.4.1">Release v8.4.1 · medcl&#x2F;elasticsearch-analysis-pinyin (github.com)</a></p></li><li><p>查看插件挂载的数据卷</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">volume</span><span class="language-bash"> inspect es-plugins</span><br></code></pre></td></tr></table></figure></li><li><p>将下载的插件解压到目录下</p></li><li><p>重启</p></li><li><p>测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;拼音分词器&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="自定义拼音分词器"><a href="#自定义拼音分词器" class="headerlink" title="自定义拼音分词器"></a>自定义拼音分词器</h4><p>elasticsearch中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分词；还有ik_smart</li><li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><ul><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义分词器</span><br>        <span class="hljs-attr">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// 分词器名称</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><span class="hljs-comment">//过滤器名</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义tokenizer filter</span><br>        <span class="hljs-attr">&quot;py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 过滤器名称</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 过滤器类型，这里是pinyin</span><br>  <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//创建时使用的分词器</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-comment">//查询时使用的分词器，防止搜汉字时搜到同音字</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="自动补全查询"><a href="#自动补全查询" class="headerlink" title="自动补全查询"></a>自动补全查询</h4><blockquote><p>参与补全查询的字段必须是<strong>completion</strong>类型。</p><p>字段的内容一般是用来补全的多个词条形成的数组。</p></blockquote><ul><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 创建索引库</span><br>PUT test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// 示例数据</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Sony&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;WH-1000XM3&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;SK-II&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PITERA&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Nintendo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;switch&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// 自动补全查询</span><br>GET /test/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title_suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 关键字</span><br>      <span class="hljs-attr">&quot;completion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 补全查询的字段</span><br>        <span class="hljs-attr">&quot;skip_duplicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 跳过重复的</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span> <span class="hljs-comment">// 获取前10条结果</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p>RestAPI补全语法</p><ul><li><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSuggest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    searchRequest.source().suggest(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestBuilder</span>()<br>                                   .addSuggestion(<span class="hljs-string">&quot;suggestions&quot;</span>, SuggestBuilders<br>                                                  .completionSuggestion(<span class="hljs-string">&quot;suggestion&quot;</span>)<br>                                                  .prefix(<span class="hljs-string">&quot;h&quot;</span>)<br>                                                  .skipDuplicates(<span class="hljs-literal">true</span>)<br>                                                  .size(<span class="hljs-number">10</span>))<br>                                  );<br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">//解析结果</span><br>    <span class="hljs-type">Suggest</span> <span class="hljs-variable">suggest</span> <span class="hljs-operator">=</span> response.getSuggest();<br>    <span class="hljs-type">CompletionSuggestion</span> <span class="hljs-variable">suggestion</span> <span class="hljs-operator">=</span> suggest.getSuggestion(<span class="hljs-string">&quot;suggestions&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (CompletionSuggestion.Entry.Option option : suggestion.getOptions()) &#123;<br>        System.out.println(option.getText().string());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>方式一：同步调用</p><ul><li>优点：实现简单，粗暴</li><li>缺点：直接调接口，业务耦合度高</li></ul><p>方式二：异步通知</p><ul><li>优点：低耦合，实现难度一般</li><li>缺点：依赖mq的可靠性</li></ul><p>方式三：监听binlog</p><ul><li>优点：完全解除服务间耦合</li><li>缺点：开启binlog(类似主从复制)增加数据库负担、实现复杂度高</li></ul><h4 id="通过mq来实现数据同步"><a href="#通过mq来实现数据同步" class="headerlink" title="通过mq来实现数据同步"></a>通过mq来实现数据同步</h4><p>步骤：</p><ol><li>导入依赖，写配置，在消费者端创建交换机、消息队列</li><li>生产者端导入依赖，写配置，通过RabbitTemplate发送消息</li><li>消费者端监听消息队列，通过获取的消息更新索引表</li><li>测试</li></ol><p>实例</p><p><strong>消费者端</strong></p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--amqp--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure></li><li><p>创建交换机、队列和key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">topicExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(HOTEL_EXCHANGE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改消息队列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">insertQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(HOTEL_INSERT_QUEUE, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除消息队列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">deleteQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(HOTEL_DELETE_QUEUE, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">insertQueueBinding</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(HOTEL_INSERT_KEY);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">deleteQueueBinding</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(HOTEL_DELETE_KEY);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.mq;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建消息队列的监听器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelListener</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService service;<br><br>    <span class="hljs-meta">@RabbitListener(queues = HOTEL_INSERT_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerHotelInsertOrUpdate</span><span class="hljs-params">(Long id)</span> &#123;<br>        service.insertById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = HOTEL_DELETE_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerHotelDelete</span><span class="hljs-params">(Long id)</span> &#123;<br>        service.deleteById(id);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>生产者端</strong></p><ul><li><p>导入依赖、填写配置</p></li><li><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.web;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;hotel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Hotel <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> hotelService.getById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">hotelList</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;1&quot;)</span> Integer size</span><br><span class="hljs-params">    )</span>&#123;<br>        Page&lt;Hotel&gt; result = hotelService.page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, size));<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(result.getTotal(), result.getRecords());<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveHotel</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Hotel hotel)</span>&#123;<br>        hotelService.save(hotel);<br><br>        <span class="hljs-comment">//将修改的数据id发到队列</span><br>        rabbitTemplate.convertAndSend(HOTEL_EXCHANGE, HOTEL_INSERT_KEY, hotel.getId());<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Hotel hotel)</span>&#123;<br>        <span class="hljs-keyword">if</span> (hotel.getId() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidParameterException</span>(<span class="hljs-string">&quot;id不能为空&quot;</span>);<br>        &#125;<br>        hotelService.updateById(hotel);<br><br>        <span class="hljs-comment">//将修改的数据id发到队列</span><br>        rabbitTemplate.convertAndSend(HOTEL_EXCHANGE, HOTEL_INSERT_KEY, hotel.getId());<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        hotelService.removeById(id);<br><br>        <span class="hljs-comment">//将删除的数据id发到队列</span><br>        rabbitTemplate.convertAndSend(HOTEL_EXCHANGE, HOTEL_DELETE_KEY, id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="es集群"><a href="#es集群" class="headerlink" title="es集群"></a>es集群</h3><p>概念：</p><ul><li><p>集群（cluster）：一组拥有共同的 cluster name 的 节点。</p></li><li><p>节点（node)  ：集群中的一个 Elasticearch 实例</p></li><li><p>分片（shard）：索引可以被拆分为不同的部分进行存储，称为分片。在集群环境下，一个索引的不同分片可以拆分到不同的节点中</p><p>解决问题：数据量太大，单点存储量有限的问题。</p></li></ul><h4 id="集群职责划分"><a href="#集群职责划分" class="headerlink" title="集群职责划分"></a>集群职责划分</h4><p><img src="/img/weifuwu_img/es%E9%9B%86%E7%BE%A4%E5%88%92%E5%88%86.png"></p><p>默认情况下，集群中的任何一个节点都同时具备上述四种角色。但是真实的集群一定要将集群职责分离</p><h4 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h4><blockquote><p>因为节点失联导致出现多个主节点</p></blockquote><p>解决脑裂的方案是，要求选票超过 ( eligible节点数量 + 1 ）&#x2F; 2 才能当选为主，因此eligible节点数量最好是奇数。对应配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题</p><h4 id="集群分布式存储-x2F-查询"><a href="#集群分布式存储-x2F-查询" class="headerlink" title="集群分布式存储&#x2F;查询"></a>集群分布式存储&#x2F;查询</h4><p><strong>存储</strong></p><p>elasticsearch会通过hash算法来计算文档应该存储到哪个分片</p><p><code>shard = hash(_routing) % number_of_shards</code></p><ul><li>_routing: 默认是文档id</li><li>number_of_shards：分片数，此索引库一旦创建，分片数量不能修改</li></ul><p><strong>查询</strong></p><p>查询分成两个阶段：</p><ul><li><p>scatter phase：分散阶段，coordinating node会把请求分发到每一个分片</p></li><li><p>gather phase：聚集阶段，coordinating node汇总data node的搜索结果，并处理为最终结果集返回给用户</p></li></ul><h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><p>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即<strong>将宕机节点的分片数据迁移到其它节点</strong>，确保数据安全，这个叫做故障转移。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口限流</title>
    <link href="/2022/09/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/"/>
    <url>/2022/09/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="接口限流"><a href="#接口限流" class="headerlink" title="接口限流"></a>接口限流</h2><h3 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h3><blockquote><p>由阿里巴巴中间件团队开发的开源项目，是一种面向分布式微服务架构的轻量级高可用<strong>流量控制</strong>组件</p><p>提供了流量控制、熔断降级、系统负载保护等多个维度来保障服务之间的稳定性</p></blockquote><p><img src="/img/weifuwu_img/sentinel.png" alt="sentinel"></p><p>sentinel分为两部分：</p><ul><li>sentinel-dashboard(控制面板)：提供实时监控之外，还提供了流控规则、熔断规则的在线维护等功能</li><li>客户端整合：每个微服务客户端都需要整合sentinel的客户端封装与配置，才能将监控信息上报给dashboard展示以及实时的更改限流或熔断规则等。</li></ul><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h5 id="部署Sentinel-Dashboard"><a href="#部署Sentinel-Dashboard" class="headerlink" title="部署Sentinel Dashboard"></a>部署Sentinel Dashboard</h5><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">sentinel-dashboard</a></p><ul><li><p>运行jar包</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ldif">java -jar sentinel-dashboard-1.8.3.jar<br><br><span class="hljs-comment">#后面可跟参数</span><br><span class="hljs-literal">-</span>Dserver.port=8080 <span class="hljs-comment">#设置端口，默认8080</span><br><span class="hljs-literal">-</span>Dsentinel.dashboard.auth.username=sentinel<span class="hljs-comment">#设置用户名, 默认sentinel</span><br><span class="hljs-literal">-</span>Dsentinel.dashboard.auth.password=123456<span class="hljs-comment">#设置密码, 默认sentinel</span><br></code></pre></td></tr></table></figure></li><li><p>访问<code>localhost:8080</code>来打开控制面板</p></li></ul><h5 id="客户端整合Sentinel"><a href="#客户端整合Sentinel" class="headerlink" title="客户端整合Sentinel"></a>客户端整合Sentinel</h5><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--sentinel--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Sentinel Dashboard的访问地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span>   <span class="hljs-comment"># 控制面板端口</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">alibaba-sentinel-rate-limiting</span>  <span class="hljs-comment"># 服务名</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span>  <span class="hljs-comment"># 服务端口</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个访问的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问此接口和控制台</p><p><img src="/img/weifuwu_img/sentinel%E4%BE%8B%E5%AD%90.png" alt="sentinel例子"></p><p><img src="/img/weifuwu_img/sentinel%E6%8E%A7%E5%88%B6%E5%8F%B0.png" alt="sentinel控制台"></p></li></ul><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><h5 id="配置限流规则"><a href="#配置限流规则" class="headerlink" title="配置限流规则"></a>配置限流规则</h5><blockquote><p>对访问某个接口的所有请求进行限流</p></blockquote><p><img src="/img/weifuwu_img/sentinel%E6%B5%81%E6%8E%A7.png" alt="sentinel流控"></p><p><img src="/img/weifuwu_img/sentinel%E6%96%B0%E5%A2%9E%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99.png" alt="sentinel新增流控规则"></p><p>流控模式：</p><ul><li><p>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认模式。</p></li><li><p>关联：统计与当前相关的另一个资源，触发阈值时，对当前资源限流。</p></li><li><p>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</p><blockquote><p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。</p><p>我们需要关闭这种对SpringMVC的资源聚合</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">web-context-unify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 关闭context整合</span><br></code></pre></td></tr></table></figure></li></ul><p>流控效果：</p><ul><li>快速失效：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</li><li>warm up：预热模式，对超出阈值的请求同样是拒绝，并抛出异常。但这种模式阈值会动态变化，从一个较小的值逐渐增加到最大值。</li><li>排队等待：让所有请求按照先后次序排队执行，两个请求的间隔不能小于指定时长。对流量进行整形，将波动的qps整形成平滑的直线。</li></ul><h5 id="配置热点参数限流"><a href="#配置热点参数限流" class="headerlink" title="配置热点参数限流"></a>配置热点参数限流</h5><blockquote><p>粒度更细，对访问某个接口的指定参数进行限流</p></blockquote><ul><li><p>热点参数限流对默认的SpringMVC是无效的，添加@SentinelResource注解开启热点限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SentinelResource(&quot;hot&quot;)</span>    <span class="hljs-comment">//设置资源名</span><br><span class="hljs-meta">@GetMapping(&quot;/hot&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hot</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String id)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;热点参数&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过控制面板设置</p><p><img src="/img/weifuwu_img/%E7%83%AD%E7%82%B9%E8%A7%84%E5%88%991.png" alt="热点规则1"></p><p><img src="/img/weifuwu_img/%E7%83%AD%E7%82%B9%E8%A7%84%E5%88%992.png" alt="热点规则2"></p></li></ul><h4 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h4><blockquote><p>对访问某个接口的线程进行限制</p></blockquote><h5 id="FeignClient整合Sentinel"><a href="#FeignClient整合Sentinel" class="headerlink" title="FeignClient整合Sentinel"></a>FeignClient整合Sentinel</h5><blockquote><p>将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断。</p><p>SpringCloud版本为&lt;spring-cloud.version&gt;Hoxton.SR8&lt;&#x2F;spring-cloud.version&gt;</p><p>循环依赖可能是版本问题</p></blockquote><p>Feign整合Sentinel的步骤：</p><ul><li>在application.yml中配置：feign.sentienl.enable&#x3D;true</li><li>给FeignClient编写FallbackFactory并注册为Bean</li><li>将FallbackFactory配置到FeignClient</li></ul><ul><li><p>在用到feign的类的配置中开启sentinel功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对sentinel的支持</span><br></code></pre></td></tr></table></figure></li><li><p>编写失败降级逻辑</p><blockquote><p>业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。</p><p>给FeignClient编写失败后的降级逻辑</p><p>①方式一：FallbackClass，无法对远程调用的异常做处理</p><p>②方式二：FallbackFactory，可以对远程调用的异常做处理</p></blockquote><p>在feign-api包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.client.fallback;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserClient <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClient</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(Long id)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;查询用户异常&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>将UserClientFallbackFactory注册为一个bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserClientFallbackFactory <span class="hljs-title function_">userClientFallbackFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClientFallbackFactory</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在用到feign的类上记得在启动类上设置默认配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;,defaultConfiguration = DefaultFeignConfiguration.class)</span><br></code></pre></td></tr></table></figure></li><li><p>在feing-api项目中的UserClient接口中使用UserClientFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.client;<br><br><span class="hljs-comment">//注意是fallbackFactory不是fallback</span><br><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重启服务</p></li></ul><h5 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h5><p>线程隔离的两种手段</p><ul><li><p>信号量隔离</p></li><li><p>线程池隔离</p></li></ul><p>信号量隔离的特点</p><ul><li>基于计数器模式，简单，开销小，适合高扇出的场景</li></ul><p>线程池隔离的特点</p><ul><li>基于线程池模式，有额外开销，但隔离控制更强</li></ul><h5 id="配置隔离规则"><a href="#配置隔离规则" class="headerlink" title="配置隔离规则"></a>配置隔离规则</h5><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E9%9A%94%E7%A6%BB%E8%A7%84%E5%88%991.png" alt="配置隔离规则1"></p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E9%9A%94%E7%A6%BB%E8%A7%84%E5%88%992.png" alt="配置隔离规则2"></p><h5 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h5><blockquote><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p></blockquote><p>熔断策略：</p><ul><li>慢调用：当响应时间大于设定的值(RT)时，为一次慢调用。若慢调用的次数大于设定的阈值，请求数量超过设定的最小数量，则会触发熔断</li><li>异常比例：单位时间里出现异常的比例大于设置的比例，则会触发熔断</li><li>异常数: 单位时间里出现异常的比例大于设置的数值，则会触发熔断</li></ul><p><strong>配置慢调用</strong></p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E6%85%A2%E8%B0%83%E7%94%A81.png" alt="配置慢调用1"></p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E6%85%A2%E8%B0%83%E7%94%A82.png" alt="配置慢调用2"></p><p><strong>配置异常比例&#x2F;异常数</strong></p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E5%BC%82%E5%B8%B8%E6%AF%94%E4%BE%8B%E5%92%8C%E5%BC%82%E5%B8%B8%E6%95%B0.png" alt="配置异常比例和异常数"></p><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><blockquote><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p><p>只对有授权的请求提供服务</p></blockquote><p>默认情况下，sentinel对一切请求的来源都被认为是一样的值default。</p><ul><li><p>自定义请求来源解析器</p><blockquote><p>配置授权规则时会根据解析器的返回值来判断请求来源</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.order.sentinel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义来源解析器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderOriginParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestOriginParser</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseOrigin</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//从请求头获取来源信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;origin&quot;</span>);<br><span class="hljs-comment">//请求头中没有&quot;origin&quot;，则默认值为&quot;blank&quot;</span><br>        <span class="hljs-keyword">if</span> (StringUtil.isEmpty(origin)) &#123;<br>            origin = <span class="hljs-string">&quot;blank&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> origin;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过配置，给网关添加过滤器</p><blockquote><p>通过网关的请求都会被加上origin的请求头，值为”gateway”</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">default-filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=origin,gateway</span><br></code></pre></td></tr></table></figure></li><li><p>配置授权规则</p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%991.png" alt="配置授权规则1"></p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E6%8E%88%E6%9D%83%E8%A7%84%E5%88%992.png" alt="配置授权规则2"></p></li></ul><h4 id="自定义异常结果"><a href="#自定义异常结果" class="headerlink" title="自定义异常结果"></a>自定义异常结果</h4><blockquote><p>发生限流、降级、授权拦截时，都会抛出异常到调用方，异常结果都是flow limmiting（限流）</p></blockquote><p><strong>异常种类</strong></p><table><thead><tr><th><strong>异常</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FlowException</td><td>限流异常</td></tr><tr><td>ParamFlowException</td><td>热点参数限流的异常</td></tr><tr><td>DegradeException</td><td>降级异常</td></tr><tr><td>AuthorityException</td><td>授权规则异常</td></tr><tr><td>SystemBlockException</td><td>系统规则异常</td></tr></tbody></table><p>通过自定义堵塞异常处理器来自定义返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.order.sentinel;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;未知错误&quot;</span>;    <span class="hljs-comment">//异常信息</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">429</span>;   <span class="hljs-comment">//状态码</span><br><br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FlowException) &#123;<br>            msg = <span class="hljs-string">&quot;请求被限流了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ParamFlowException) &#123;<br>            msg = <span class="hljs-string">&quot;请求被热点参数限流&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> DegradeException) &#123;<br>            msg = <span class="hljs-string">&quot;请求被降级了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AuthorityException) &#123;<br>            msg = <span class="hljs-string">&quot;没有权限访问&quot;</span>;<br>            status = <span class="hljs-number">401</span>;<br>        &#125;<br><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        response.setStatus(status);<br>        response.getWriter().println(<span class="hljs-string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="hljs-string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式搜索(1)</title>
    <link href="/2022/09/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/09/13/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式搜索-1"><a href="#分布式搜索-1" class="headerlink" title="分布式搜索(1)"></a>分布式搜索(1)</h2><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><blockquote><p>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</p></blockquote><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>elastic stack（ELK）: 是以elasticsearch为核心的技术栈，包括beats、Logstash、kibana、elasticsearch</p><p>正向索引：根据id索引来查找文档</p><p>倒排索引：根据搜索的词条找id再找文档</p><h4 id="安装es"><a href="#安装es" class="headerlink" title="安装es"></a>安装es</h4><p>创建一个网络, 让es和kibana容器互联</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">docker network create es-<span class="hljs-built_in">net</span><br></code></pre></td></tr></table></figure><ul><li><p>拉取镜像(体积比较大，下载时间可能比较长)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull elasticsearch:<span class="hljs-number">7</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run -d <span class="hljs-string">\</span><br>--name es <span class="hljs-string">\</span><br>    -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="hljs-string">\</span><br>    -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> <span class="hljs-string">\</span><br>    -v es-data:/usr/share/elasticsearch/data <span class="hljs-string">\</span><br>    -v es-plugins:/usr/share/elasticsearch/plugins <span class="hljs-string">\</span><br>    --privileged <span class="hljs-string">\</span><br>    --network es-net <span class="hljs-string">\</span><br>    -p <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> <span class="hljs-string">\</span><br>    -p <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> <span class="hljs-string">\</span><br>elasticsearch:<span class="hljs-number">7.12</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><h4 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h4><blockquote><p>kibana可以给我们提供一个elasticsearch的可视化界面</p></blockquote><ul><li><p>拉取镜像(一定要和es版本一样)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull kibana:<span class="hljs-number">7</span>.<span class="hljs-number">12</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d \<br>--name kibana \<br>-e <span class="hljs-attribute">ELASTICSEARCH_HOSTS</span>=http://es:9200 \<br><span class="hljs-attribute">--network</span>=es-net \<br>-p 5601:5601  \<br>kibana:7.12.1<br></code></pre></td></tr></table></figure></li></ul><p>命令解释</p><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><h4 id="安装ik"><a href="#安装ik" class="headerlink" title="安装ik"></a>安装ik</h4><blockquote><p>es内置的分词器不支持中文。ik分词器是一个标准的中文分词器</p></blockquote><ul><li><p>在线安装(速度慢)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 进入容器内部</span><br>docker exec -it elasticsearch <span class="hljs-regexp">/bin/</span>bash<br><br><span class="hljs-comment"># 在线下载并安装</span><br>.<span class="hljs-regexp">/bin/</span>elasticsearch-plugin  install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/medcl/</span>elasticsearch-analysis-ik<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v7.12.1/</span>elasticsearch-analysis-ik-<span class="hljs-number">7.12</span>.<span class="hljs-number">1</span>.zip<br><br><span class="hljs-comment">#退出</span><br><span class="hljs-keyword">exit</span><br><span class="hljs-comment">#重启容器</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure></li><li><p>离线安装</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 查看es插件目录挂载的数据卷</span><br>docker <span class="hljs-keyword">volume</span><span class="language-bash"> inspect es-plugins</span><br><br><span class="hljs-comment"># 将ik分词器上传到数据卷内</span><br><br><span class="hljs-comment"># 重启容器</span><br>docker restart es<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;上海自来水来自上海&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><h4 id="扩展词词典"><a href="#扩展词词典" class="headerlink" title="扩展词词典"></a>扩展词词典</h4><blockquote><p>IK分词器提供了扩展词汇的功能</p></blockquote><ul><li><p>ik&#x2F;config目录下的IKAnalyzer.cfg.xml配置文件可以添加扩展词典</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建ext_dict，在文件中添加词汇，并放到ik&#x2F;config里</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># ext_dict文件</span><br>哈哈哈哈哈哈<br>传智播客<br></code></pre></td></tr></table></figure></li><li><p>重启es</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker restart es</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="ES基本操作"><a href="#ES基本操作" class="headerlink" title="ES基本操作"></a>ES基本操作</h3><h4 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h4><blockquote><p>类似mysql的表</p><p>mapping是对索引库中文档的<strong>约束</strong></p></blockquote><p>常见的mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json"># 新增一个索引库<br>PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 查询索引库<br>GEt /test<br><br># 给索引库新增字段   (索引库一旦创建，无法修改mapping，只能新增)<br>PUT /test/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 删除索引库<br>DELETE /test<br></code></pre></td></tr></table></figure><h4 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h4><blockquote><p>类似mysql的数据</p></blockquote><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"># 新增文档<br>POST test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asdasd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123@qq.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;san&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhang&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 查询文档<br>GET /test/_doc/<span class="hljs-number">1</span><br><br># 删除文档<br>DELETE /test/_doc/<span class="hljs-number">1</span><br><br># 修改文档(全量修改<span class="hljs-punctuation">:</span> 等于DELETE + POST，文档不存在也会新增)<br>PUT test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asdasd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123@qq.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;si&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;li&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br># 修改文档(增量修改<span class="hljs-punctuation">:</span> 只修改部分)<br>POST test/_update/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;456@qq.com&quot;</span>  <br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="RESTAPI"><a href="#RESTAPI" class="headerlink" title="RESTAPI"></a>RESTAPI</h3><blockquote><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p></blockquote><p>Java Rest Client又包括两种：</p><ul><li>Java Low Level Rest Client</li><li>Java High Level Rest Client</li></ul><p>设计mapping映射要考虑的信息包括：</p><ul><li>字段名</li><li>字段数据类型</li><li>是否参与搜索</li><li>是否需要分词 </li><li>如果分词，分词器是什么？</li></ul><h4 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h4><blockquote><p>通过客户端的api操作es</p></blockquote><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--版本要和es的版本一致--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--RestHighLevelClient依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>通过new的方式创建客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelIndexTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(client);<br>    &#125;<br><br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>        client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.229.128:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-comment">//结束后销毁</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h4><ul><li><p>准备创建语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ESConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MAPPING_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>通过client发送创建索引库请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 创建索引库</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">createIndexRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//设置请求参数</span><br>    createIndexRequest.source(MAPPING_TEMPLATE, XContentType.JSON);<br>    <span class="hljs-comment">//返送请求</span><br>    client.indices().create(createIndexRequest, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h4><ul><li><p>通过client发送删除引库请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除索引库</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">deleteIndexRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//发送请求</span><br>    client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="查询索引库"><a href="#查询索引库" class="headerlink" title="查询索引库"></a>查询索引库</h4><ul><li><p>通过client发送查询引库请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询索引库</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">getIndexRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//发送请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> client.indices().exists(getIndexRequest, RequestOptions.DEFAULT);<br>    System.out.println(exists ? <span class="hljs-string">&quot;索引库存在&quot;</span> : <span class="hljs-string">&quot;索引库不存在&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h4><ul><li><p>通过client发送新增文档请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDocumentTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService iHotelService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增文档</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//从数据库中获取hotel对象</span><br>        <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> iHotelService.getById(<span class="hljs-number">61083L</span>);<br>        <span class="hljs-comment">//数据库中的对象属性和索引库中不一致，要转换一下</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br><br>        <span class="hljs-comment">//创建request请求</span><br>        <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());<br>        <span class="hljs-comment">//设置请求参数</span><br>        request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);<br>        <span class="hljs-comment">//发送请求</span><br>        client.index(request, RequestOptions.DEFAULT);<br>    &#125;<br><br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>        client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.229.128:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><ul><li><p>通过client发送查询文档请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询文档</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">GetDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建请求</span><br>    <span class="hljs-type">GetRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">//发送请求,获得响应结果</span><br>    <span class="hljs-type">GetResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.get(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//将响应结构转为对象</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> response.getSourceAsString();<br>    <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>    System.out.println(hotelDoc);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><ul><li><p>通过client发送修改文档请求，全量修改和新增操作一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 更新文档(局部修改)</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">UpdateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建请求</span><br>    <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">//设置请求参数</span><br>    request.doc(<br>        <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;999&quot;</span><br>    );<br>    <span class="hljs-comment">//发送请求</span><br>    client.update(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><ul><li><p>通过client发送删除文档请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除文档</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建请求</span><br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">//发送请求</span><br>    client.delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="批量新增文档"><a href="#批量新增文档" class="headerlink" title="批量新增文档"></a>批量新增文档</h4><ul><li><p>通过client发送批量新增文档请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 批量新增文档</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bulkCreateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建请求</span><br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br><br>    <span class="hljs-comment">//查询数据库中所有hotel信息</span><br>    List&lt;Hotel&gt; hotels = iHotelService.list();<br>    <span class="hljs-comment">//将hotel转换为hotelDoc，再封装到请求中</span><br>    <span class="hljs-keyword">for</span> (Hotel hotel : hotels) &#123;<br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>        request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>)<br>                    .id(hotel.getId().toString())<br>                    .source(JSON.toJSONString(hotelDoc),XContentType.JSON)<br>                   );<br>    &#125;<br>    <span class="hljs-comment">//发送请求</span><br>    client.bulk(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在kibana中用<code>GET /hotel/_search</code>可查看所有文档</p></li></ul><h3 id="DSL查询语法"><a href="#DSL查询语法" class="headerlink" title="DSL查询语法"></a>DSL查询语法</h3><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Domain Specific Language</a></p></blockquote><p>常见查询类型：</p><ul><li>查询所有</li><li>全文检索查询: 对搜索条件分词得到词条，然后通过词条来查询相关字段</li><li>精准查询：<strong>不会</strong>对搜索条件分词</li><li>地理查询：给定坐标来查询</li><li>复合查询：将其它简单查询组合起来，实现更复杂的搜索逻辑</li></ul><p>通用查询语法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;查询类型&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;查询条件&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;条件值&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><blockquote><p>match_all</p></blockquote><ul><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"># 查询hotel索引库中所有信息<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span>  <br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="全文检索查询"><a href="#全文检索查询" class="headerlink" title="全文检索查询"></a>全文检索查询</h4><blockquote><p>match: 单字段查询</p><p>multi_match: 多字段查询</p></blockquote><ul><li><p>match实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"># 对内容进行分词，然后查询<span class="hljs-string">&quot;all&quot;</span>字段<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩 如家&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>multi_match实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"># 对内容进行分词，然后查询<span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;business&quot;</span>三个字段<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩 如家&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;business&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="精准查询"><a href="#精准查询" class="headerlink" title="精准查询"></a>精准查询</h4><blockquote><p>term：根据词条精确值查询</p><p>range：根据值的范围查询</p></blockquote><ul><li><p>term实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"># 查询<span class="hljs-string">&quot;city&quot;</span>字段为<span class="hljs-string">&quot;上海&quot;</span>的信息<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;上海&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>range实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"># 查询<span class="hljs-string">&quot;price&quot;</span>字段值为<span class="hljs-punctuation">[</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span> <span class="hljs-number">300</span><span class="hljs-punctuation">]</span>之间的信息<br># gte<span class="hljs-punctuation">:</span> greater then equals <span class="hljs-punctuation">,</span> lte<span class="hljs-punctuation">:</span> less then equals<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">300</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="地理查询"><a href="#地理查询" class="headerlink" title="地理查询"></a>地理查询</h4><blockquote><p>geo_distance：指定坐标和半径来查询范围内的数据</p><p>geo_bounding_box：指定两个坐标，查询形成的矩形内的数据</p></blockquote><ul><li><p>geo_distance实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"># 以<span class="hljs-string">&quot;31.21,121.5&quot;</span> 为点做半径为<span class="hljs-number">15</span>km的圆<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_distance&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15km&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;31.21,121.5&quot;</span> <br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>geo_bounding_box实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_bounding_box&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;top_left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31.1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.5</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bottom_right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.9</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.7</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h4><blockquote><p>function score：算分函数查询，可以控制文档相关性算分，控制文档排名</p><p>bool query：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</p></blockquote><p><strong>function score</strong></p><p>elasticsearch会根据词条和文档的相关度做打分，算法由两种：</p><ul><li><p>TF-IDF算法</p><p><img src="/img/weifuwu_img/TF-IDF%E7%AE%97%E6%B3%95.png" alt="TF-IDF算法"></p></li><li><p>BM25算法，elasticsearch5.1版本后采用的算法</p><p><img src="/img/weifuwu_img/BM25.png" alt="BM25"></p></li><li><p>function score实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"># 复合查询<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;function_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//原始查询条件</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//过滤查到的信息</span><br>            <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;boost_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span><span class="hljs-comment">//sum模式为_score = 原始分数 + weight</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>bool query</strong></p><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong></li></ul><ul><li><p>bool query实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"># 名字中包含<span class="hljs-string">&quot;如家&quot;</span><span class="hljs-punctuation">,</span> 价格<span class="hljs-number">400</span>以上，范围<span class="hljs-number">10</span>km之内<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10km&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31.21</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.5</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="搜索结果处理"><a href="#搜索结果处理" class="headerlink" title="搜索结果处理"></a>搜索结果处理</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><blockquote><p>sort</p></blockquote><ul><li><p>实例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"># 按分数降序，价格升序排序<br>GET /hotel/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;<br>  , <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实例2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"># 按距离升序排序，单位<span class="hljs-string">&quot;km&quot;</span><br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;unit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;km&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><blockquote><p>from、size</p></blockquote><p>深度分页问题：</p><blockquote><p>elasticsearch内部分页时，要查990 ~ 1000的这10条，必须先查询 0~1000条，然后截取其中的990 ~ 1000的这10条。当es集群时，若要查前1000的文档，就得先查询所有节点的前1000，再将这些文档重新排名后选出前1000，对于节点有很大压力。</p><p>因此elasticsearch会禁止from+ size 超过10000的请求。</p></blockquote><ul><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"># 从<span class="hljs-number">0</span>号开始查询<span class="hljs-number">20</span>条数据<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span># 起始值，默认<span class="hljs-number">0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span># 希望获取的文档总数<br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br>  <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><blockquote><p>highlight</p></blockquote><ul><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;require_field_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>注意：</strong></p><ul><li>高亮是对关键字高亮，因此<strong>搜索条件必须带有关键字</strong>，而不能是范围这样的查询。</li><li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li><li>如果要对非搜索字段高亮，则需要添加一个属性：required_field_match&#x3D;false</li></ul></li></ul><h3 id="RestAPI查询"><a href="#RestAPI查询" class="headerlink" title="RestAPI查询"></a>RestAPI查询</h3><blockquote><p>不一样的地方就QueryBuilders的查询条件</p></blockquote><h4 id="查询所有-1"><a href="#查询所有-1" class="headerlink" title="查询所有"></a>查询所有</h4><ul><li>matchAllQuery实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询所有</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 解析结果</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-comment">//解析结果</span><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value; <span class="hljs-comment">//获取结果总数</span><br>    SearchHit[] hits = searchHits.getHits();    <span class="hljs-comment">//获取结果集</span><br>    System.out.println(<span class="hljs-string">&quot;结果数: &quot;</span> + value);<br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>        System.out.println(hotelDoc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/weifuwu_img/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%BB%93%E6%9E%9C.png" alt="查询所有结果"></p><p>解析响应结果，就是逐层解析JSON字符串，流程如下：</p><ul><li><code>searchHits</code>：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果<ul><li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li><li><code>SearchHits#getHits()</code>：获取SearchHit数组，也就是文档数组<ul><li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的_source，也就是原始的json文档数据</li></ul></li></ul></li></ul><h4 id="全文检索查询-1"><a href="#全文检索查询-1" class="headerlink" title="全文检索查询"></a>全文检索查询</h4><ul><li><p>matchQuery实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;如家&quot;</span>));<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>multiMatchQuery实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMultiMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;如家&quot;</span>, <br>                                                         <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;business&quot;</span>));<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="精准查询-1"><a href="#精准查询-1" class="headerlink" title="精准查询"></a>精准查询</h4><ul><li><p>termQuery实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTerm</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>));<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>rangeQuery实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTerm</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>)<br>                           .gte(<span class="hljs-number">100</span>)<br>                           .lte(<span class="hljs-number">150</span>));<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="复合查询-1"><a href="#复合查询-1" class="headerlink" title="复合查询"></a>复合查询</h4><ul><li><p>boolQuery实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBool</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.boolQuery()<br>                           .must(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>))<br>                           .filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">200</span>)));<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h4><ul><li><p>sort实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.DESC);<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h4><ul><li><p>from、size实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, size = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().from((page - <span class="hljs-number">1</span>) * size).size(size);<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="高亮-1"><a href="#高亮-1" class="headerlink" title="高亮"></a>高亮</h4><ul><li><p>highlighter实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHighlight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//创建request请求对象</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//组织DSL参数</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;如家&quot;</span>))<br>        .highlighter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().field(<span class="hljs-string">&quot;name&quot;</span>).requireFieldMatch(<span class="hljs-literal">false</span>));<br>    <span class="hljs-comment">//发送查询请求，获取结果</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">//解析结果</span><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结果处理时得获取Highlight里的值</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列</title>
    <link href="/2022/09/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1/MQ/"/>
    <url>/2022/09/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1/MQ/</url>
    
    <content type="html"><![CDATA[<h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><blockquote><p>Message Queue</p></blockquote><h3 id="微服务间通讯方式"><a href="#微服务间通讯方式" class="headerlink" title="微服务间通讯方式"></a>微服务间通讯方式</h3><blockquote><p>微服务间通讯有同步和异步两种方式</p></blockquote><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>同步调用</td><td>时效性较强，可以立即得到结果</td><td>- 耦合度高<br/>- 性能和吞吐能力下降<br/>- 有额外的资源消耗<br/>- 有级联失败问题</td></tr><tr><td>异步调用</td><td>- 吞吐量提升：无需等待订阅者处理完成，响应更快速<br/>- 故障隔离：服务没有直接调用，不存在级联失败问题<br/>- 调用间没有阻塞，不会造成无效的资源占用<br/>- 耦合度极低，每个服务都可以灵活插拔，可替换<br/>- 流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</td><td>- 架构复杂了，业务没有明显的流程线，不好管理<br/>- 需要依赖于Broker的可靠、安全、性能</td></tr></tbody></table><h3 id="常见的MQ实现"><a href="#常见的MQ实现" class="headerlink" title="常见的MQ实现"></a>常见的MQ实现</h3><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司&#x2F;社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><h4 id="通过Docker安装"><a href="#通过Docker安装" class="headerlink" title="通过Docker安装"></a>通过Docker安装</h4><ul><li>选择带有mangement的版本(带有管理界面)安装</li></ul><p><a href="https://hub.docker.com/_/rabbitmq">rabbitmq - Official Image | Docker Hub</a></p><ul><li><p>执行命令启动容器</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker run <span class="hljs-string">\</span><br> -e RABBITMQ_DEFAULT_USER=root <span class="hljs-string">\</span><br> -e RABBITMQ_DEFAULT_PASS=<span class="hljs-number">123456</span> <span class="hljs-string">\</span><br> --name mq <span class="hljs-string">\</span><br> --hostname mq1 <span class="hljs-string">\</span><br> -p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> <span class="hljs-string">\</span><br> -p <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> <span class="hljs-string">\</span><br> -d <span class="hljs-string">\</span><br> rabbitmq:<span class="hljs-number">3</span>-management<br></code></pre></td></tr></table></figure></li><li><p>通过15672端口打开管理界面</p></li></ul><h4 id="mq基本结构"><a href="#mq基本结构" class="headerlink" title="mq基本结构"></a>mq基本结构</h4><p><img src="/img/weifuwu_img/mq%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="mq基本结构"></p><p>RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange个：交换机，负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><p>通过rabbitmq来实现消息的返送和接收</p><p><img src="/img/weifuwu_img/%E7%AE%80%E5%8D%95%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B.png" alt="简单消息队列模型"></p><ul><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PublisherTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">&quot;192.168.229.128&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.发送消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, rabbitmq!&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;发送消息成功：【&quot;</span> + message + <span class="hljs-string">&quot;】&quot;</span>);<br><br>        <span class="hljs-comment">// 5.关闭通道和连接</span><br>        channel.close();<br>        connection.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">&quot;192.168.229.128&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.订阅消息</span><br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope,</span><br><span class="hljs-params">                                       AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-comment">// 5.处理消息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body);<br>                System.out.println(<span class="hljs-string">&quot;接收到消息：【&quot;</span> + message + <span class="hljs-string">&quot;】&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息。。。。&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h3><blockquote><p>Advanced Message Queuing Protocol(高级消息队列协议)</p><p>SpringAMQP: 基于AMQP定义的一套API规范</p></blockquote><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息</li></ul><h4 id="SimpleQueue-简单队列模型"><a href="#SimpleQueue-简单队列模型" class="headerlink" title="SimpleQueue(简单队列模型)"></a>SimpleQueue(简单队列模型)</h4><blockquote><p>一个生产者和一个消费者</p></blockquote><p>通过SpringAMQP来实现消息的返送和接收</p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableRabbit</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAMQPTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;#消息队列名<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testMessage&quot;</span>;#发送的消息<br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者(同样要导入依赖、编写配置)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注入一个listener，自动监听队列</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>#监听的队列名<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(msg);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//启动项目即可监听队列，有消息自动获取</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="WorkQueue-任务队列模型"><a href="#WorkQueue-任务队列模型" class="headerlink" title="WorkQueue(任务队列模型)"></a>WorkQueue(任务队列模型)</h4><blockquote><p>让<strong>多个消费者</strong>绑定到一个队列，共同消费队列中的消息。</p></blockquote><p><img src="/img/weifuwu_img/workQueue.png" alt="workQueue"></p><ul><li><p>返送多条消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorkQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//发送50条消息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; ++i) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testMessage&quot;</span> + i;<br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多个消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerWorkQueueMessage1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<span class="hljs-comment">//处理快</span><br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerWorkQueueMessage2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<span class="hljs-comment">//处理慢</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果不配置的话会，消息是平均分配给每个消费者，并没有考虑到消费者的处理能力</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.229</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="发布-x2F-订阅模型"><a href="#发布-x2F-订阅模型" class="headerlink" title="发布&#x2F;订阅模型"></a>发布&#x2F;订阅模型</h4><p><img src="/img/weifuwu_img/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png" alt="发布订阅模型"></p><p>Exchange：交换机。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。<strong>交换机只负责转发消息，不具备存储消息的能力</strong>。Exchange有以下<strong>3</strong>种类型：</p><ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul><p><strong>Fanout交换机</strong></p><blockquote><p>消息会通过交换机<strong>广播</strong>到所有绑定队列</p></blockquote><ul><li>声明队列和交换机</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConfig</span> &#123;<br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">fanoutExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(<span class="hljs-string">&quot;test.fanout&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列1</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列2</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定交换机和队列1</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingQueue1</span><span class="hljs-params">(Queue queue1, FanoutExchange fanoutExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue1).to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-comment">//绑定交换机和队列2</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingQueue2</span><span class="hljs-params">(Queue queue2, FanoutExchange fanoutExchange)</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue2).to(fanoutExchange);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>声明生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//发送到交换机</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test.fanout&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testMessage&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>声明消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerWorkQueueMessage1</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerWorkQueueMessage2</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>Direct交换机</strong></p><blockquote><p>通过key<strong>定向</strong>向队列发送消息</p></blockquote><ul><li><p>通过注解在listener上声明队列和交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = &quot;direct.queue1&quot;), //绑定队列</span><br><span class="hljs-meta">            exchange = @Exchange(name = &quot;test.direct&quot;, type = ExchangeTypes.DIRECT),    //绑定交换机</span><br><span class="hljs-meta">            key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;   //绑定key,只有队列有和消息相同的key时，才会收到消息</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerDirectQueue1</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            value = @Queue(name = &quot;direct.queue2&quot;), //绑定队列</span><br><span class="hljs-meta">            exchange = @Exchange(name = &quot;test.direct&quot;, type = ExchangeTypes.DIRECT),    //绑定交换机</span><br><span class="hljs-meta">            key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;   //绑定key,只有队列有和消息相同的key时，才会收到消息</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerDirectQueue2</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者2接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDirectExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//发送到交换机</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test.direct&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testMessage&quot;</span>;<br>    <span class="hljs-comment">//只有有&quot;yellow&quot;的队列会收到消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;yellow&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>Topic</strong></p><blockquote><p>通过<strong>通配符</strong>#(一个或多个)和.(一个)来匹配队列</p></blockquote><ul><li><p>通过注解在listener上声明队列和交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//话题交换机</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue1&quot;), //绑定队列</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;test.topic&quot;, type = ExchangeTypes.TOPIC),    //绑定交换机</span><br><span class="hljs-meta">    key = &quot;china.#&quot;   //绑定通配符,只有满足格式的消息，才会接收</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerTopicQueue1</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue2&quot;), //绑定队列</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;test.topic&quot;, type = ExchangeTypes.TOPIC),    //绑定交换机</span><br><span class="hljs-meta">    key = &quot;#.news&quot;   //绑定通配符,只有满足格式的消息，才会接收</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenerTopicQueue2</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTopicExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//发送到交换机</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test.topic&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;testMessage&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;china.weather&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="配置消息转换器"><a href="#配置消息转换器" class="headerlink" title="配置消息转换器"></a>配置消息转换器</h4><ul><li><p>导入jackson转换器依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jackson消息转换器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>声明转换器来替换原有的转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2022/09/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker/"/>
    <url>/2022/09/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Docker作用"><a href="#Docker作用" class="headerlink" title="Docker作用"></a>Docker作用</h3><p>大型项目组件较多，运行环境也较为复杂，部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难</p><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>概念：</p><ul><li><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p></li><li><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p></li><li><p><strong>DockerHub</strong>：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p></li></ul><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><strong>服务端</strong>(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li><strong>客户端</strong>(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li></ul><h3 id="安装Docket（CentOS8）"><a href="#安装Docket（CentOS8）" class="headerlink" title="安装Docket（CentOS8）"></a>安装Docket（CentOS8）</h3><p><a href="https://developer.aliyun.com/article/753261">CentOS8 安装 Docker-阿里云开发者社区 (aliyun.com)</a></p><ol><li><p>卸载老版本Docket</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装docket基础包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum install -y yum-utils \<br>  device-mapper-persistent-data \<br>  lvm2<br></code></pre></td></tr></table></figure></li><li><p>设置国内仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>安装Docket社区版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum install --allowerasing docker-ce<br></code></pre></td></tr></table></figure></li><li><p>启动docket</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs linux">Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦<br>启动docker前，建议关闭防火墙<br># 关闭<br>systemctl stop firewalld<br># 禁止开机启动防火墙<br>systemctl disable firewalld<br><br>sudo systemctl start docker  # 启动docker<br>docker run hello-world  #测试<br></code></pre></td></tr></table></figure></li><li><p>配置国内镜像源</p><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器镜像服务 (aliyun.com)</a></p></li></ol><h3 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h3><h4 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h4><ul><li><p>拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker pull 镜像名:版本<br># 没加版本默认latest(最近的)<br></code></pre></td></tr></table></figure></li><li><p>查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker images<br></code></pre></td></tr></table></figure></li><li><p>通过–help来查看提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker save --help<br></code></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> rmi 镜像名:版本<br></code></pre></td></tr></table></figure></li><li><p>保存&#x2F;导入镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs linux"># 保存镜像到tar<br>docker save -o nginx.tar nginx:latest<br># 导入镜像<br>docker load -i nginx.tar<br></code></pre></td></tr></table></figure></li></ul><h4 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h4><ul><li><p>创建并运行容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name 给容器起名 -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -d nginx<br></code></pre></td></tr></table></figure></li><li><p>运行&#x2F;停止容器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-literal">start</span>/<span class="hljs-literal">stop</span> 容器名<br></code></pre></td></tr></table></figure></li><li><p>查看正在运行的容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker <span class="hljs-built_in">ps</span><br><br>docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> <span class="hljs-comment">#查看所有容器</span><br></code></pre></td></tr></table></figure></li><li><p>查看容器日志</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> logs 容器名<br></code></pre></td></tr></table></figure></li><li><p>进入&#x2F;退出容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker exec -it 容器名 bash<br><br><span class="hljs-keyword">exit</span> <span class="hljs-comment"># 退出容器</span><br></code></pre></td></tr></table></figure><ul><li>docker exec ：进入容器内部，执行一个命令</li><li>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul></li><li><p>删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> 容器名<br></code></pre></td></tr></table></figure></li></ul><h4 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h4><p>镜像组成结构</p><p><img src="/img/weifuwu_img/%E9%95%9C%E5%83%8F%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.png"></p><p>Dockerfile指令是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer</p><p>官网文档 <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><p> Dockerfile示例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><span class="hljs-comment"># 配置环境变量，JDK的安装目录</span><br><span class="hljs-keyword">ENV</span> JAVA_DIR=/usr/local<br><br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span><br><br><span class="hljs-comment"># 安装JDK</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8090</span><br><span class="hljs-comment"># 入口，java项目的启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure><p>构建镜像命令</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t 镜像名称:版本 .<br></code></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><blockquote><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录</p><p>创建的数据卷会保存在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;目录下</p><p>通过容器和数据卷的挂载(绑定)，就能在外部操作容器内的目录了</p></blockquote><h4 id="数据卷基本命令"><a href="#数据卷基本命令" class="headerlink" title="数据卷基本命令"></a>数据卷基本命令</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@root ~]# docker volume --<span class="hljs-keyword">help</span><br><br>Usage:  docker volume COMMAND<br><br>Manage volumes<br><br>Commands:<br>  create      创建数据卷<br>  <span class="hljs-keyword">inspect</span>     查看一个数据卷详细信息<br>  <span class="hljs-keyword">ls</span>          查看所有数据卷<br>  prune       删除所有未使用的数据卷<br>  <span class="hljs-keyword">rm</span>          - 删除指定数据卷<br><br></code></pre></td></tr></table></figure><h4 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h4><p>例子：</p><ol><li><p>创建创建容器并挂载数据卷到容器内的HTML目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name mynginx -v html:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -d nginx<br></code></pre></td></tr></table></figure><p><code>-v html:/usr/share/nginx/html</code>: 创建html数据卷并把容器中的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html挂载上</p></li><li><p>查看html数据卷位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker volume inspect html<br><span class="hljs-comment"># 进入该目录</span><br>cd <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/docker/</span>volumes<span class="hljs-regexp">/html/</span>_data<br><span class="hljs-comment"># 修改文件</span><br>vi index.html<br></code></pre></td></tr></table></figure></li></ol><h4 id="挂载自定义的本地目录"><a href="#挂载自定义的本地目录" class="headerlink" title="挂载自定义的本地目录"></a>挂载自定义的本地目录</h4><blockquote><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上</p><ul><li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li></ul></blockquote><p>例子: 给mysql挂载到本地目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run \<br>--name mysql \<br>-e MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> \<span class="hljs-comment">#数据库密码</span><br>-p <span class="hljs-number">3307</span>:<span class="hljs-number">3306</span> \<span class="hljs-comment">#宿主机端口:容器端口</span><br>-v <span class="hljs-regexp">/tmp/my</span>sql<span class="hljs-regexp">/conf/</span>hmy.cnf:<span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/conf.d/</span>hmy.cnf \<span class="hljs-comment">#宿主机文件:容器内文件</span><br>-v <span class="hljs-regexp">/tmp/my</span>sql<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/lib/my</span>sql \<span class="hljs-comment">#宿主机目录:容器内目录</span><br>-d mysql:<span class="hljs-number">5.7</span>.<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>数据卷挂载与目录直接挂载的</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><blockquote><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br> <br><span class="hljs-comment">#修改文件权限</span><br>sudo chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure><p>Base自动补全命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 补全命令</span><br>curl -L https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/1.29.1/</span>contrib<span class="hljs-regexp">/completion/</span>bash<span class="hljs-regexp">/docker-compose &gt; /</span>etc<span class="hljs-regexp">/bash_completion.d/</span>docker-compose<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程调用</title>
    <link href="/2022/09/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
    <url>/2022/09/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><h4 id="使用RestTemplate"><a href="#使用RestTemplate" class="headerlink" title="使用RestTemplate"></a>使用RestTemplate</h4><p>1.注册RestTemplate实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.通过restTemplate发送http来远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br>    <span class="hljs-comment">//用restTemplate发送http请求查询user信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, User.class);<br>    order.setUser(user);<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h4><h5 id="Eureka架构中的三个角色"><a href="#Eureka架构中的三个角色" class="headerlink" title="Eureka架构中的三个角色"></a>Eureka架构中的三个角色</h5><ul><li>服务注册中心</li></ul><p>Eureka的服务端应用，提供服务注册和发现功能</p><ul><li>服务提供者</li></ul><p>提供服务的应用，可以是SpringBoot应用，也可以是其它任意技术实现，只要对外提供的是Rest风格服务即可。</p><ul><li>服务消费者</li></ul><p>消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。</p><h5 id="搭建Eureka"><a href="#搭建Eureka" class="headerlink" title="搭建Eureka"></a>搭建Eureka</h5><h6 id="创建eureka-server服务"><a href="#创建eureka-server服务" class="headerlink" title="创建eureka-server服务"></a>创建eureka-server服务</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- eureka服务端依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在启动类上加@EnableEurekaServer注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eurekaserver</span><span class="hljs-comment">#服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><span class="hljs-comment">#eureka注册中心地址</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h6><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--eureka客户端依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">orderservice</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h6><ol><li><p>在注册RestTemplate上加上@LoadTemplate注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求的url中用服务名称替换ip</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br>    <span class="hljs-comment">//用restTemplate发送http请求查询user信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://userservice/user/&quot;</span> + order.getUserId();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, User.class);<br>    order.setUser(user);<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h5><p><img src="/img/weifuwu_img/image-20210713224517686.png" alt="image-20210713224517686"></p><p><img src="/img/weifuwu_img/image-20210713224724673.png" alt="image-20210713224724673"></p><p>流程</p><ul><li>LoadBalanceInterceptor拦截器获取请求，RibbonLoadBalancerClient从url中获取服务名称</li><li>DynamicServerListLoadBalancer根据服务名称拉取eureka服务列表</li><li>IRule根据负载均衡策略选取一个</li><li>RibbonLoadBalancerClient将url中的服务名称替换为ip端口，再发起请求</li></ul><h6 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h6><blockquote><p>一般使用默认策略(ZoneAvoidanceRule)</p></blockquote><p>方式一(全局)</p><ul><li>导入坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--ribbon相关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注册IRule</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二(局部)</p><ul><li>在application.yml中添加配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">userservice:</span>  <span class="hljs-comment">#指定服务名称</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment"># 负载均衡规则</span><br></code></pre></td></tr></table></figure><h6 id="开启饥饿加载"><a href="#开启饥饿加载" class="headerlink" title="开启饥饿加载"></a>开启饥饿加载</h6><blockquote><p> Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-string">userservice</span><span class="hljs-comment">#加载的客户端</span><br></code></pre></td></tr></table></figure><h4 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h4><h5 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h5><ul><li><p>下载   <a href="https://github.com/alibaba/nacos">github</a></p></li><li><p>解压</p></li><li><p>bin目录下运行startup.cmd</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span> -m standalone<br></code></pre></td></tr></table></figure></li><li><p>默认账号密码nacos</p></li><li><p>默认端口: 8848</p></li></ul><h5 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h5><ul><li><p>父工程导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--alibaba依赖管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>项目中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos服务发现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span> <br>    <span class="hljs-attr">application:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span><br>    <span class="hljs-attr">cloud:</span><br>        <span class="hljs-attr">nacos:</span><br>          <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h5><p><img src="/img/weifuwu_img/image-20210713232522531.png" alt="image-20210713232522531"></p><ul><li><p>修改配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="同集群优先的负载均衡"><a href="#同集群优先的负载均衡" class="headerlink" title="同集群优先的负载均衡"></a>同集群优先的负载均衡</h5><blockquote><p>Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例</p></blockquote><ul><li><p>修改配置文件application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">userservice:</span><span class="hljs-comment">#服务名称</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure></li></ul><h5 id="权重优先的负载均衡"><a href="#权重优先的负载均衡" class="headerlink" title="权重优先的负载均衡"></a>权重优先的负载均衡</h5><blockquote><p>权重越高，优先级越高</p></blockquote><p><img src="/img/weifuwu_img/%E6%9D%83%E9%87%8D.png" alt="权重"></p><ul><li>通过编辑来设置权重</li></ul><h5 id="给微服务配置namespace"><a href="#给微服务配置namespace" class="headerlink" title="给微服务配置namespace"></a>给微服务配置namespace</h5><blockquote><p>只有同一个命名空间的服务才能访问</p><p>通过namespace来实现环境隔离功能</p></blockquote><ul><li>通过控制台来创建命名空间</li></ul><p><img src="/img/weifuwu_img/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png" alt="命名空间"></p><ul><li><p>配置文件中设置所在的命名空间</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">c36cee20-482c-4675-a115-5e84b8f53882</span> <span class="hljs-comment">#命名空间</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="设置实例类型"><a href="#设置实例类型" class="headerlink" title="设置实例类型"></a>设置实例类型</h5><blockquote><p>实例分为临时实例和非临时实例</p><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型</p><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例</p></blockquote><p>设置为非临时实例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置为非临时实例</span><br></code></pre></td></tr></table></figure><h4 id="Nacos和Eureka比较"><a href="#Nacos和Eureka比较" class="headerlink" title="Nacos和Eureka比较"></a>Nacos和Eureka比较</h4><ul><li>Nacos与eureka的共同点<ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li>Nacos与Eureka的区别<ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h4 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h4><h5 id="在nacos中添加配置"><a href="#在nacos中添加配置" class="headerlink" title="在nacos中添加配置"></a>在nacos中添加配置</h5><blockquote><p>项目的核心配置，需要热更新的配置才有放到nacos管理的必要</p></blockquote><p><img src="/img/weifuwu_img/%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AE.png" alt="统一配置"></p><p><img src="/img/weifuwu_img/%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.png" alt="配置信息"></p><h5 id="从nacos中拉取配置"><a href="#从nacos中拉取配置" class="headerlink" title="从nacos中拉取配置"></a>从nacos中拉取配置</h5><ul><li><p>导入配置管理坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos配置管理依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加bootstrap.yml配置文件</p><blockquote><p>bootstrap.yml会在application.yml之前被读取，在bootstrap中配置服务名称、环境、nacos地址等信息来读取配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#开发环境，这里是dev</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># Nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><p>最终会定位到userservice-dev.yaml配置中</p><p>记得把application.yml中相同的配置注释掉</p></li><li><p>可以通过@Value注解来读取nacos中的配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;pattern.dataformat&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String dataformat;<br></code></pre></td></tr></table></figure></li></ul><h5 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h5><blockquote><p>nacos中的配置改变后立马更新而不需要重启服务</p></blockquote><p>方式一(配置少时)</p><ul><li><p>在类上加@RefreshScope注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pattern.dataformat&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dataformat;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dataformat));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>方式二（配置多时，推荐）</p><p>通过@ConfigurationProperties来获取配置</p><ul><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatternProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String dataformat;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过注入配置类来获取配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> PatternProperties patternProperties;<br><br><span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDataformat()));<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h5><blockquote><p> nacos配置的文件名格式为<code>服务名-环境.yaml</code>，如<code>userservice-dev.yaml</code></p><p>当文件名为<code>服务名.yaml</code>时，即为共享配置，每个环境的都能读到</p></blockquote><p><img src="/img/weifuwu_img/%E5%85%B1%E4%BA%AB%E9%85%8D%E7%BD%AE.png" alt="共享配置"></p><p>有相同配置时，配置的优先级为: 环境配置&gt;共享配置&gt;本地配置</p><h4 id="Nacos搭建集群"><a href="#Nacos搭建集群" class="headerlink" title="Nacos搭建集群"></a>Nacos搭建集群</h4><p>通过nginx反向代理多个nacos实现负载均衡</p><p><img src="/img/weifuwu_img/Nacos%E9%9B%86%E7%BE%A4.png" alt="Nacos集群"></p><p><strong>步骤:</strong></p><ul><li>搭建数据库</li><li>配置nacos</li><li>配置nginx反向代理</li></ul><h5 id="配置nacos"><a href="#配置nacos" class="headerlink" title="配置nacos"></a>配置nacos</h5><ul><li><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf</p></li><li><p>添加nacos集群的ip和端口</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:8845</span><br><span class="hljs-number">127.0.0.1:8846</span><br><span class="hljs-number">127.0.0.1:8847</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件application.properties，添加数据库信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><br><span class="hljs-attr">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">db.password.0</span>=<span class="hljs-string">123</span><br></code></pre></td></tr></table></figure></li><li><p>在application.properties中修改每个nacos的端口</p></li><li><p>分别启动nacos</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="配置nginx反向代理"><a href="#配置nginx反向代理" class="headerlink" title="配置nginx反向代理"></a>配置nginx反向代理</h5><ul><li><p>下载解压nginx到非中文目录下</p></li><li><p>修改conf&#x2F;nginx.conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs conf">upstream nacos-cluster &#123;<br>    server 127.0.0.1:8845;#nacos的ip和端口<br>server 127.0.0.1:8846;<br>server 127.0.0.1:8847;<br>&#125;<br><br>server &#123;<br>    listen       80;<br>    server_name  localhost;<br><br>    location /nacos &#123;<br>        proxy_pass http://nacos-cluster;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码中nacos的地址要改为nginx的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:80</span> <span class="hljs-comment"># Nacos地址</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="使用Feign替代RestTemplate"><a href="#使用Feign替代RestTemplate" class="headerlink" title="使用Feign替代RestTemplate"></a>使用Feign替代RestTemplate</h4><p>RestTemplate存在的问题: 需要自己拼接请求路径，如果参数一多不好管理</p><p><strong>使用Feign</strong></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动类上加入@EnableFeignClients注解开启Feign的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br></code></pre></td></tr></table></figure></li><li><p>编写Feign的客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>之后可以注入Feign的客户端来发送http</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserClient userClient;<br><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Long orderId)</span> &#123;<br>        <span class="hljs-comment">// 查询订单</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.findById(orderId);<br><br>        <span class="hljs-comment">//用feign发送http请求查询user信息</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userClient.findById(order.getUserId());<br>        order.setUser(user);<br>        <br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h5><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>配置方式：</p><ol><li><p>配置文件方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">userservice:</span>  <span class="hljs-comment"># 针对某个服务, 不加针对所有服务</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment"># 日志等级</span><br></code></pre></td></tr></table></figure></li><li><p>代码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLevel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.BASIC;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过注入Bean的方式来自定义配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果要所有服务生效,则加在@EnableFeignClient上</span><br><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span><br><br><span class="hljs-comment">//如果只要某个服务生效，则加在指定的feignClient上</span><br><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration.class)</span><br><br></code></pre></td></tr></table></figure></li></ol><h5 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h5><p>可以通过一下两点优化性能：</p><ol><li>日志级别尽量用basic及以下</li><li>使用HttpClient或OKHttp代替URLConnection</li></ol><p><strong>替换连接池</strong></p><blockquote><p> Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•URLConnection：默认实现，不支持连接池</p><p>•Apache HttpClient ：支持连接池</p><p>•OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p></blockquote><ul><li><p>导入依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置使用的连接池</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">userservice:</span>  <span class="hljs-comment"># 针对某个服务</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span> <span class="hljs-comment"># 日志等级</span><br>      <span class="hljs-attr">httpclient:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>        <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>        <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="抽取Feign客户端"><a href="#抽取Feign客户端" class="headerlink" title="抽取Feign客户端"></a>抽取Feign客户端</h5><blockquote><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用</p><p>降低代码冗余</p></blockquote><p><img src="/img/weifuwu_img/feign%E6%8A%BD%E5%8F%96.png" alt="feign抽取"></p><ul><li><p>创建新模块feign-api</p></li><li><p>将FeignClient及feign配置类、实体类移到feign-api中</p><p><img src="/img/weifuwu_img/feignApi.png" alt="feignApi"></p></li><li><p>在需要feign的类中导入feign-api模块</p><p><img src="/img/weifuwu_img/%E5%AF%BC%E5%85%A5feignApi.png" alt="导入feignApi"></p></li><li><p>在@EnableFeignClients注解中说明feign所在的包或类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br><br><span class="hljs-comment">//或者</span><br><br><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h4><blockquote><p>SpringCloudGateway是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能</p></blockquote><p>网关的<strong>核心功能特性</strong>：</p><ul><li><strong>请求路由和负载均衡</strong>: </li><li><strong>权限控制</strong>:网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</li><li><strong>限流</strong>: 当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大</li></ul><h5 id="创建Gateway服务"><a href="#创建Gateway服务" class="headerlink" title="创建Gateway服务"></a>创建Gateway服务</h5><ul><li><p>创建gateway模块</p><p><img src="/img/weifuwu_img/gateway%E6%A8%A1%E5%9D%97.png" alt="gateway模块"></p></li><li><p>导入依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--gateway网关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写路由配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <span class="hljs-comment">#网关地址</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <span class="hljs-comment">#服务名</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span>  <span class="hljs-comment">#路由id</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment">#路由目标地址(lb: loadBalance)</span><br>          <span class="hljs-attr">predicates:</span>  <span class="hljs-comment">#断言，根据这些路径来匹配</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span>  <span class="hljs-comment">#路由id</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span> <span class="hljs-comment">#路由目标地址(lb: loadBalance)</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，根据这些路径来匹配</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br><br></code></pre></td></tr></table></figure></li><li><p>通过网关地址访问服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">10010</span><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h5><p><a href="https://docs.gitcode.net/spring/guide/spring-cloud/spring-cloud-gateway.html#_5-%E8%B7%AF%E7%BA%BF%E8%B0%93%E8%AF%8D%E5%B7%A5%E5%8E%82">Spring Cloud 网关 | 中文文档 (gitcode.net)</a></p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie&#x3D;chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header&#x3D;X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method&#x3D;GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>通过<code>predicates:</code>后加断言来设置访问条件</p><h5 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h5><blockquote><p>对路由的请求或响应做加工处理 Spring提供了31种不同的路由过滤器工厂</p></blockquote><p><a href="https://docs.gitcode.net/spring/guide/spring-cloud/spring-cloud-gateway.html#_6-gatewayfilter%E5%B7%A5%E5%8E%82">Spring Cloud 网关 | 中文文档 (gitcode.net)</a></p><ul><li><p><strong>添加过滤器(针对某个服务)</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">gateway:</span><br>  <span class="hljs-attr">routes:</span> <span class="hljs-comment">#路由配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span>  <span class="hljs-comment">#路由id</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment">#路由目标地址(lb: loadBalance)</span><br>      <span class="hljs-attr">predicates:</span>  <span class="hljs-comment">#断言，根据这些路径来匹配</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>      <span class="hljs-attr">filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">aaa</span> <span class="hljs-comment"># 添加请求头</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span>  <span class="hljs-comment">#路由id</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span> <span class="hljs-comment">#路由目标地址(lb: loadBalance)</span><br>      <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，根据这些路径来匹配</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br></code></pre></td></tr></table></figure></li><li><p><strong>添加默认过滤器(对所有服务都有效)</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span>  <span class="hljs-comment">#路由id</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment">#路由目标地址(lb: loadBalance)</span><br>          <span class="hljs-attr">predicates:</span>  <span class="hljs-comment">#断言，根据这些路径来匹配</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <span class="hljs-comment"># 添加请求头</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span>  <span class="hljs-comment">#路由id</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span> <span class="hljs-comment">#路由目标地址(lb: loadBalance)</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，根据这些路径来匹配</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br>      <span class="hljs-attr">default-filters:</span> <span class="hljs-comment"># 默认过滤项</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">aaa</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h5><blockquote><p>过滤器工厂提供的过滤器的作用都是固定的，可以通过全局过滤器来<strong>自定义</strong>过滤逻辑</p></blockquote><p><strong>定义方式</strong></p><ul><li><p>实现GlobalFilter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(-1)</span>      <span class="hljs-comment">//过滤器优先级，数字越小优先级越高</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange 上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain 过滤链</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//获取请求参数映射</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();<br>        <span class="hljs-comment">//获取其中的authorize参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> queryParams.getFirst(<span class="hljs-string">&quot;authorize&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth)) &#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//拦截</span><br>        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);  <span class="hljs-comment">//设置401状态码</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>过滤器执行顺序</strong>：</p><ul><li>order值越小，优先级越高</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照<strong>声明顺序</strong>从1递增</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><h5 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h5><blockquote><p><strong>浏览器</strong>禁止请求的发起者与服务端发生跨域<strong>ajax</strong>请求，请求被浏览器拦截的问题</p></blockquote><p><strong>解决跨域问题</strong></p><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">spring:<br>  cloud:<br>    gateway:<br>      # 。。。<br>      globalcors: # 全局的跨域处理<br>        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题<br>        corsConfigurations:<br>          &#x27;<span class="hljs-string">[/**]</span>&#x27;:<br>            allowedOrigins: # 允许哪些网站的跨域请求 <br>              - <span class="hljs-string">&quot;http://localhost:8090&quot;</span><br>            allowedMethods: # 允许的跨域ajax的请求方式<br>              - <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span><br>              - <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span><br>              - <span class="hljs-string">&quot;<span class="hljs-keyword">DELETE</span>&quot;</span><br>              - <span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span><br>              - <span class="hljs-string">&quot;<span class="hljs-keyword">OPTIONS</span>&quot;</span><br>            allowedHeaders: <span class="hljs-string">&quot;*&quot;</span> # 允许在请求中携带的头信息<br>            allowCredentials: true # 是否允许携带cookie<br>            maxAge: <span class="hljs-number">360000</span> # 这次跨域检测的有效期<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式总结</title>
    <link href="/2022/09/02/%E8%BD%AF%E8%80%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/09/02/%E8%BD%AF%E8%80%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h2><blockquote><p>软件开发的 总体指导思路或参照样板</p><p>从本质上都是简化和分解类或对象</p></blockquote><p><img src="/img/post_img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB.png"></p><h4 id="创建型设计模式-5"><a href="#创建型设计模式-5" class="headerlink" title="创建型设计模式(5)"></a>创建型设计模式(5)</h4><h5 id="1-单例模式（Singleton）"><a href="#1-单例模式（Singleton）" class="headerlink" title="1.单例模式（Singleton）"></a>1.单例模式（Singleton）</h5><blockquote><p>确保某一个类<strong>只有一个</strong>实例，而且自己实例化并向整个系统提供这个实例</p></blockquote><p><strong>适用性</strong></p><ul><li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</li><li>当这个唯一实例应该是通过子类化可扩展的，并且客户无须更改代码就能使用一个扩展的实例时。</li></ul><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br><br>    <span class="hljs-comment">// 限制产生多个对象，如果该类是抽象类，该方法可以省略</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取实例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法，尽量是static方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomgting</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-原型模式-Prototype"><a href="#2-原型模式-Prototype" class="headerlink" title="2.原型模式(Prototype)"></a>2.原型模式(Prototype)</h5><blockquote><p>将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例,而不是通过new</p></blockquote><p><img src="/img/post_img/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>资源优化场景：类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等</li><li>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式</li><li>一个对象多个修改者的场景，而且各个调用者可能都需要修改其值时，可以用原型模式拷贝多个对象供调用者使用</li></ul><h5 id="3-工厂方法模式-Factory-Method"><a href="#3-工厂方法模式-Factory-Method" class="headerlink" title="3.工厂方法模式(Factory Method)"></a>3.工厂方法模式(Factory Method)</h5><blockquote><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类</p><p>多个工厂实现了工厂接口，每个工厂生产的类不同</p></blockquote><p><strong>适用性</strong></p><ul><li>当一个类希望由它的子类来指定它所创建的对象的时候</li></ul><h5 id="4-抽象工厂模式（AbstractFactory）"><a href="#4-抽象工厂模式（AbstractFactory）" class="headerlink" title="4.抽象工厂模式（AbstractFactory）"></a>4.抽象工厂模式（AbstractFactory）</h5><blockquote><p>提供一个创建<strong>一系列</strong>相关或相互依赖对象的接口，而<strong>无须指定它们具体的类</strong>。</p></blockquote><p><strong>适用性</strong></p><ul><li>当要强调一系列相关的产品对象的设计以便进行联合使用时</li><li>一个系统要由多个产品系列中的一个来配置时</li></ul><h5 id="5-生成器模式-x2F-建造者模式-Builder"><a href="#5-生成器模式-x2F-建造者模式-Builder" class="headerlink" title="5.生成器模式&#x2F;建造者模式(Builder)"></a>5.生成器模式&#x2F;建造者模式(Builder)</h5><blockquote><p>将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该<strong>复杂对象</strong></p></blockquote><p><img src="/img/post_img/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>构造过程必须允许被构造的对象<strong>有不同的表示</strong>时</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时</li></ul><p>​    </p><h4 id="结构型设计模式-7"><a href="#结构型设计模式-7" class="headerlink" title="结构型设计模式(7)"></a>结构型设计模式(7)</h4><h5 id="1-代理模式（Proxy）"><a href="#1-代理模式（Proxy）" class="headerlink" title="1.代理模式（Proxy）"></a>1.代理模式（Proxy）</h5><blockquote><p>为某对象提供一种代理以控制对该对象的访问</p><p>限制、增强或修改该对象的一些特性</p></blockquote><p><img src="/img/post_img/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>将一个对象加以包装以控制对这个对象的访问</li><li>在需要比较通用和复杂的对象指针代替简单的指针时</li><li>为其他对象提供一种代理以控制对这个对象的访问</li></ul><h5 id="2-适配器模式（Adapter）"><a href="#2-适配器模式（Adapter）" class="headerlink" title="2.适配器模式（Adapter）"></a>2.适配器模式（Adapter）</h5><blockquote><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</p></blockquote><p><img src="/img/post_img/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>将一个对象加以包装以给客户提供其希望的另外一个接口</li><li>想使用一个已经存在的类，而其接口不符合要求</li><li>使所有接口不兼容类可以一起工作</li></ul><h5 id="3-桥接模式-Bridge"><a href="#3-桥接模式-Bridge" class="headerlink" title="3.桥接模式(Bridge)"></a>3.桥接模式(Bridge)</h5><blockquote><p>将抽象部分与其实现部分分离，使它们都可以独立地变化</p></blockquote><p><strong>适用性</strong></p><ul><li>类的抽象和其实现之间不希望有一个固定的绑定关系</li><li>接口或抽象类不稳定</li></ul><h5 id="4-装饰器模式（Decorator）"><a href="#4-装饰器模式（Decorator）" class="headerlink" title="4.装饰器模式（Decorator）"></a>4.装饰器模式（Decorator）</h5><blockquote><p>动态地给一个对象<strong>添加</strong>一些额外的职责。就增加功能而言，Decorator模式比生成子类更加灵活</p></blockquote><p><strong>适用性</strong></p><ul><li>将一个对象加以包装以提供一些额外的行为</li><li>动态地给一个对象添加一些额外的职责</li></ul><h5 id="5-外观-x2F-门面模式（Facade）"><a href="#5-外观-x2F-门面模式（Facade）" class="headerlink" title="5.外观&#x2F;门面模式（Facade）"></a>5.外观&#x2F;门面模式（Facade）</h5><blockquote><p>为系统中多个子系统提供一致的对外调用， 对客户端隐藏子系统细节， 降低其与子系统的耦合</p></blockquote><p><strong>适用性</strong></p><ul><li>将<strong>一系列对象</strong>加以包装以<strong>简化其接口</strong></li><li>需要为一个复杂子系统提供一个简单接口</li></ul><h5 id="6-享元模式（Flyweight）"><a href="#6-享元模式（Flyweight）" class="headerlink" title="6.享元模式（Flyweight）"></a>6.享元模式（Flyweight）</h5><blockquote><p>运用共亨技术有效地支持大量细粒度的对象</p><p>是池技术的重要实现方式</p></blockquote><p><strong>适用性</strong></p><ul><li>系统中存在大量相似对象 </li><li>完全由于使用大量的对象，造成很大的存储开销</li><li>需要<strong>缓冲池</strong>的场景</li><li>进行对象共享,以减少对象数量从而达到较少的内存占用并提升性能</li></ul><h5 id="7-组合模式（Composite）"><a href="#7-组合模式（Composite）" class="headerlink" title="7.组合模式（Composite）"></a>7.组合模式（Composite）</h5><blockquote><p>将对象组合成树型结构以表示“部分-整体”的层次结构</p></blockquote><p><strong>适用性</strong></p><ul><li>表示对象的部分-整体层次结构</li><li>将多个对象组合在一起进行操作，常用于表示树形结构中，<strong>例如二叉树</strong></li></ul><h4 id="行为型设计模式-11"><a href="#行为型设计模式-11" class="headerlink" title="行为型设计模式(11)"></a>行为型设计模式(11)</h4><h5 id="1-模板方法模式（Template-Method）"><a href="#1-模板方法模式（Template-Method）" class="headerlink" title="1.模板方法模式（Template Method）"></a>1.模板方法模式（Template Method）</h5><blockquote><p>定义一个操作中的算法骨架，而将算法的一些步骤放到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</p></blockquote><p><img src="/img/post_img/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现</li><li>各子类中公共的行为应被提取出来并集中到一个公共父类中，以避免代码重复</li></ul><h5 id="2-策略模式（Strategy）"><a href="#2-策略模式（Strategy）" class="headerlink" title="2.策略模式（Strategy）"></a>2.策略模式（Strategy）</h5><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换</p><p>提供不同的算法策略</p></blockquote><p><img src="/img/post_img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>需要使用一个算法地不同变体</li><li>许多相关的类仅仅是行为有异</li><li>一个类定义了多种行为,并且这些行为在这个类的操作中以多个条件语句的形式出现，将相关的条件分支移入它们各自的Strategy类中，以代替这些条件语句</li></ul><h5 id="3-命令模式（Command）"><a href="#3-命令模式（Command）" class="headerlink" title="3.命令模式（Command）"></a>3.命令模式（Command）</h5><blockquote><p>将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化;对请求排队或记录请求日志，以及支持可撤销的操作</p></blockquote><p><strong>适用性</strong></p><ul><li>抽象出执行的动作以参数化某对象</li><li>将请求封装为对象从而可以使用不同的请求对客户进行参数化</li><li>在不同的时刻指定、排列和执行请求</li></ul><h5 id="4-职责链模式（Chain-of-Responsibility）"><a href="#4-职责链模式（Chain-of-Responsibility）" class="headerlink" title="4.职责链模式（Chain of Responsibility）"></a>4.职责链模式（Chain of Responsibility）</h5><blockquote><p>把请求从链中的一个对象传到下一个对象，直到请求被响应为止</p></blockquote><p><strong>适用性</strong></p><ul><li>有多个对象可以处理一个请求，在运行时刻自动确定由哪个对象处理</li><li>想在不明确指定接收者的情况下向多个对象中的一个提交一个请求</li><li>一个客户需要使用一组相关对象</li></ul><h5 id="5-状态模式（State）"><a href="#5-状态模式（State）" class="headerlink" title="5.状态模式（State）"></a>5.状态模式（State）</h5><blockquote><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类</p></blockquote><p><img src="/img/post_img/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>一个对象的行为决定于其状态且必须在运行时刻根据状态改变行为</li><li>一个对象在其内部状态改变时改变其行为</li></ul><h5 id="6-观察者模式（Observer）"><a href="#6-观察者模式（Observer）" class="headerlink" title="6.观察者模式（Observer）"></a>6.观察者模式（Observer）</h5><blockquote><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</p></blockquote><p><img src="/img/post_img/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁时</li><li>当一个对象状态改变时所有依赖它的对象得到通知并自动更新</li><li>在发布-订阅(Publish-Subscribe）消息模型中，订阅者订阅一个主题后，当该主题有新消息到达时，所有订阅者都会收到通知</li></ul><h5 id="7-中介者模式（Mediator）"><a href="#7-中介者模式（Mediator）" class="headerlink" title="7.中介者模式（Mediator）"></a>7.中介者模式（Mediator）</h5><blockquote><p>用一个中介对象来封装一系列的对象交互, 中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互</p></blockquote><p><img src="/img/post_img/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.png"></p><p><strong>适用性</strong></p><ul><li>一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解</li><li>减少多个对象或类之间的通信复杂性</li></ul><h5 id="8-迭代器模式（Iterator）"><a href="#8-迭代器模式（Iterator）" class="headerlink" title="8.迭代器模式（Iterator）"></a>8.迭代器模式（Iterator）</h5><blockquote><p>提供一种方法顺序访问一个聚合对象中的各个元素，且不需要暴露该对象的内部表示</p></blockquote><p><strong>适用性</strong></p><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示</li></ul><h5 id="9-访问者模式（Visitor）"><a href="#9-访问者模式（Visitor）" class="headerlink" title="9.访问者模式（Visitor）"></a>9.访问者模式（Visitor）</h5><blockquote><p>分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果</p></blockquote><p><strong>适用性</strong></p><ul><li>定义对象结构的类很少改变，但经常需要在此结构上定义新的操作</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作</li></ul><h5 id="10-备忘录模式（Memento）"><a href="#10-备忘录模式（Memento）" class="headerlink" title="10.备忘录模式（Memento）"></a><strong>10.备忘录模式（Memento）</strong></h5><blockquote><p>在不破坏封装性的前提下捕获一个对象的内部状态，并在对象之外保存这个状态。这样以后就可以将对象恢复到原先保存的状态</p></blockquote><p><strong>适用性</strong></p><ul><li>保存一个对象在某一个时刻的（部分）状态，这样以后需要时它才能恢复到先前的状态</li></ul><h5 id="11-解释器模式（Interpreter）"><a href="#11-解释器模式（Interpreter）" class="headerlink" title="11.解释器模式（Interpreter）"></a>11.解释器模式（Interpreter）</h5><blockquote><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子</p></blockquote><p><strong>适用性</strong></p><ul><li>有一个语言需要解释执行，并且可将句子表示为一个抽象语法树</li><li>如四则运算、正则表达式等</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择题考点</title>
    <link href="/2022/08/29/%E8%BD%AF%E8%80%83/%E9%80%89%E6%8B%A9%E9%A2%98%E8%80%83%E7%82%B9/"/>
    <url>/2022/08/29/%E8%BD%AF%E8%80%83/%E9%80%89%E6%8B%A9%E9%A2%98%E8%80%83%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="选择题考点"><a href="#选择题考点" class="headerlink" title="选择题考点"></a>选择题考点</h2><h4 id="常见密钥加密算法"><a href="#常见密钥加密算法" class="headerlink" title="常见密钥加密算法"></a>常见密钥加密算法</h4><h5 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法:"></a>对称加密算法:</h5><blockquote><p>加解密使用同一个密钥，又称为私人秘钥加密&#x2F;共享秘钥加密</p></blockquote><p>特点：</p><ul><li>加密强度不高但效率高</li><li>在为大量明文加密时一般使用对称加密</li></ul><p>常见对称加密算法：</p><ul><li><strong>DES</strong>（Data Encryption Standard，数据加密标准）</li><li><strong>3DES</strong>（ Triple DES，三重数据加密算法 ）</li><li><strong>RC5</strong>（分组密码算法）</li><li><strong>RC4</strong> (流加密算法)</li><li><strong>IDEA</strong>（International Data Encryption Algorithm，国际数据加密算法）</li><li><strong>AES</strong>（Advanced Encryption Standard，高级加密标准，<strong>分组加密算法</strong>）</li></ul><h5 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法:"></a>非对称加密算法:</h5><blockquote><p>公钥加密，相应的私钥解密，也称公开密钥加密</p></blockquote><p>特点：</p><ul><li>加密速度慢但强度高</li></ul><p>常见非对称加密算法：</p><ul><li><strong>RSA</strong>（公开密钥密码体制）</li><li><strong>DSA</strong> (Digital Signature Algorithm，一种更高级的验证方式)</li><li><strong>ECC</strong>（Elliptic Curves Cryptography，椭圆曲线加密算法）</li></ul><h4 id="消息摘要算法"><a href="#消息摘要算法" class="headerlink" title="消息摘要算法"></a>消息摘要算法</h4><blockquote><p>对加密内容生成一个摘要，注意摘要不是加密，无法解密，仅能用来标识原内容。</p></blockquote><p>常见消息摘要算法：</p><ul><li>MD5&#x2F;SHA</li></ul><h4 id="加密技术的应用"><a href="#加密技术的应用" class="headerlink" title="加密技术的应用"></a>加密技术的应用</h4><ul><li><strong>数字信封</strong>：用接收方公钥加密使用的对称密钥。</li><li><strong>数字签名</strong>：用发送方<strong>私钥</strong>签名，<strong>保证发送方身份真实性</strong>，发送者不可抵赖，与信息摘要结合，可防篡改。对用户的身份进行认证。</li><li><strong>信息摘要</strong>：单向散列值函数，防篡改，保证消息完整性</li><li><strong>数字证书</strong>：确保消息不可否认。内容包括：CA签名(验证网站真伪)、用户信息（用户名称）、用户公钥等</li></ul><h4 id="编译器和解释器"><a href="#编译器和解释器" class="headerlink" title="编译器和解释器"></a>编译器和解释器</h4><h5 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h5><blockquote><p>将”高级语言”翻译为低级语言</p><p>将源程序整个编译成可执行的目标代码，执行时不需要编译器</p><p>翻译与执行是分开的</p></blockquote><p><strong>过程</strong></p><p><img src="/img/post_img/%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F%E8%BF%87%E7%A8%8B.png"></p><p><strong>详细过程</strong></p><p><img src="/img/post_img/%E8%AF%A6%E7%BB%86%E7%BC%96%E8%AF%91%E7%A8%8B%E5%BA%8F%E8%BF%87%E7%A8%8B.png"></p><h5 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h5><blockquote><p>把高级编程语言逐行转译</p><p>执行过程较慢</p></blockquote><p><strong>过程</strong></p><p><img src="/img/post_img/%E8%A7%A3%E9%87%8A%E7%A8%8B%E5%BA%8F%E8%BF%87%E7%A8%8B.png"></p><h4 id="内聚方式"><a href="#内聚方式" class="headerlink" title="内聚方式"></a>内聚方式</h4><blockquote><p>一个模块各个元素彼此结合的紧密程度</p><p>由高到低</p></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>功能内聚</td><td>一个模块内所有处理元素完成一个，而且仅完成一个功能</td></tr><tr><td>顺序内聚</td><td>一个模块内处理元素和同一个功能密切相关，而且这些处理元素必须顺序执行(通常前一个处理元素的输出时后一个处理元素的输入)</td></tr><tr><td>通信内聚</td><td>模块内的所有处理元素都在同一个数据结构上操作，或者各处理使用相同的输入数据或者产生相同的输出数据</td></tr><tr><td>过程内聚</td><td>一个模块内的处理元素是相关的，而且必须以特定的次序执行过程。内聚与顺序内聚的区别是：  顺序内聚中是数据流从一个处理单元流到另一个处理单元，而过程内聚是控制流从一个动作流向另一个动作</td></tr><tr><td>时间内聚</td><td>一个模块包含的任务必须在同一段时间内执行</td></tr><tr><td>逻辑内聚</td><td>模块内执行若干个逻辑上相似的功能，通过参数确定该模块完成哪一个功能</td></tr><tr><td>偶然内聚</td><td>一个模块由完成若干毫无关系的功能处理元素偶然组合在一起，各处理元素之间没有任何联系</td></tr></tbody></table><h4 id="耦合方式"><a href="#耦合方式" class="headerlink" title="耦合方式"></a>耦合方式</h4><blockquote><p>由高到低</p></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>内容耦合</td><td>一个模块<strong>直接访问另一模块</strong>的内容</td></tr><tr><td>公共耦合</td><td>一组模块都访问同一个<strong>全局数据结构</strong></td></tr><tr><td>外部耦合</td><td>一组模块都访问同一<strong>全局简单变量</strong></td></tr><tr><td>控制耦合</td><td>模块之间传递的不是数据信息，而是<strong>控制信息</strong>例如标志、开关量等，一个模块控制了另一个模块的功能</td></tr><tr><td>标记耦合</td><td>通过参数表传递<strong>记录信息(数据结构)</strong></td></tr><tr><td>数据耦合</td><td>调用模块和被调用模块之间只传递<strong>简单的数据项参数</strong></td></tr><tr><td>非直接耦合</td><td>两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的</td></tr></tbody></table><h4 id="软件质量模型"><a href="#软件质量模型" class="headerlink" title="软件质量模型"></a>软件质量模型</h4><table><thead><tr><th>质量特性</th><th>质量子特性</th></tr></thead><tbody><tr><td>功能性</td><td>适合性<br/>准确性<br/>互用性<br/>依从性<br/>安全性</td></tr><tr><td>可靠性</td><td>成熟性<br/>容错性<br/>易恢复性</td></tr><tr><td>易使用性</td><td>易理解性<br/>易学性<br/>易操作性</td></tr><tr><td>效率</td><td>时间特性<br/>资源特性</td></tr><tr><td>可维护性</td><td>易分析性<br/>易改变性<br/>稳定性<br/>易测试性</td></tr><tr><td>可移植性</td><td>适应性<br/>易安装性<br/>一致性<br/>易替换性</td></tr></tbody></table><h4 id="结构化分析组成"><a href="#结构化分析组成" class="headerlink" title="结构化分析组成"></a>结构化分析组成</h4><p>自顶向下：</p><ul><li>数据流图</li><li>数据字典: 数据库中数据的描写叙述</li><li>加工逻辑</li></ul><h4 id="CPU构成"><a href="#CPU构成" class="headerlink" title="CPU构成"></a>CPU构成</h4><blockquote><p>CPU主要由运算器、控制器、寄存器和内部总线等部件组成</p></blockquote><p><img src="/img/post_img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E6%A1%86%E5%9B%BE.png" alt="计算机组成框图"></p><p>运算器：</p><ol><li><p>算术逻辑单元(Arithmetic Logic Unit，ALU)：负责数据处理，实现对数据的算术运算和逻辑运算等</p></li><li><p>累加寄存器(Accumulator, AC)：当ALU执行算术或是逻辑运算的时候，为ALU提供一个工作区，<strong>提供数据并暂时存储计算结果</strong>，是一个通用寄存器</p></li><li><p>数据缓冲寄存器(Data Register,DR)：作为CPU和内存，外围设备之间数据的中转站。是CPU和内存，外围设备之间在操作速度上的缓冲</p></li><li><p>状态条件寄存器(Program Status Word, PSW)：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容，如运算结果进位标志</p></li></ol><p>控制器：</p><ol><li>程序计数器(Program Counter, PC)：具有寄存信息和记数两种功能，<strong>存放的是指令的地址</strong>，还有计数的功能，又称为指令计数器。</li><li>指令寄存器(Instruction Register，IR)：当CPU执行一条指令时，<strong>先把它从内存储器取到指令缓存器中</strong>，再送入到指令寄存器中，然后经过指令译码器的译码，从而产生各种微操作。</li><li>地址寄存器(Address Register，AR): 存放的是cpu访问内存单元的地址</li><li>指令译码器（Instruction Decoder, ID）:指令译码器对指令的操作码和地址码进行<strong>解析</strong>，转换成相应的操作信号</li></ol><h4 id="保护计算机软件著作权的法律"><a href="#保护计算机软件著作权的法律" class="headerlink" title="保护计算机软件著作权的法律"></a>保护计算机软件著作权的法律</h4><p>《中华人民共和国著作权法》和《计算机软件保护条例》</p><h4 id="中断向量"><a href="#中断向量" class="headerlink" title="中断向量"></a>中断向量</h4><blockquote><p>记录每个不同中断发生后要跳转的中断服务程序的其实地址</p></blockquote><p>中断向量提供中断服务程序入口地址</p><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><blockquote><p>计算机设备和设备之间传输信息的公共数据通道</p></blockquote><p>总线分为数据总线（Data Bus，DB）、地址总线（Address Bus，AB）和控制总线（Control Bus，CB）</p><ul><li>数据总线：用来传送数据信息，是双向的</li><li>地址总线：传送CPU发出的地址信息，是单向的，地址总线的宽度决定了CPU的最大寻址能力</li><li>控制总线：传送控制信号、时序信号和状态信息等，每一条线的信息传送方向是单方向，但作为一个整体则是双向的</li></ul><p>常见总线：</p><ul><li>PCI总线。PCI总线是目前微型机上广泛采用的<strong>内总线</strong>，采用<strong>并行传输</strong>方式。</li><li>PCI Express总线。PCI Express简称为PCI-E，采用点对点<strong>串行</strong>连接，每个设备都有自己的专用连接，不需要向整个总线请求带宽，而且可以把数据传输率提高到一个很高的频率。相对于传统PCI总线在单一时间周期内只能实现单向传输，PCI Express的半双工连接能提供更高的传输速率和质量。</li><li>SCSI总线。小型计算机系统接口（SCSI）是一条<strong>并行外总线</strong>，广泛用于连接软硬磁盘、光盘、扫描仪等。</li><li>SATA。SATA是Serial ATA的缩写，即串行ATA，它主要用作主板和大量存储设备（如硬盘及光盘驱动器）之间的数据传输之用。</li><li>USB。通用串行总线</li></ul><h4 id="统一过程-UP"><a href="#统一过程-UP" class="headerlink" title="统一过程(UP)"></a>统一过程(UP)</h4><p>阶段里程碑：</p><ol><li>初启阶段：生命周期目标</li><li>精化阶段：生命周期架构</li><li>构建阶段：初始运作功能</li><li>移交阶段：产品发布</li><li>产生阶段</li></ol><h4 id="网关协议"><a href="#网关协议" class="headerlink" title="网关协议"></a>网关协议</h4><p><strong>内部网关协议</strong>(IGP, 在一个域中选择路由)：</p><ul><li>RIP(路由信息协议)：相邻路由器交换路由表</li><li>OSPF(最短路径优先):  路由器之间通告网络接口的状态来建立链路状态数据库</li></ul><p><strong>外部网关协议</strong>(EGP, 两个相邻的位于各自域边界上的路由器提供一种交换消息和信息的方法):</p><ul><li>BGP</li></ul><h4 id="环路复杂度"><a href="#环路复杂度" class="headerlink" title="环路复杂度"></a>环路复杂度</h4><p>计算方式：</p><ol><li>流图G的环形复杂度V(G)&#x3D;m-n+2，其中，m是流图中边的条数，n是结点数。</li><li>流图G的环形复杂度V(G)&#x3D;P+1，其中，P是流图中判定结点的数目。</li></ol><h4 id="浮点数加法"><a href="#浮点数加法" class="headerlink" title="浮点数加法"></a>浮点数加法</h4><p>小阶对大阶，尾数向右移</p><h4 id="CMMI成熟度模型"><a href="#CMMI成熟度模型" class="headerlink" title="CMMI成熟度模型"></a>CMMI成熟度模型</h4><blockquote><p>方便记忆方法：描述（说明）是名称产生的结果。</p></blockquote><table><thead><tr><th>等级编号</th><th>等级</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>未执行、未完成</td><td>过程域未被执行或未得到CL1所定义的目标</td></tr><tr><td>1</td><td>已执行</td><td>共性目标是将可标识的输入工作产品转成输出产品，满足过程域的特定目标。</td></tr><tr><td>2</td><td>已管理</td><td>已管理的过程制度化，所有工作任务和产品都被监控</td></tr><tr><td>3</td><td>已定义</td><td>已定义的过程制度化，收集过程资产和度量，并用来将来对过程进行改进</td></tr><tr><td>4</td><td>定量管理</td><td>在过程域中引入度量，并利用度量进行管理</td></tr><tr><td>5</td><td>优化的</td><td>使用量化（统计学）手段改变和优化过程域，以满足客户的改变和持续,改进计划中的过程域的功效</td></tr></tbody></table><h4 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h4><ul><li><p>核心公式：<strong>2r ≥k+r+1</strong> (k为信息的个数，r为校验位的个数)</p></li><li><p>校验码Pi 必须是在2的n次方位置</p></li><li><p>确定校正位的数值：首先必须<strong>知道哪些信息位需要校正位来校正</strong>，校正的原则：想要校正第几（i）位，则应该满足对应的那几个校正位相加等于i。例如3&#x3D;1+2；7&#x3D;1-+2+4。然后校正位的值为对应信息位的<strong>异或</strong></p></li></ul><h4 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h4><ul><li>数据提取（Data Extraction）指根据一定的目的，<strong>从原始文献中摘录所需要的信息</strong>，以作进一步存储、换算和分析的过程</li><li>OLAP(Online Analytical Processing) 是<strong>在线分析处理</strong>，顾名思义就是OLAP是<strong>用于数据分析</strong>的；因此，它使我们能够同时分析来自多个数据库系统的信息。换句话说，我们可以说它是一种计算方法，可以让用户轻松提取所需的数据并查询数据，以便从不同的角度进行分析</li><li>OLTP (On-Line Transaction Processing)称为面向交易的处理过程，其基本特征是前台接收的用户数据可以立即传送到计算中心进行处理，并在很短的时间内给出处理结果，是对用户操作快速响应的方式之一。</li><li>ETL(Extract, transform, load)是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程，目的是将企业中的分散、零乱、标准不统一的数据整合到一起，为企业的决策提供分析依据</li></ul><h4 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h4><table><thead><tr><th>端口名</th><th>端口号</th></tr></thead><tbody><tr><td>简单邮件传输协议(SMPT)</td><td>25</td></tr><tr><td>邮局协议(POP3)</td><td>110</td></tr><tr><td>超文本传输协议(HTTP)</td><td>80</td></tr><tr><td>加密的超文本传输(HTTPS)</td><td>443</td></tr><tr><td>文件传输服务(FTP)</td><td>20数据端口，21命令控制端口</td></tr><tr><td>域名服务(DNS)</td><td>53</td></tr><tr><td>远程登录(Telnet)</td><td>23</td></tr></tbody></table><h4 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h4><blockquote><p> 分为主动攻击和被动攻击两种</p></blockquote><p>主动攻击包括：</p><blockquote><p>主动攻击是攻击者主动做一些不利于你的系统的事情</p></blockquote><ul><li>拒绝服务攻击(DOS)</li><li>分布式Dos(DDOS)</li><li>信息篡改</li><li>资源使用</li><li>欺骗、伪装、重放等</li></ul><p>被动攻击包括：</p><blockquote><p>被动攻击主要是搜集信息而不是进行访问</p></blockquote><ul><li>嗅探</li><li>信息搜集等</li></ul><h4 id="入侵检测"><a href="#入侵检测" class="headerlink" title="入侵检测"></a>入侵检测</h4><ul><li>专家系统</li><li>模型检测</li><li>简单匹配</li></ul><h4 id="常用中间代码"><a href="#常用中间代码" class="headerlink" title="常用中间代码"></a>常用中间代码</h4><ul><li>后缀式</li><li>三地址码</li><li>树</li><li>四元式</li></ul><h4 id="软件维护类型"><a href="#软件维护类型" class="headerlink" title="软件维护类型"></a>软件维护类型</h4><ul><li>改正性：改正在系统开发阶段已发生而系统测试阶段尚未发现的错误</li><li>适应性：使应用软件适应信息技术变化和管理需求变化而进行的修改</li><li>完善性：增加一些在系统分析和设计阶段中没有规定的功能与性能特征</li><li>预防性：改进应用软件的可靠性和可维护性</li></ul><p>​</p><h4 id="DNS域名查询次序"><a href="#DNS域名查询次序" class="headerlink" title="DNS域名查询次序"></a>DNS域名查询次序</h4><p>本机hosts –&gt; 本地DNS缓存 –&gt; 本地DNS服务器 –&gt; 根域名服务器</p><h4 id="敏捷方法"><a href="#敏捷方法" class="headerlink" title="敏捷方法"></a>敏捷方法</h4><ul><li>极限编程XP：激发开发人员创造性、使得管理负担最小的一组技术</li><li>自适应软件开发：核心是三个非线性的、重送的开发阶段:猜测,合作与学习</li><li>水晶方法：水晶方法体系考虑到人们一般很难严格遵循一个纪律约束很强的过程,<strong>认为每一种不同的项目都需要一套不同的策略、约定和方法论</strong>。</li><li>并列争球法：用<strong>迭代</strong>的方法,其中把每<strong>30天一次的迭代称为一个“冲刺”</strong>,并按需求的优先级来实现产品。多个自组织和自治小组并行地递增实现产品。协调是通过简短的日常会议来进行的。</li></ul><h4 id="成本估算"><a href="#成本估算" class="headerlink" title="成本估算"></a>成本估算</h4><ul><li><strong>专家估算</strong>：根据专家的行业经验和历史数据对软件开发过程的成本进行估算。</li><li><strong>Wolverton</strong>：也叫loc方法，通过执行的源代码函数来进行成本估算，估算准确性低，现在已经不用了。</li><li><strong>COCOMO</strong>：构造性成本模型，是一种参数化的成本估算方法。例如通过软件的难度、规模等作为参数进行成本估算。</li><li><strong>COCOMOⅡ</strong>：COCOMOⅡ是对COCOMO作出的改进版，把最新软件开发方法考虑在内。COCOMOⅡ由三个不同的计算模型组成：<br>1）应用组合模型：适用于使用现代GUI工具开发的项目。<br>2）早期开发模型：适用于在软件架构确定之前对软件进行粗略的成本和事件估算，包含了一系列的新的成本和进度估算方法。基于功能点或者代码行。<br>3）结构化后期模型：是COCOMOⅡ中最详细的模型。它使用在整体软件架构已确定之后。包含最新的成本估算、代码行计算方法。</li></ul><h4 id="系统性能评测"><a href="#系统性能评测" class="headerlink" title="系统性能评测"></a>系统性能评测</h4><ul><li><strong>可靠性</strong>：一个系统对于给定时间间隔内、在给定条件下失效运作的概率。可用MTTF &#x2F; （1 + MTTF）来度量，MTTF为平均无故障时间。</li><li><strong>可用性</strong>：在给定的时间点上，一个系统能够按照规格说明正确运作的概率。可用MTBF &#x2F;（1 + MTBF）来度量，MTBF为平均失效间隔时间。</li><li><strong>可维护性</strong>：在给定的使用条件下，在规定的时间间隔内，使用规定的过程和资源完成维护活动的概率。可用 1 &#x2F; （1 + MTTR）来度量，其中MTTR为平均修复时间。</li></ul><h4 id="Cache与主存的三种地址映射方式"><a href="#Cache与主存的三种地址映射方式" class="headerlink" title="Cache与主存的三种地址映射方式"></a>Cache与主存的三种地址映射方式</h4><ol><li><p>全相联映射</p><blockquote><p>Cache 中的<strong>任意</strong>一行可以存放主存中的<strong>任意</strong>一块</p></blockquote></li><li><p>直接映射</p><blockquote><p>主存中每个区的第 i 块会映射到Cache中的第 i 行，主存中的某块只能映射到<strong>特定</strong>的Cache一行中</p></blockquote></li><li><p>组相联映射</p><blockquote><p>是全相联映射与直接映射之间的折中方式，主存中的某块可以映射到Cache一组行中的其中一个上</p></blockquote></li></ol><h4 id="IO软件层次"><a href="#IO软件层次" class="headerlink" title="IO软件层次"></a>IO软件层次</h4><p><img src="/img/post_img/IO%E8%BD%AF%E4%BB%B6%E5%B1%82%E6%AC%A1.png"></p><h4 id="软件测试阶段和测试策略"><a href="#软件测试阶段和测试策略" class="headerlink" title="软件测试阶段和测试策略"></a>软件测试阶段和测试策略</h4><p>测试阶段</p><ol><li>单元测试</li><li>集成测试</li><li>系统测试</li></ol><p>测试策略</p><ul><li>自底向上：从最底层的构建开始测试</li><li>自顶向下：从最顶层的构建开始测试</li><li>三明治：结合自底向上和自顶向下</li><li>一次性：对所有构建一次性测试，然后集成</li></ul><h4 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h4><blockquote><p>完全依赖：用<strong>候选码</strong>中全部的值才能决定 <strong>非主属性</strong></p></blockquote><p>​第一范式（1NF）：所有的属性不可再分；</p><p>​    第二范式（2NF）：非键属性<strong>完全依赖</strong>于主键；</p><p>​    第三范式（3NF）：非主性属性没有传递依赖；</p><p>​    BCNF：任何一个函数依赖中决定因素都是候选码；</p><h4 id="递归复杂度计算公式"><a href="#递归复杂度计算公式" class="headerlink" title="递归复杂度计算公式"></a>递归复杂度计算公式</h4><p>T(N) &#x3D; a * T(N&#x2F;b) + O(N^d)</p><ol><li>当logb(a) &gt; d, O(N^logb(a))</li><li>当logb(a) &lt; d, O(N^d)</li><li>当logb(a) &#x3D; d, O(N^d * logN)</li></ol><h4 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h4><ul><li>木马病毒：冰河</li><li>蠕虫病毒：欢乐时光、熊猫烧香、红色代码、爱虫病毒、震网</li><li>宏病毒：感染的主要目标是文本文档、电子表格等</li></ul><h4 id="DHCP客户端可从DHCP服务器获得"><a href="#DHCP客户端可从DHCP服务器获得" class="headerlink" title="DHCP客户端可从DHCP服务器获得"></a>DHCP客户端可从DHCP服务器获得</h4><ul><li>本机IP地址、</li><li>DNS服务器地址、</li><li>DHCP服务器地址、</li><li>默认网关地址，</li><li>但没有Web服务器、邮件服务器地址</li></ul><h4 id="多态分类"><a href="#多态分类" class="headerlink" title="多态分类"></a>多态分类</h4><ul><li><p><strong>参数多态</strong>：采用参数化模板，通过给出不同的类型参数，使得一个结构有多种类型。</p><p>例如：泛型</p></li><li><p><strong>包含多态</strong>：同样的操作可用于一个类型及其子类型 （重写）</p></li><li><p><strong>过载多态</strong>：同一个名（操作符﹑函数名）在不同的上下文中有不同的类型 （重载）</p></li><li><p><strong>强制多态</strong>：<em>把操作对象的</em>类型强行加以变换，以符合函数或操作符的要求</p></li></ul><h4 id="Flynn分类法"><a href="#Flynn分类法" class="headerlink" title="Flynn分类法"></a>Flynn分类法</h4><ul><li>单指令流单数据流机器（SISD）传统串行机器</li><li>单指令流多数据流机器（SIMD）一条指令流</li><li>多指令流单数据流机器（MISD）只有理论意义而无实例</li><li>多指令流多数据流机器（SISD）同时多个指令流</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件过程模型</title>
    <link href="/2022/08/25/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/08/25/%E8%BD%AF%E8%80%83/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h2><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p><img src="/img/post_img/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B.png"></p><blockquote><p>又称为经典生命周期模型，<strong>以文档作为驱动</strong>、适合于软件需求很明确的软件项目或二次开发的模型。</p></blockquote><p>优点:</p><ul><li>容易理解，管理成本低。</li></ul><p>缺点:</p><ul><li>必须能够完整、正确和清晰地表达需要</li><li>变更需求困难</li><li>很难评估真正的进度</li><li>对于项目风险的控制能力较弱，从而导致项目常常延期完成，开发费用超出预算</li><li>任务之间存在依赖性，开发团队的一些成员要等待另一些成员工作完成。</li></ul><h5 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h5><p><img src="/img/post_img/V%E6%A8%A1%E5%9E%8B.png"></p><blockquote><p>瀑布模型的一个变体，强调在各个阶段进行测试和验证，以提升软件质量。</p></blockquote><p>优点:</p><ul><li>相较于瀑布模型提升了软件质量</li></ul><p>缺点:</p><ul><li>更耗费人力和时间</li></ul><h4 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h4><p><img src="/img/post_img/%E5%A2%9E%E9%87%8F%E6%A8%A1%E5%9E%8B.png"></p><blockquote><p>先开发出一个初始的实现，听取用户的使用意见，通过不断修改直到产生一个充分的版本</p><p>适合小型项目或需要快速上线的项目</p></blockquote><p>优点:</p><ul><li>可以更经济、更容易、更快速的变更</li><li>交付和部署更快</li><li>用户可以更早的使用软件并创造价值</li></ul><p>缺点:</p><ul><li>如果没有对用户的变更需求进行规划，致缺乏整体规划，导致功能堆砌</li><li>越往后变更越困难，成本逐渐上升</li></ul><h4 id="演化模型"><a href="#演化模型" class="headerlink" title="演化模型"></a>演化模型</h4><h5 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h5><p><img src="/img/post_img/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%9E%8B.png"></p><blockquote><p>一个软件系统的最初版本，用于验证概念、适用设计选型、发现更多的问题和可能的解决方法。</p><p>原型是为定义需求服务的，在需求明确后，原型需要丢弃（至少部分丢弃）。</p><p>适用于需求不明确时</p></blockquote><p>优点:</p><ul><li>有助于启发和验证系统需求</li></ul><p>缺点:</p><ul><li>开发快没有文档，不利于维护</li><li>容易忽略性能、安全、可靠性等要素</li></ul><h5 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h5><p><img src="/img/post_img/%E8%9E%BA%E6%97%8B%E6%A8%A1%E5%9E%8B.png"></p><p>将过程（项目阶段）用螺旋线表示，每个螺旋线构成一个回路，每个回路由不同的风险驱动，根据这些风险，在每个阶段规划可选的策略方案。</p><blockquote><p>是一种<strong>风险驱动</strong>型的过程模型</p><p>结合了原型的迭代性质和瀑布模型的系统性和可控性特点。</p></blockquote><p>优点:</p><ul><li>实现风险管理，降低变更风险</li><li>支持用户需求的动态变化</li></ul><p>缺点:</p><ul><li>需要开发人员具有相当丰富的风险评估经验和专门知识</li><li>过多的迭代次数会增加开发成本，延迟提交时间</li></ul><h4 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h4><p><img src="/img/post_img/%E5%96%B7%E6%B3%89%E6%A8%A1%E5%9E%8B.png"></p><blockquote><p><strong>以用户需求为动力，以对象作为驱动</strong>的模型，适合于<strong>面向对象</strong>的开发方法</p><p>该模型认为软件开发过程自下而上周期的各阶段是相互迭代和无间隙的</p></blockquote><p>优点:</p><ul><li>功能需求、功能模块间的关系、数据流等描述清楚</li></ul><p>缺点:</p><ul><li>开发阶段是重叠的，开发过程中需要大量的开发人员，不利于项目的管理。</li><li>需要严格的管理文档，使得审核的难度加大。</li></ul><h4 id="基于构件的开发模型"><a href="#基于构件的开发模型" class="headerlink" title="基于构件的开发模型"></a>基于构件的开发模型</h4><p><img src="/img/post_img/%E5%9F%BA%E4%BA%8E%E6%9E%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B.png"></p><blockquote><p>利用预先包装的构件来构造应用系统</p><p><strong>快速开发</strong></p><p>本质上是演化模型，需要以迭代方式构建软件</p></blockquote><h4 id="形式化方法模型"><a href="#形式化方法模型" class="headerlink" title="形式化方法模型"></a>形式化方法模型</h4><blockquote><p>建立在<strong>严格数学基础上</strong>的一种软件开发方法，其主要活动是生成计算机软件形式化的数学规格说明。</p></blockquote><h4 id="敏捷方法"><a href="#敏捷方法" class="headerlink" title="敏捷方法"></a>敏捷方法</h4><h5 id="极限编程-XP"><a href="#极限编程-XP" class="headerlink" title="极限编程(XP)"></a>极限编程(XP)</h5><blockquote><p>极限是指将我们认同的有效软件开发原理和实践应用到极限，<strong>频繁地去实践</strong></p><p>尽可能早地、持续地对有价值的软件的交付来使客户满意</p><p>使用户能够在发开周期后期改变需求</p><p>极端编程属于轻量级的方法，认为文档、架构不如直接编程来的直接</p></blockquote><h5 id="水晶法"><a href="#水晶法" class="headerlink" title="水晶法"></a>水晶法</h5><blockquote><p>认为每一个不同的项目都需要一套不同的策略</p></blockquote><h5 id="并列争求法"><a href="#并列争求法" class="headerlink" title="并列争求法"></a>并列争求法</h5><h5 id="自适应软件开发"><a href="#自适应软件开发" class="headerlink" title="自适应软件开发"></a>自适应软件开发</h5>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口管理</title>
    <link href="/2022/08/21/%E5%85%B6%E4%BB%96/%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <url>/2022/08/21/%E5%85%B6%E4%BB%96/%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h2><h4 id="YApi"><a href="#YApi" class="headerlink" title="YApi"></a>YApi</h4><blockquote><p>一款api管理平台</p></blockquote><p><a href="https://github.com/YMFE/yapi">源码地址</a></p><p>安装比较麻烦，和apifox功能差不多</p><h4 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h4><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Swagger-UI API文档生产工具--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>            .apiInfo(apiInfo())<br>            .select()<br>            <span class="hljs-comment">//为当前包下controller生成API文档</span><br>            .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.xw.mallLearning.controller&quot;</span>))<br>            <span class="hljs-comment">//为有@Api注解的Controller生成API文档</span><br>            <span class="hljs-comment">//                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br>            <span class="hljs-comment">//为有@ApiOperation注解的方法生成API文档</span><br>            <span class="hljs-comment">//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br>            .paths(PathSelectors.any())<br>            .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>            .title(<span class="hljs-string">&quot;SwaggerUI&quot;</span>)<br>            .description(<span class="hljs-string">&quot;mall-learning&quot;</span>)<br>            .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>            .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当swagger版本大于2.6.x且springBoot版本也较高(我测试时是2.7.8)时，需要在配置类中添加以下Bean和配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BeanPostProcessor <span class="hljs-title function_">springfoxHandlerProviderBeanPostProcessor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPostProcessor</span>() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>            <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> WebMvcRequestHandlerProvider) &#123;<br>                customizeSpringfoxHandlerMappings(getHandlerMappings(bean));<br>            &#125;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequestMappingInfoHandlerMapping</span>&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">customizeSpringfoxHandlerMappings</span><span class="hljs-params">(List&lt;T&gt; mappings)</span> &#123;<br>            List&lt;T&gt; copy = mappings.stream()<br>                .filter(mapping -&gt; mapping.getPatternParser() == <span class="hljs-literal">null</span>)<br>                .collect(Collectors.toList());<br>            mappings.clear();<br>            mappings.addAll(copy);<br>        &#125;<br><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">private</span> List&lt;RequestMappingInfoHandlerMapping&gt; <span class="hljs-title function_">getHandlerMappings</span><span class="hljs-params">(Object bean)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ReflectionUtils.findField(bean.getClass(), <span class="hljs-string">&quot;handlerMappings&quot;</span>);<br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">return</span> (List&lt;RequestMappingInfoHandlerMapping&gt;) field.get(bean);<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException | IllegalAccessException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>常用注解</strong></p><p>使文档说明更加易读</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Api</td><td>用在请求类上(如Controller)，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在实体类上，表示返回响应数据的信息</td></tr><tr><td>@ApiModelProperty</td><td>用在实体类属性上</td></tr><tr><td>@ApiOperation</td><td>用在请求的方法上，说明方法的用途</td></tr><tr><td>@ApiImplicitParams</td><td>用在请求的方法上，表示一组参数的说明</td></tr><tr><td>@ApiImplicitParam</td><td>用在@ApiImplicitParams中，指定一个参数的各个方面</td></tr></tbody></table><h4 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h4><blockquote><p>用来生成各种格式的接口文档</p></blockquote><p>knife4j是集成swagger生成api文档的增强解决方案</p><p><strong>使用步骤</strong></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>导入配置类</p><p>在mvc配置类上加入两个注解并构建createRestApi方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfigSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.xw.reggie.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;瑞吉外卖&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .description(<span class="hljs-string">&quot;瑞吉外码接口文档&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在mvc配置类的addResourceHandlers方法中设置静态资源映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">registry.addResourceHandler(<span class="hljs-string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>如果有登录状态检测的话要设置放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//放行的路径</span><br><span class="hljs-string">&quot;/doc.html&quot;</span>,<br><span class="hljs-string">&quot;/webjars/**&quot;</span>,<br><span class="hljs-string">&quot;/swagger-resources&quot;</span>,<br><span class="hljs-string">&quot;/v2/api-docs&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>访问<code>http://localhost:8080/doc.html</code>可以查看接口和导出离线文档</p></li></ol><p><img src="/img/post_img/6452456.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>其他</category>
      
      <category>接口管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/08/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nginx/"/>
    <url>/2022/08/20/%E4%B8%AD%E9%97%B4%E4%BB%B6/Nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx是一款轻量级Web服务器&#x2F;反向代理服务器，占用内存少，并发能力强</p><h4 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h4><h5 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h5><ol><li><p><a href="http://nginx.org/en/download.html">官网下载</a></p><p><a href="http://nginx.org/download/">老版本下载</a></p></li><li><p>安装依赖包</p><blockquote><p><strong>GCC编译器</strong>：Nginx是使用C语言编写的程序，因此想要运行Nginx就需要安装一个编译工具。GCC就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了C语言。</p><p><strong>PCRE</strong>：Nginx在编译过程中需要使用到PCRE库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在Nginx的Rewrite模块和http核心模块都会使用到PCRE正则表达式语法。</p><p><strong>zlib</strong>：在Nginx的各个模块中需要使用gzip压缩</p><p><strong>OpenSSL</strong>：是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux"># -y表示需要用户确认的地方默认yes<br>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel<br></code></pre></td></tr></table></figure></li><li><p>解压nginx安装包</p><blockquote><p>最好放到一个特定的目录下管理，以后删除还需要</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">tar -zxvf nginx-1.16.1.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>进入目录执行命令来安装nginx</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">检查环境，配置环境变量，设置安装到哪<br>./configure --prefix=安装路径<br>编译安装<br><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure></li></ol><h5 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h5><blockquote><p>相比源码安装，会添加有很多额外的配置信息</p></blockquote><ol><li><p>通过yum进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y nginx<br></code></pre></td></tr></table></figure></li><li><p>查看安装的目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">whereis nginx</span><br></code></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 默认安装到了<span class="hljs-regexp">/usr/</span>sbin，配置文件在<span class="hljs-regexp">/etc/</span>ngin/nginx.conf<br>cd <span class="hljs-regexp">/usr/</span>sbin<br># 启动<br>./nginx<br></code></pre></td></tr></table></figure></li></ol><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><h5 id="源码方式"><a href="#源码方式" class="headerlink" title="源码方式"></a>源码方式</h5><ol><li><p>停止nginx</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./nginx -s stop<br></code></pre></td></tr></table></figure></li><li><p>删除nginx文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf nginx/<br></code></pre></td></tr></table></figure></li><li><p>到之前解压出来的源码目录下</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h5><ol><li><p>停止nginx</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./nginx -s stop<br>service nginx stop<br></code></pre></td></tr></table></figure></li><li><p>删除nginx自动启动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> nginx <span class="hljs-literal">off</span><br></code></pre></td></tr></table></figure></li><li><p>删除nginx本地文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">rm -rf <span class="hljs-regexp">/usr/</span>sbin/nginx<br>rm -rf <span class="hljs-regexp">/etc/</span>nginx<br>rm -rf <span class="hljs-regexp">/etc/i</span>nit.d/nginx<br></code></pre></td></tr></table></figure></li><li><p>yum清理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum <span class="hljs-built_in">remove</span> nginx<br></code></pre></td></tr></table></figure></li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li>conf&#x2F;nginx.confnginx配置文件</li><li>conf&#x2F;mime.types  HTTP协议中Content-Type的值和文件后缀名对应关系</li><li>html                        存放静态文件</li><li>logs                         存放日志</li><li>sbin                         二进制文件，用于启动、停止nginx</li></ul><h4 id="启动-x2F-关闭方式"><a href="#启动-x2F-关闭方式" class="headerlink" title="启动&#x2F;关闭方式"></a>启动&#x2F;关闭方式</h4><h5 id="信号控制方式"><a href="#信号控制方式" class="headerlink" title="信号控制方式"></a>信号控制方式</h5><table><thead><tr><th>信号</th><th>作用</th></tr></thead><tbody><tr><td>TERM&#x2F;INT</td><td>立即关闭整个服务</td></tr><tr><td>QUIT</td><td>“优雅”地关闭整个服务</td></tr><tr><td>HUP</td><td>重读配置文件并使用服务对新配置项生效</td></tr><tr><td>USR1</td><td>重新打开日志文件，可以用来进行日志切割</td></tr><tr><td>USR2</td><td>平滑升级到最新版的nginx</td></tr><tr><td>WINCH</td><td>所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令</td></tr></tbody></table><p> 通过<code>kill -signal PID</code>来使用</p><h5 id="命令方式"><a href="#命令方式" class="headerlink" title="命令方式"></a>命令方式</h5><p><code>./nginx -h</code> 查看所有参数</p><p><code>-t</code>：检查配置文件是否有错误</p><p><code>-s</code>：signal信号，后面可以跟stop[快速关闭]、quit[优雅关闭]、reopen[重新加载日志文件]、reload[重新加载配置文件]</p><p><code>-c</code>：指定配置文件</p><h4 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h4><p>不需要停止nginx服务器就可以升级版本</p><ol><li><p>准备两个版本的Nginx分别是 1.14.2和1.16.1，1.14.2的编译安装，1.16.1的只需要编译</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 1.14.2</span><br>./configure<br><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br><span class="hljs-meta"># 1.16.1</span><br>./configure<br><span class="hljs-built_in">make</span><br></code></pre></td></tr></table></figure></li><li><p>首先备份老版本的nginx下的<code>sbin/nginx</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br>mv nginx nginxold<br></code></pre></td></tr></table></figure></li><li><p>拷贝新版本的nginx的<code>/objs/nginx</code>到老版本nginx的<code>sbin/</code>目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd ~<span class="hljs-regexp">/nginx/</span>core<span class="hljs-regexp">/nginx-1.16.1/</span>objs<br>cp nginx <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br></code></pre></td></tr></table></figure></li><li><p>执行<code>make upgrade</code>进行升级</p></li><li><p><code>./nginx -v</code>查看版本</p></li></ol><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs linux">nginx目录下<br><br>1.查看nginx版本<br>./sbin/nginx -v<br><br>2.测试配置文件是否有错<br>./sbin/nginx -t<br><br>3.启动nginx服务<br>./sbin/nginx<br><br>4.停止nginx服务<br>./sbin/nginx -s stop<br><br>5.修改过配置文件后，重新加载配置文件<br>./sbin/nginx -s reload<br></code></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>分为三大块：全局块、events块、http块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs conf">worker_processes  1;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  65;<br><br>    server &#123;<br>        listen       80;<br>        # 支持正则，以~开头，如:~^www\.\w+\.com;<br>        server_name  localhost;<br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>        &#125;<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h5><h6 id="user指令"><a href="#user指令" class="headerlink" title="user指令"></a>user指令</h6><p>指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p><ol><li><p>在配置文件中设置用户信息</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span> <span class="hljs-title">www</span>;<br></code></pre></td></tr></table></figure></li><li><p>创建一个linux用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">useradd www</span><br></code></pre></td></tr></table></figure></li><li><p>创建<code>/home/www/html/index.html</code> 文件，在www用户目录下用户有访问权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and<br>working. Further configuration is required.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>For online documentation and support please refer to<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>Commercial support is available at<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Thank you for using nginx.<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>I am WWW<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置，测试访问</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">location</span> / &#123;<br>root   /home/www/html;<br><span class="hljs-keyword">index</span>  <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h6 id="work-process指令"><a href="#work-process指令" class="headerlink" title="work process指令"></a>work process指令</h6><ol><li><code>master_process on|off</code>：用来指定是否开启<strong>工作进程</strong>，默认on</li><li><code>worker_processes num/auto</code>：配置Nginx生成工作进程的数量，建议将该值和服务器CPU的内核数保存一致</li></ol><blockquote><p>这两个配置完要停止nginx再启动才会生效</p></blockquote><h6 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h6><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>daemon on|off</td><td>设定Nginx是否以守护进程的方式启动，默认on</td></tr><tr><td>pid file</td><td>配置Nginx当前master进程的进程号ID存储的文件路径</td></tr><tr><td>error_log  file [日志级别]</td><td>配置Nginx的错误日志存放路径，日志级别越低显示的信息越多</td></tr><tr><td>include file</td><td>引入其他配置文件</td></tr></tbody></table><h5 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h5><p>主要用来设置nginx和用户的网络连接</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>accept_mutex on|off</td><td>设置Nginx网络连接序列化。off时为当来了一个请求，会唤醒多个worker来竞争; on时则将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收</td></tr><tr><td>multi_accept on|off</td><td>设置一个工作进程是否允许同时接收多个网络连接</td></tr><tr><td>worker_connections number</td><td>配置单个worker进程最大的连接数，默认512</td></tr><tr><td>use  method</td><td>设置Nginx服务器选择哪种事件驱动来处理网络消息，select&#x2F;poll&#x2F;epoll&#x2F;kqueue</td></tr></tbody></table><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">events &#123;<br>    accept_mutex on;<br>    multi_accept on;<br>    use epoll;<br>    worker_connections  1024;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h5><h6 id="指定MIME-Type"><a href="#指定MIME-Type" class="headerlink" title="指定MIME-Type"></a>指定MIME-Type</h6><p>通过<code>default_type mime-type;</code>来指定返回数据的类型，可以配置在http、server、location中</p><p>例子</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/get_text</span> &#123;<br><span class="hljs-comment">#这里也可以设置成text/plain</span><br>    default_type text/html;<br>    return <span class="hljs-number">200</span> <span class="hljs-string">&quot;This is nginx&#x27;s text&quot;</span>;<br>&#125;<br><span class="hljs-keyword">location</span> <span class="hljs-title">/get_json</span>&#123;<br>    default_type application/json;<br>    return <span class="hljs-number">200</span> &#x27;&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TOM&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="自定义服务日志"><a href="#自定义服务日志" class="headerlink" title="自定义服务日志"></a>自定义服务日志</h6><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>access_log path [format]</td><td>设计用户访问请求日志的位置，后面可以跟日志输出格式</td></tr><tr><td>log_format name</td><td>指定日志的输出格式</td></tr><tr><td>sendfile on|off</td><td>是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能</td></tr><tr><td>keepalive_timeout time</td><td>设置长连接的超时时间</td></tr><tr><td>keepalive_requests number</td><td>设置一个keep-alive连接使用的次数</td></tr></tbody></table><h6 id="server块和location块"><a href="#server块和location块" class="headerlink" title="server块和location块"></a>server块和location块</h6><p>server块</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>listen address[:port]</td><td>配置监听端口</td></tr><tr><td>server_name  name</td><td>设置虚拟主机服务名称。可用正则，如果同时匹配多个，则选最精确的</td></tr></tbody></table><p>location块</p><ol><li><p>location [  &#x3D;  |~  |<del>*   |^</del>   |@ ] uri{…}</p><p>设置请求的URI，&#x3D;精确匹配，<del>正则，</del>*正则不区分大小写，^~用于不包含正则表达式的uri前(和不加符号功能一致，但如果模式匹配，就停止搜索其他模式)</p></li><li><p>root &#x2F; alias path</p><p>root的处理结果是: root路径+location路径<br>alias的处理结果是:使用alias路径替换location路径<br>alias是一个目录别名的定义，root则是最上层目录的含义。<br>如果location路径是以&#x2F;结尾,则alias也必须是以&#x2F;结尾，root没有要求</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 浏览器<span class="hljs-string">&#x27;/images/1.png&#x27;</span> 匹配到 <span class="hljs-string">&#x27;/usr/local/nginx/html/images/1.png&#x27;</span><br>location /images &#123;<br>root <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html;<br>&#125;<br><br># 浏览器<span class="hljs-string">&#x27;/images/1.png&#x27;</span> 匹配到 <span class="hljs-string">&#x27;/usr/local/nginx/html/1.png&#x27;</span><br>location /images &#123;<br>alias <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>html;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>index path</p><p>设置网站的默认首页</p></li><li><p>error_page code … [&#x3D;[response]] uri</p><p>设置网站的错误页面</p><p>后面可以跟具体地址、重定向地址</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">server</span> &#123;<br>error_page <span class="hljs-number">404</span> http<span class="hljs-operator">:</span><span class="hljs-comment">//www.baidu.com;</span><br>&#125;<br><br><span class="hljs-keyword">server</span>&#123;<br>error_page <span class="hljs-number">404</span> <span class="hljs-operator">/</span><span class="hljs-number">50</span>x.html;<br>error_page <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> <span class="hljs-operator">/</span><span class="hljs-number">50</span>x.html;<br>location <span class="hljs-operator">=/</span><span class="hljs-number">50</span>x.<span class="hljs-keyword">html</span>&#123;<br>root html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以用来修改状态码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 返回的状态码为200</span><br>server&#123;<br>error_page <span class="hljs-number">404</span> =<span class="hljs-number">200</span> /<span class="hljs-number">50</span>x.html;<br><span class="hljs-keyword">location</span> <span class="hljs-title">=/50x</span>.html&#123;<br>root html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="静态资源优化配置语法"><a href="#静态资源优化配置语法" class="headerlink" title="静态资源优化配置语法"></a>静态资源优化配置语法</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 开启高效的文件传输模式，类似</span><br><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><span class="hljs-comment"># 必须在sendfile打开的状态下才会生效，主要是用来提升网络包的传输效率，缓存满了才发送</span><br><span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br><span class="hljs-comment"># 该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的&#x27;实时性&#x27;</span><br><span class="hljs-attribute">tcp_nodeplay</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 开启压缩功能</span><br><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br><span class="hljs-comment"># 配置需要压缩的文件类型，如application/javascript text/html</span><br><span class="hljs-attribute">gzip_types</span> MIME类型;<br><br><span class="hljs-comment"># 设置Gzip压缩程度，1最低</span><br><span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">1</span>-<span class="hljs-number">9</span>;<br><span class="hljs-comment"># 是否携带“Vary:Accept-Encoding”头域的响应头部，用来告诉接收方使用了压缩处理</span><br><span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>|<span class="hljs-literal">off</span>;<br><span class="hljs-comment"># 通过正则匹配User-Agent头里的信息来，选择性地关闭Gzip功能</span><br><span class="hljs-attribute">gzip_disable</span> regex;<br><span class="hljs-comment"># 设置当文件大小大于length时才压缩</span><br><span class="hljs-attribute">gzip_min_length</span> length;<br></code></pre></td></tr></table></figure><h5 id="添加模块步骤"><a href="#添加模块步骤" class="headerlink" title="添加模块步骤"></a>添加模块步骤</h5><p>以添加<code>http_gzip_static_module</code>为例</p><ol><li><p>查询当前Nginx的配置参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -V</span><br></code></pre></td></tr></table></figure></li><li><p>将nginx安装目录下sbin目录中的nginx二进制文件进行更名（保存旧的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> nginx nginxold<br></code></pre></td></tr></table></figure></li><li><p>进入Nginx的安装目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/root/</span>nginx<span class="hljs-regexp">/core/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>执行make clean清空之前编译的内容</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make clean</span><br></code></pre></td></tr></table></figure></li><li><p>使用configure来配置参数</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--with-http_gzip_static_module</span> 后面把第一步查到的配置参数加上<br></code></pre></td></tr></table></figure></li><li><p>使用make命令进行编译</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure></li><li><p>将objs目录下的nginx二进制执行文件移动到nginx安装目录下的sbin目录中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv objs<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx/sbin<br></code></pre></td></tr></table></figure></li><li><p>执行更新命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make upgrade</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 开启gzip_static</span><br><span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">on</span>;<br><span class="hljs-comment"># reload重新加载配置文件，之后如果存在gz压缩好的文件，就会直接返回压缩好的</span><br><span class="hljs-comment"># gzip压缩文件指令：gzip 文件路径</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="缓存相关指令"><a href="#缓存相关指令" class="headerlink" title="缓存相关指令"></a>缓存相关指令</h5><ol><li>指定缓存时间，填off不缓存</li></ol>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">expires <span class="hljs-selector-attr">[modified]</span> <span class="hljs-selector-tag">time</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>添加响应头</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">add_header <span class="hljs-keyword">name</span> value<br></code></pre></td></tr></table></figure><p>Cache-Control作为响应头信息，可以设置如下值</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>must-revalidate</td><td>可缓存但必须再向源服务器进行确认</td></tr><tr><td>no-cache</td><td>缓存前必须确认其有效性</td></tr><tr><td>no-store</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>no-transform</td><td>代理不可更改媒体类型</td></tr><tr><td>public</td><td>可向任意方提供响应的缓存</td></tr><tr><td>private</td><td>仅向特定用户返回响应</td></tr><tr><td>proxy-revalidate</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age&#x3D;&lt;秒&gt;</td><td>响应最大Age值</td></tr><tr><td>s-maxage&#x3D;&lt;秒&gt;</td><td>公共缓存服务器响应的最大Age值</td></tr></tbody></table></li></ol><h4 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h4><p>同源:  协议、域名(IP)、端口相同即为同源</p><p>如果从服务器A的页面发送异步请求到服务器B获取数据，如果服务器A和服务器B不满足同源策略，则就会出现跨域问题。</p><p><strong>解决方式</strong></p><p>添加Access-Control-Allow-Origin来设置允许跨域访问的源地址信息</p><p>添加Access-Control-Allow-Methods来设置允许跨域访问的请求方式</p><p>例如</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/getUser</span>&#123;<br><span class="hljs-comment"># *表所有地址都可以</span><br>    add_header Access-Control-Allow-Origin *;<br>    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE;<br>    default_type application/json;<br>    return <span class="hljs-number">200</span> &#x27;&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;TOM&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>&#125;&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h4><p>盗链：将别人网页的内容放到自己的页面上</p><p><strong>防盗链原理</strong></p><p>通过判断HTTP的头信息Referer来判断获取资源的请求来源，只对允许的来源开放链接</p><p><strong>防盗链步骤</strong></p><p>例子</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /images &#123;<br>           <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> www.baidu.com <span class="hljs-number">192.168.200.222</span> <span class="hljs-regexp">*.example.com</span> <span class="hljs-regexp">example.*</span>  www.example.org  ~\.google\.;<br>           <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>)&#123;<br>                <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>           &#125;<br>           <span class="hljs-attribute">root</span> /usr/local/nginx/html;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Rewrite功能配置"><a href="#Rewrite功能配置" class="headerlink" title="Rewrite功能配置"></a>Rewrite功能配置</h4><p>主要的作用是用来实现URL的重写</p><p>可以用来做域名跳转、域名镜像、给每个模块设置独立域名、合并目录</p><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><ol><li><p>set</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-variable">$variable</span> value<br><br>例<br><span class="hljs-built_in"> server </span>&#123;<br>        listen 8081;<br>        server_name localhost;<br>        location <span class="hljs-built_in">/server </span>&#123;<br>                <span class="hljs-built_in">set</span> <span class="hljs-variable">$name</span> Tom;<br>                <span class="hljs-built_in">set</span> <span class="hljs-variable">$age</span> 18;<br>                default_type text/plain;<br>                return 200 <span class="hljs-variable">$name</span>=<span class="hljs-variable">$age</span>;<br>        &#125;<br>    &#125;<br>nginx有预设的全局变量<br>例：用全局变量记录日志<br>log_format main <span class="hljs-string">&#x27;$remote_addr - $request - $status - $request_uri - $http_user_agent&#x27;</span>;<br><br>   <span class="hljs-built_in"> server </span>&#123;<br>        listen 8081;<br>        server_name localhost;<br>        location <span class="hljs-built_in">/server </span>&#123;<br>                access_log logs/access.log main;<br>                <span class="hljs-built_in">set</span> <span class="hljs-variable">$name</span> Tom;<br>                <span class="hljs-built_in">set</span> <span class="hljs-variable">$age</span> 18;<br>                default_type text/plain;<br>                return 200 <span class="hljs-variable">$name</span>=<span class="hljs-variable">$age</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>if</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">if</span>  (condition)<span class="hljs-meta">&#123;...&#125;</span><br><br><span class="hljs-number">1</span>. 如果变量名对应的值为空或者是<span class="hljs-number">0</span>，<span class="hljs-keyword">if</span>都判断为<span class="hljs-literal">false</span>,其他条件为<span class="hljs-literal">true</span>。<br><span class="hljs-number">2</span>. 使用<span class="hljs-string">&quot;=&quot;</span>和<span class="hljs-string">&quot;!=&quot;</span>比较变量和字符串是否相等，满足条件为<span class="hljs-literal">true</span>，不满足为<span class="hljs-literal">false</span><br>例<br><span class="hljs-keyword">if</span> ($request_method = <span class="hljs-type">POST</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">405</span>;<br>&#125;<br><span class="hljs-number">3</span>. 使用正则表达式对变量进行匹配，匹配成功返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。变量与正则表达式之间使用<span class="hljs-string">&quot;~&quot;</span>,<span class="hljs-string">&quot;~*&quot;</span>,<span class="hljs-string">&quot;!~&quot;</span>,<span class="hljs-string">&quot;!~\*&quot;</span>来连接。<br><span class="hljs-number">4</span>. 判断请求的文件是否存在使用<span class="hljs-string">&quot;-f&quot;</span>和<span class="hljs-string">&quot;!-f&quot;</span>, 判断请求的目录是否存在使用<span class="hljs-string">&quot;-d&quot;</span>和<span class="hljs-string">&quot;!-d&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>break</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">该指令用于中断当前相同作用域中的其他Nginx配置<br>会去找与访问路径对应目录下的<span class="hljs-keyword">index</span>.html文件<br></code></pre></td></tr></table></figure></li><li><p>return</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> code [text];<br><span class="hljs-keyword">return</span> code URL;<br><span class="hljs-keyword">return</span> URL;<br></code></pre></td></tr></table></figure></li><li><p>rewrite</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ldif">rewrite regex replacement<br><span class="hljs-attribute">replacement</span>:匹配成功后，用于替换URI中被截取内容的字符串<br><span class="hljs-attribute">flag</span>:用来设置rewrite对URI的处理行为，可选值有如下：<br><span class="hljs-literal">-</span> last:替换完后重新匹配<br><span class="hljs-literal">-</span> break: 替换完后去找与访问路径对应目录下的index.html文件<br><span class="hljs-literal">-</span> redirect：永久重定向<br><span class="hljs-literal">-</span> permanent：临时重定向<br></code></pre></td></tr></table></figure></li><li><p>rewrite_log</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rewrite_log</span> <span class="hljs-literal">on</span>\|<span class="hljs-literal">off</span><br>配置是否开启URL重写日志的输出功能<br>rewrite_log的日志输出级别为<span class="hljs-literal">notice</span><br>所以需要设置日志输出级别为<span class="hljs-literal">notice</span>才能看到日志<br>error_log logs/<span class="hljs-literal">error</span>.log <span class="hljs-literal">notice</span>;<br></code></pre></td></tr></table></figure></li></ol><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><ol><li><p>proxy_pass</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxy_pass URL<br>设置被代理服务器地址，可以是主机名称、IP地址加端口号形式<br><br>例<br>server&#123;<br>listen <span class="hljs-number">80</span>;<br>server_name localhost;<br>location /server&#123;<br><span class="hljs-comment">#proxy_pass http://192.168.200.146;</span><br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>/;<br>&#125;<br>&#125;<br>url后面加<span class="hljs-regexp">/则最终找的是url/i</span>ndex.html，不加则为url<span class="hljs-regexp">/server/i</span>ndex.html<br></code></pre></td></tr></table></figure></li><li><p>proxy_set_header</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> field value<br>更改Nginx服务器接收到的客户端请求的请求头信息<br><br>例<br>server &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8080</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-attribute">default_type</span> text/plain;<br><span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-variable">$http_username</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">8081</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><span class="hljs-section">location</span> /server &#123;<br><span class="hljs-attribute">proxy_pass</span> http://47.96.80.163:8080;<br><span class="hljs-attribute">proxy_set_header</span> username Cat;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>proxy_redirect</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxy_redirect redirect replacement;<br>redirect:目标,Location的值<br>replacement:要替换的值<br>重置头信息中的<span class="hljs-string">&quot;Location&quot;</span>和<span class="hljs-string">&quot;Refresh&quot;</span>的值<br><br>例<br>服务端[<span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>]<br>server &#123;<br>    listen  <span class="hljs-number">8081</span>;<br>    server_name localhost;<br>    <span class="hljs-keyword">if</span> (!-f <span class="hljs-variable">$request_filename</span>)&#123;<br>    return <span class="hljs-number">302</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>;<br>    &#125;<br>&#125;<br>代理服务端[<span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>]<br>server &#123;<br>listen  <span class="hljs-number">8081</span>;<br>server_name localhost;<br>location / &#123;<br>proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span>:<span class="hljs-number">8081</span>/;<br>proxy_redirect http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.146</span> http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.133</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>具体案例</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">案例：将不同请求代理到不同服务器<br><br>代理服务器<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">8082</span>;<br>        server_name     localhost;<br>        <span class="hljs-keyword">location</span> /server1 &#123;<br>                proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.146</span>:<span class="hljs-number">9001</span>/;<br>        &#125;<br>        <span class="hljs-keyword">location</span> /server2 &#123;<br>                proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.146</span>:<span class="hljs-number">9002</span>/;<br>        &#125;<br>        <span class="hljs-keyword">location</span> /server3 &#123;<br>                proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.146</span>:<span class="hljs-number">9003</span>/;<br>        &#125;<br>&#125;<br><br>服务端<br>server1<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">9001</span>;<br>        server_name     localhost;<br>        default_type <span class="hljs-type">text</span>/html;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;192.168.200.146:9001&lt;/h1&gt;&#x27;</span><br>&#125;<br>server2<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">9002</span>;<br>        server_name     localhost;<br>        default_type <span class="hljs-type">text</span>/html;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;192.168.200.146:9002&lt;/h1&gt;&#x27;</span><br>&#125;<br>server3<br><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span>          <span class="hljs-number">9003</span>;<br>        server_name     localhost;<br>        default_type <span class="hljs-type">text</span>/html;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;192.168.200.146:9003&lt;/h1&gt;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="第七层负载均衡"><a href="#第七层负载均衡" class="headerlink" title="第七层负载均衡"></a>第七层负载均衡</h4><h5 id="负载均衡作用"><a href="#负载均衡作用" class="headerlink" title="负载均衡作用"></a>负载均衡作用</h5><ol><li>解决服务器的高并发压力，提高应用程序的处理性能。</li><li>提供故障转移，实现高可用。</li><li>通过添加或减少服务器数量，增强网站的可扩展性。</li><li>在负载均衡器上进行过滤，可以提高系统的安全性。</li></ol><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>被代理服务器：47.96.80.163:9001、47.96.80.163:9002、47.96.80.163:9003</p><p>负载均衡器：47.96.80.163:8081</p><p>默认方式为轮询</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">9001</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-attribute">default_type</span> text/html;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;9001&lt;/h1&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">9002</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-attribute">default_type</span> text/html;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;9002&lt;/h1&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">9003</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-attribute">default_type</span> text/html;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">200</span> <span class="hljs-string">&#x27;&lt;h1&gt;9003&lt;/h1&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-section">upstream</span> backend &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">47.96.80.163:9001</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">47.96.80.163:9002</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">47.96.80.163:9003</span>;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">8081</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://backend;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="负载均衡状态"><a href="#负载均衡状态" class="headerlink" title="负载均衡状态"></a>负载均衡状态</h5><table><thead><tr><th>状态</th><th>概述</th></tr></thead><tbody><tr><td>down</td><td>当前的server暂时不参与负载均衡</td></tr><tr><td>backup</td><td>预留的备份服务器，其他主服务器挂了才会被用到</td></tr><tr><td>max_fails</td><td>允许请求失败的次数</td></tr><tr><td>fail_timeout</td><td>经过max_fails次失败后, 服务暂停的时间</td></tr><tr><td>max_conns</td><td>限制最大的接收连接数</td></tr></tbody></table><p><strong>设置方式示例</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">47.96.80.163:9001</span> down;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">47.96.80.163:9002</span> backup;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">47.96.80.163:9003</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">15</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h5><table><thead><tr><th>算法名称</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>依据ip分配方式</td></tr><tr><td>least_conn</td><td>依据最少连接方式</td></tr><tr><td>url_hash</td><td>依据URL分配方式</td></tr><tr><td>fair</td><td>依据响应时间方式</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs roboconf"><span class="hljs-comment"># 1.配置权重，权重越大被分配的概率越大，默认为1</span><br>upstream backend &#123;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9001 weight=2;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9002;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9003;<br>&#125;<br><br><span class="hljs-comment"># 2.配置ip_hash，同一个ip只会被分配到同一台服务器上</span><br>upstream backend &#123;<br><span class="hljs-attribute">ip_hash;</span><br><span class="hljs-attribute">    server 47.96.80.163</span>:9001;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9002;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9003;<br>&#125;<br><br><span class="hljs-comment"># 3.配置least_conn，会把请求转发给连接数较少的服务器上</span><br><span class="hljs-comment"># 适合请求处理时间长短不一造成服务器过载的情况</span><br>upstream backend &#123;<br><span class="hljs-attribute">least_conn;</span><br><span class="hljs-attribute">    server 47.96.80.163</span>:9001;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9002;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9003;<br>&#125;<br><br><span class="hljs-comment"># 4.配置url_hash，根据访问url的hash结果来分配请求</span><br>upstream backend &#123;<br><span class="hljs-attribute">hash $request_uri;</span><br><span class="hljs-attribute">    server 47.96.80.163</span>:9001;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9002;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9003;<br>&#125;<br><br><span class="hljs-comment"># 5.配置fair，智能的进行负载均衡</span><br><span class="hljs-comment"># 需要安装第三方模块</span><br>(1)下载 https://github.com/gnosek/nginx-upstream-fair，解压到linux，重命名为fair<br>(2)sbin/nginx -V 查看之前的参数信息，并备份原nginx文件<br>(3)到nginx源文件目录，./configure --add-module=fair所在路径 + 之前的参数信息<br>(4)修改src/http/ngx_http_upstream.h文件，找到ngx_http_upstream_srv_conf_s，<br>添加in_port_t   default_port<br>(5)make<br>(6)将objs下的nginx复制到nginx文件夹下的sbin目录<br>(7)make upgrade<br>(8)测试<br>upstream backend &#123;<br><span class="hljs-attribute">fair;</span><br><span class="hljs-attribute">    server 47.96.80.163</span>:9001;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9002;<br>    <span class="hljs-attribute">server 47.96.80.163</span>:9003;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第四层负载均衡"><a href="#第四层负载均衡" class="headerlink" title="第四层负载均衡"></a>第四层负载均衡</h4><p>需要安装stream模块，在配置参数的时候加上<code>--with-stream</code></p><p><strong>示例</strong></p><p>stream和http块是平级的</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">stream</span> &#123;<br>        <span class="hljs-section">upstream</span> redisbackend &#123;<br>                <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.146:6379</span>;<br>                <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.146:6378</span>;<br>        &#125;<br>        <span class="hljs-section">upstream</span> tomcatbackend &#123;<br>        <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.200.146:8080</span>;<br>        &#125;<br>        <span class="hljs-section">server</span> &#123;<br>                <span class="hljs-attribute">listen</span>  <span class="hljs-number">81</span>;<br>                <span class="hljs-attribute">proxy_pass</span> redisbackend;<br>        &#125;<br>        <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span><span class="hljs-number">82</span>;<br>        <span class="hljs-attribute">proxy_pass</span> tomcatbackend;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="集成缓存"><a href="#集成缓存" class="headerlink" title="集成缓存"></a>集成缓存</h4><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">Module ngx_http_proxy_module (nginx.org)</a></p><h5 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h5><p>例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># proxy_cache_path：缓存存放路径；</span><br><span class="hljs-comment"># levels：缓存文件层级，如2:1表示请求url经过MD5加密后取最后两个字符和倒数第三个字符来组成存放文件夹，如/ab/c；</span><br><span class="hljs-comment"># keys_zone：为缓存区设置名称和大小；</span><br><span class="hljs-comment"># inactive：缓存存活时间，超过存活时间没有被访问就会被删除；max_size：设置最大缓存空间</span><br><span class="hljs-comment"># proxy_cache：开启缓存</span><br><span class="hljs-comment"># proxy_cache_key：根据key值MD5哈希存缓存，默认$scheme$proxy_host$request_uri</span><br><span class="hljs-comment"># proxy_cache_valid：对不同返回状态码的URL设置不同的缓存时间，如404 1d、any 30s</span><br>proxy_cache_path /home/nginx/proxy_cache <span class="hljs-attribute">levels</span>=2:1 <span class="hljs-attribute">keys_zone</span>=cache:200m<br><span class="hljs-attribute">inactive</span>=1d <span class="hljs-attribute">max_size</span>=20g;<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>&#123;<br>proxy_cache 缓存区名称;<br>proxy_cache_key web缓存的key值;<br>proxy_cache_vaild code time;<br>add_header nginx-cache <span class="hljs-string">&quot;<span class="hljs-variable">$upstream_cache_status</span>&quot;</span>;# 添加头信息来查看是否使用了缓存<br>proxy_cache_min_uses number;# 访问number次后才会缓存<br><span class="hljs-built_in">..</span>.<br>&#125;<br>    <br></code></pre></td></tr></table></figure><h5 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h5><p><strong>方式1</strong>：删除对应的缓存目录（删除所有缓存）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf 目录<br></code></pre></td></tr></table></figure><p><strong>方式2</strong>：ngx_cache_purge（删除指定缓存块的缓存）</p><p><a href="https://github.com/FRiCKLE/ngx_cache_purge/tags">github地址</a></p><p>安装ngx_cache_purge第三方模块</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 配置</span><br><span class="hljs-comment"># 之后浏览器访问对应路径就能删除缓存</span><br>server&#123;<br><span class="hljs-keyword">location</span> <span class="hljs-title">~/purge</span>(/.*) &#123;<br>proxy_cache_purge 缓存块名称 缓存的key;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="设置不缓存的资源"><a href="#设置不缓存的资源" class="headerlink" title="设置不缓存的资源"></a>设置不缓存的资源</h5><p>例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">server&#123;<br>listen8080;<br>server_name localhost;<br>location / &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_uri</span> ~ /.*\.js$)&#123;<br>           <span class="hljs-built_in">set</span> <span class="hljs-variable">$nocache</span> 1;<br>        &#125;<br>proxy_no_cache <span class="hljs-variable">$nocache</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br>        proxy_cache_bypass <span class="hljs-variable">$nocache</span> <span class="hljs-variable">$cookie_nocache</span> <span class="hljs-variable">$arg_nocache</span> <span class="hljs-variable">$arg_comment</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h4><p>Nginx使用SSL(Secure Sockets Layer)，需要安装<code>--with-http_ssl_module</code>模块</p><h5 id="相关指令-1"><a href="#相关指令-1" class="headerlink" title="相关指令"></a>相关指令</h5><p><a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html">Module ngx_http_ssl_module (nginx.org)</a></p><h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><p>使用<strong>Keepalived</strong>来解决，Keepalived 软件由 C 编写的，最初是专为 LVS 负载均衡软件设计的，Keepalived 软件主要是通过 VRRP 协议实现高可用功能。</p><p><strong>VRRP（Virtual Route Redundancy Protocol）</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">虚拟路由冗余协议，VRRP可以把一个虚拟路由器的责任动态分配到局域网上的 VRRP 路由器中的一台。其中的虚拟路由即Virtual路由是由VRRP路由群组创建的一个不真实存在的路由，这个虚拟路由也是有对应的IP地址。而且VRRP路由<span class="hljs-number">1</span>和VRRP路由<span class="hljs-number">2</span>之间会有竞争选择，通过选择会产生一个<span class="hljs-literal">Master</span>路由和一个Backup路由。<br><span class="hljs-literal">Master</span>路由和Backup路由之间会有一个心跳检测，<span class="hljs-literal">Master</span>会定时告知Backup自己的状态，如果在指定的时间内，Backup没有接收到这个通知内容，Backup就会替代<span class="hljs-literal">Master</span>成为新的<span class="hljs-literal">Master</span>。<span class="hljs-literal">Master</span>路由有一个特权就是虚拟路由和后端服务器都是通过<span class="hljs-literal">Master</span>进行数据传递交互的，而备份节点则会直接丢弃这些请求和数据，不做处理，只是去监听<span class="hljs-literal">Master</span>的状态<br></code></pre></td></tr></table></figure><h5 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h5><ol><li><p>官网下载<a href="https://keepalived.org/%EF%BC%8C%E4%B8%8A%E4%BC%A0%E5%88%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">https://keepalived.org/，上传到linux服务器上</a></p></li><li><p>创建keepalived目录，将压缩包解压到目录</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">tar</span> <span class="hljs-operator">-</span><span class="hljs-variable">zxf</span> 压缩包名 <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-variable">keepalived</span><span class="hljs-operator">/</span><br></code></pre></td></tr></table></figure></li><li><p>编译、安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> keepalived/keepalived-2.0.20<br><br><span class="hljs-comment"># sysconf：配置文件所在目录</span><br><span class="hljs-comment"># prefix：keepalived要安装的目录</span><br>./configure --sysconf=/etc --prefix=/usr/local<br><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure></li></ol><h5 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h5><p>配置文件在<code>/安装目录/keepalived/keepalived.conf</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">global</span>全局部分：<br>global_defs &#123;<br>   <span class="hljs-meta">#通知邮件，当keepalived发送切换时需要发email给具体的邮箱地址</span><br>   notification_email &#123;<br>     tom<span class="hljs-symbol">@itcast</span>.cn<br>     jerry<span class="hljs-symbol">@itcast</span>.cn<br>   &#125;<br>   <span class="hljs-meta">#设置发件人的邮箱信息</span><br>   notification_email_from zhaomin<span class="hljs-symbol">@itcast</span>.cn<br>   <span class="hljs-meta">#指定smpt服务地址</span><br>   smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.1</span><br>   <span class="hljs-meta">#指定smpt服务连接超时时间</span><br>   smtp_connect_timeout <span class="hljs-number">30</span><br>   <span class="hljs-meta">#运行keepalived服务器的一个标识，可以用作发送邮件的主题信息</span><br>   router_id LVS_DEVEL<br>   <br>   <span class="hljs-meta">#默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查)</span><br>   vrrp_skip_check_adv_addr<br>   <span class="hljs-meta">#严格遵守VRRP协议。</span><br>   vrrp_strict<br>   <span class="hljs-meta">#在一个接口发送的两个免费ARP之间的延迟。可以精确到毫秒级。默认是0</span><br>   vrrp_garp_interval <span class="hljs-number">0</span><br>   <span class="hljs-meta">#在一个网卡上每组na消息之间的延迟时间，默认为0</span><br>   vrrp_gna_interval <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pf">VRRP部分，该部分可以包含以下四个子模块<br><span class="hljs-number">1</span>. vrrp_script<br><span class="hljs-number">2</span>. vrrp_sync_group<br><span class="hljs-number">3</span>. garp_group<br><span class="hljs-number">4</span>. vrrp_instance<br>我们会用到第一个和第四个，<br><span class="hljs-comment">#设置keepalived实例的相关信息，VI_1为VRRP实例名称</span><br>vrrp_instance VI_1 &#123;<br>    <span class="hljs-keyword">state</span> MASTER  <span class="hljs-comment">#有两个值可选MASTER主 BACKUP备</span><br>    interface ens33<span class="hljs-comment">#vrrp实例绑定的接口，用于发送VRRP包[当前服务器使用的网卡名称]</span><br>    virtual_router_id <span class="hljs-number">51</span><span class="hljs-comment">#指定VRRP实例ID，范围是0-255</span><br>    priority <span class="hljs-number">100</span><span class="hljs-comment">#指定优先级，优先级高的将成为MASTER</span><br>    advert_int <span class="hljs-number">1</span><span class="hljs-comment">#指定发送VRRP通告的间隔，单位是秒</span><br>    authentication &#123;<span class="hljs-comment">#vrrp之间通信的认证信息</span><br>        auth_type PASS<span class="hljs-comment">#指定认证方式。PASS简单密码认证(推荐)</span><br>        auth_pass <span class="hljs-number">1111</span><span class="hljs-comment">#指定认证使用的密码，最多8位</span><br>    &#125;<br>    virtual_ipaddress &#123; <span class="hljs-comment">#虚拟IP地址设置虚拟IP地址，供用户访问使用，可设置多个，一行一个</span><br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">200.222</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="启动keepalived"><a href="#启动keepalived" class="headerlink" title="启动keepalived"></a>启动keepalived</h5><ol><li><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /安装目录/local/sbin<br>./keepalived<br></code></pre></td></tr></table></figure></li><li><p><code>ip a</code>查看ip，虚拟IP(VIP)会在MASTER节点上，当MASTER节点上的<strong>keepalived</strong>出问题以后，因为BACKUP无法收到MASTER发出的VRRP状态通过信息，就会直接升为MASTER。VIP也会”漂移”到新的MASTER。</p></li><li><p>可以通过编写脚本来检测当nginx进程挂了的时候关闭keepalived，从而自动切换master到另一台nginx上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编写脚本ck_nginx.sh，该脚本的意思是检查nginx进程是否在运行，</span><br><span class="hljs-comment"># 如果检测不到nginx进程，则关闭keepalived</span><br><br><span class="hljs-comment">#!/bin/bash</span><br>num=`ps -C nginx --no-header | <span class="hljs-built_in">wc</span> -l`<br><span class="hljs-keyword">if</span> [ `ps -C nginx --no-header | <span class="hljs-built_in">wc</span> -l` -eq 0 ]; <span class="hljs-keyword">then</span><br>killall keepalived<br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-comment"># 给脚本设置权限</span><br><span class="hljs-built_in">chmod</span> 755 ck_nginx.sh<br><br><br><span class="hljs-comment"># 在keepalived配置文件中添加对应的配置像</span><br>vrrp_script 脚本名称<br>&#123;<br>    script <span class="hljs-string">&quot;脚本位置&quot;</span><br>    interval 3 <span class="hljs-comment">#执行时间间隔</span><br>    weight -20 <span class="hljs-comment">#动态调整vrrp_instance的优先级</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="制作下载站点"><a href="#制作下载站点" class="headerlink" title="制作下载站点"></a>制作下载站点</h4><ol><li><p>将要被下载的资源放到一个目录下</p></li><li><p>修改nginx配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /download&#123;<br><span class="hljs-comment"># 被下载资源路径</span><br>    <span class="hljs-attribute">root</span> /usr/local;<br>    <span class="hljs-comment"># 开启功能</span><br>    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># 是否展示文件大小</span><br>    <span class="hljs-attribute">autoindex_exact_size</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment"># 目录列表的格式，可以是html/xml/json/jsonp，默认html</span><br>    <span class="hljs-attribute">autoindex_format</span> html;<br>    <span class="hljs-comment"># 是否在目录列表上显示时间</span><br>    <span class="hljs-attribute">autoindex_localtime</span> <span class="hljs-literal">on</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h4><p>Lua是用标准C语言编写并以源代码形式开发。设计的目的是为了嵌入到其他应用程序中，从而为应用程序提供灵活的扩展和定制功能。应用在游戏开发、独立应用脚本、web应用脚本、扩展和数据库插件、系统安全上。</p><p><a href="https://www.lua.org/">官网</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol><li><p>下载压缩包到服务器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>www.lua.org<span class="hljs-regexp">/ftp/</span>lua-<span class="hljs-number">5.4</span>.<span class="hljs-number">4</span>.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>检查环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make linux <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">make <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lua -v</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h5><p><strong>1.交互式</strong></p><p>通过命令<code>lua</code>进入控制台</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># lua</span><br>&gt; <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>2.脚本式</strong></p><p>创建hello.lua文件，编写脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vim hello.lua</span><br><br><span class="hljs-comment"># 编写脚本</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><br><span class="hljs-comment"># 执行</span><br><span class="hljs-built_in">chmod</span> 755 hello.lua<br>lua hello.lua<br><br><span class="hljs-comment"># 也可以在文件开头指定解释器，执行的时候直接用文件名就行了</span><br><span class="hljs-comment">#!/usr/local/bin/lua</span><br></code></pre></td></tr></table></figure><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><p><strong>单行注释</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- 注释</span><br></code></pre></td></tr></table></figure><p><strong>多行注释</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--]]</span><br></code></pre></td></tr></table></figure><blockquote><p>多行注释只需要在前面多加一个-就可以取消</p></blockquote><h6 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h6><p><strong>逻辑运算符</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">and</span> --&gt;</span> 与<br><span class="hljs-function"><span class="hljs-title">or</span> --&gt;</span> 或<br><span class="hljs-function"><span class="hljs-title">not</span> --&gt;</span> 非<br></code></pre></td></tr></table></figure><p>其他运算符</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">..</span> 连接字符串<br><span class="hljs-comment"># 返回字符串或表的长度</span><br></code></pre></td></tr></table></figure><h6 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h6><p>默认为全局变量，定义局部变量要在前面加<code>local</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>local b <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h6 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">nil</span><span class="hljs-params">(空，无效值)</span></span><br><span class="hljs-function"><span class="hljs-title">boolean</span><span class="hljs-params">(布尔，true/false)</span></span><br><span class="hljs-function"><span class="hljs-title">number</span><span class="hljs-params">(数值)</span></span>：只有false和nil为假<br><span class="hljs-function"><span class="hljs-title">string</span><span class="hljs-params">(字符串)</span></span><br><span class="hljs-function"><span class="hljs-title">function</span><span class="hljs-params">(函数)</span></span><br>table（表）<br><span class="hljs-function"><span class="hljs-title">thread</span><span class="hljs-params">(线程)</span></span><br>userdata（用户数据）<br></code></pre></td></tr></table></figure><p><strong>表</strong></p><p>可以用来表示数组、字典或混合使用，下标从1开始</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 定义一个表</span><br><span class="hljs-attribute">arr</span> = &#123;&#125;<br><span class="hljs-attribute">arr</span> = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br><span class="hljs-attribute">arr</span> = &#123;X = <span class="hljs-number">10</span>, Y = <span class="hljs-number">20</span>, Z = <span class="hljs-number">30</span>&#125;<br><span class="hljs-attribute">arr</span> = &#123;<span class="hljs-string">&quot;a&quot;</span>, X = <span class="hljs-number">10</span>, <span class="hljs-string">&quot;b&quot;</span>&#125;<br><br><span class="hljs-comment"># 获取表里的值</span><br><span class="hljs-attribute">arr</span> = &#123;<span class="hljs-string">&quot;a&quot;</span>, X = <span class="hljs-number">10</span>, <span class="hljs-string">&quot;b&quot;</span>&#125;<br><span class="hljs-attribute">arr</span>[<span class="hljs-number">0</span>]-- nil<br><span class="hljs-attribute">arr</span>[<span class="hljs-number">1</span>] -- <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-attribute">arr</span>[<span class="hljs-number">2</span>]-- <span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-attribute">arr</span>[<span class="hljs-string">&quot;X&quot;</span>]-- <span class="hljs-number">10</span><br><span class="hljs-attribute">arr</span>.X-- <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"># 定义函数<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">(params)</span></span><br><span class="hljs-comment">-- 方法的内容</span><br><span class="hljs-keyword">end</span><br><br># 方法定义的参数并非都要传入，传入的会按顺序赋值，没赋值的参数为<span class="hljs-literal">nil</span>；如果传入的参数数量大于方法需要的参数数量，则会丢弃多出来的参数<br><br># 可变长参数<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">(...)</span></span><br>a, b, c = ...;<br><span class="hljs-built_in">print</span>(a, b, c);<br><span class="hljs-keyword">end</span><br><br># 方法返回值数量也是可变的<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h6 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h6><p>if</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 代码</span><br><span class="hljs-keyword">elseif</span> 条件 <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 代码</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-comment">-- 代码</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h6 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h6><p>while</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">while</span> 条件 <span class="hljs-keyword">do</span><br><span class="hljs-comment">-- 代码</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>repeat</p><p>直到满足条件才退出循环</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">repeat</span><br><span class="hljs-comment">-- 代码</span><br><span class="hljs-keyword">until</span> 条件<br></code></pre></td></tr></table></figure><p>for</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">-- 循环从start开始到end结束；step为步长，默认为1</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">param</span>=<span class="hljs-built_in">start</span>,<span class="hljs-keyword">end</span>,step <span class="hljs-built_in">do</span><br> 循环体<br><span class="hljs-function"><span class="hljs-keyword">end</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">-- 遍历表</span><br><span class="hljs-comment">-- ipairs为迭代器，x为表</span><br><span class="hljs-comment">-- ipairs不能遍历出键值对，要遍历键值对要用pairs</span><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> ipairs(x) <span class="hljs-built_in">do</span><br>循环体<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h5 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h5><p>OpenResty是一个基于Nginx与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。OpenResty内部已经集成了Nginx和Lua。</p><h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><ol><li><p>下载、解压压缩包<a href="https://openresty.org/en/download.html">OpenResty - Download</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>openresty.org<span class="hljs-regexp">/download/</span>openresty-<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span>.tar.gz<br>tar -zxvf openresty-<span class="hljs-number">1.15</span>.<span class="hljs-number">8.2</span>.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>进入openresty目录，编译安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">./configure<br><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure></li><li><p>默认安装位置<code>/usr/local/openresty/nginx/</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openresty/</span>nginx/<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 修改配置</span><br>location /lua&#123;<br>    default_type <span class="hljs-string">&#x27;text/html&#x27;</span>;<br>    content_by_lua <span class="hljs-string">&#x27;ngx.say(&quot;&lt;h1&gt;HELLO,OpenRestry&lt;/h1&gt;&quot;)&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment"># 测试</span><br>.<span class="hljs-regexp">/sbin/</span>nginx -t<br><span class="hljs-comment"># 启动</span><br>.<span class="hljs-regexp">/sbin/</span>nginx<br><br><span class="hljs-comment"># 浏览器访问</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="使用ngx-lua指令"><a href="#使用ngx-lua指令" class="headerlink" title="使用ngx_lua指令"></a>使用ngx_lua指令</h6><p><strong>init_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令在每次Nginx重新加载配置时执行，可以用来完成一些耗时模块的加载，或者初始化一些全局配置。<br></code></pre></td></tr></table></figure><p><strong>init_worker_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令用于启动一些定时任务，如心跳检查、定时拉取服务器配置等。<br></code></pre></td></tr></table></figure><p><strong>set_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令只要用来做变量赋值，这个指令一次只能返回一个值，并将结果赋值给Nginx中指定的变量。<br></code></pre></td></tr></table></figure><p><strong>rewrite_by_lua</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">该指令用于执行内部<span class="hljs-built_in">URL</span>重写或者外部重定向，典型的如伪静态化<span class="hljs-built_in">URL</span>重写，本阶段在rewrite处理阶段的最后默认执行。<br></code></pre></td></tr></table></figure><p><strong>access_by_lua</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">该指令用于访问控制。例如，如果只允许内网<span class="hljs-built_in">IP</span>访问。<br></code></pre></td></tr></table></figure><p><strong>content_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令是应用最多的指令，大部分任务是在这个阶段完成的，其他的过程往往为这个阶段准备数据，正式处理基本都在本阶段。<br></code></pre></td></tr></table></figure><p><strong>header_filter_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令用于设置应答消息的头部信息。<br></code></pre></td></tr></table></figure><p><strong>body_filter_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令是对响应数据进行过滤，如截断、替换。<br></code></pre></td></tr></table></figure><p><strong>log_by_lua</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">该指令用于在<span class="hljs-built_in">log</span>请求处理阶段，用Lua代码处理日志，但并不替换原有<span class="hljs-built_in">log</span>处理。<br></code></pre></td></tr></table></figure><p><strong>balancer_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令主要的作用是用来实现上游服务器的负载均衡器算法<br></code></pre></td></tr></table></figure><p><strong>ssl_certificate_by_lua</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">该指令作用在Nginx和下游服务开始一个SSL握手操作时将允许本配置项的Lua代码。<br></code></pre></td></tr></table></figure><p>例</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c">location /getByGender &#123;<br>default_type &#x27;text/html&#x27;;<br>set_by_lua $name <span class="hljs-string">&quot;</span><br>local uri_args = ngx.req.get_uri_args()<br>gender = uri_args[&#x27;gender&#x27;]<br>name = uri_args[&#x27;name&#x27;]<br>if gender==&#x27;1&#x27; then<br>return name..&#x27;先生&#x27;<br>elseif gender==&#x27;0&#x27; then<br>return name..&#x27;女士&#x27;<br>else<br>return name<br>end<br><span class="hljs-string">&quot;;</span><br>header_filter_by_lua <span class="hljs-string">&quot;</span><br>ngx.header.aaa=&#x27;bbb&#x27;<br><span class="hljs-string">&quot;;</span><br>return <span class="hljs-number">200</span> $name;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ngx-lua操作Redis"><a href="#ngx-lua操作Redis" class="headerlink" title="ngx_lua操作Redis"></a>ngx_lua操作Redis</h6> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">lua</span>-resty-redis提供了访问Redis的详细API，包括创建对接、连接、操作、数据处理等。这些API基本上与Redis的操作一一对应。<br>（<span class="hljs-number">1</span>）redis = require <span class="hljs-string">&quot;resty.redis&quot;</span><br>（<span class="hljs-number">2</span>）<span class="hljs-keyword">new</span><br>语法: redis,err = <span class="hljs-keyword">redi</span><span class="hljs-variable">s:new</span>(),创建一个Redis对象。<br>（<span class="hljs-number">3</span>）connect<br>语法:ok,err=<span class="hljs-keyword">redi</span><span class="hljs-variable">s:connect</span>(host,port[,options_table]),设置连接Redis的连接信息。<br>ok:连接成功返回 <span class="hljs-number">1</span>，连接失败返回nil<br>err:返回对应的错误信息<br>（<span class="hljs-number">4</span>）set_timeout<br>语法: <span class="hljs-keyword">redi</span><span class="hljs-variable">s:set_timeout</span>(time) ，设置请求操作Redis的超时时间。<br>（<span class="hljs-number">5</span>）<span class="hljs-keyword">close</span><br>语法: ok,err = <span class="hljs-keyword">redi</span><span class="hljs-variable">s:close</span>(),关闭当前连接，成功返回<span class="hljs-number">1</span>，失败返回nil和错误信息<br>（<span class="hljs-number">6</span>）redis命令对应的方法<br>在<span class="hljs-keyword">lua</span>-resty-redis中，所有的Redis命令都有自己的方法，方法名字和命令名字相同，只是全部为小写。<br><br></code></pre></td></tr></table></figure><h6 id="ngx-lua操作mysql"><a href="#ngx-lua操作mysql" class="headerlink" title="ngx_lua操作mysql"></a>ngx_lua操作mysql</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">（<span class="hljs-number">1</span>）引入&quot;resty.mysql&quot;模块<br><span class="hljs-keyword">local</span> mysql = require &quot;resty.mysql&quot;<br>（<span class="hljs-number">2</span>）<span class="hljs-built_in">new</span><br>创建一个MySQL连接对象，遇到错误时，db为nil，err为错误描述信息<br>语法: db,err = mysql:<span class="hljs-built_in">new</span>()<br>（<span class="hljs-number">3</span>）<span class="hljs-keyword">connect</span><br>尝试连接到一个MySQL服务器<br>语法:ok,err=db:<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">options</span>),<span class="hljs-keyword">options</span>是一个参数的Lua表结构，里面包含数据库连接的相关信息<br>    host:服务器主机名或IP地址<br>    port:服务器监听端口，默认为<span class="hljs-number">3306</span><br>    <span class="hljs-keyword">user</span>:登录的用户名<br>    <span class="hljs-keyword">password</span>:登录密码<br>    <span class="hljs-keyword">database</span>:使用的数据库名<br>（<span class="hljs-number">4</span>）set_timeout<br>设置子请求的超时时间(ms)，包括<span class="hljs-keyword">connect</span>方法<br>语法:db:set_timeout(<span class="hljs-type">time</span>)<br>（<span class="hljs-number">5</span>）<span class="hljs-keyword">close</span><br>关闭当前MySQL连接并返回状态。如果成功，则返回<span class="hljs-number">1</span>；如果出现任何错误，则将返回nil和错误描述。<br>语法:db:<span class="hljs-keyword">close</span>()<br>（<span class="hljs-number">6</span>）send_query<br>异步向远程MySQL发送一个查询。如果成功则返回成功发送的字节数；如果错误，则返回nil和错误描述<br>语法:bytes,err=db:send_query(<span class="hljs-keyword">sql</span>)<br>（<span class="hljs-number">7</span>）read_result<br>从MySQL服务器返回结果中读取一行数据。res返回一个描述OK包或结果集包的Lua表,语法:<br>res, err, errcode, <span class="hljs-built_in">sqlstate</span> = db:read_result() <br>res, err, errcode, <span class="hljs-built_in">sqlstate</span> = db:read_result(<span class="hljs-keyword">rows</span>) :<span class="hljs-keyword">rows</span>指定返回结果集的最大值，默认为<span class="hljs-number">4</span><br>如果是查询，则返回一个容纳多行的数组。每行是一个数据列的key-<span class="hljs-keyword">value</span>对，如<br><br>    &#123;<br>      &#123;id=<span class="hljs-number">1</span>,username=&quot;TOM&quot;,birthday=&quot;1988-11-11&quot;,salary=<span class="hljs-number">10000.0</span>&#125;,<br>      &#123;id=<span class="hljs-number">2</span>,username=&quot;JERRY&quot;,birthday=&quot;1989-11-11&quot;,salary=<span class="hljs-number">20000.0</span>&#125;<br>    &#125;<br>如果是增删改，则返回类上如下数据<br>    &#123;<br>    insert_id = <span class="hljs-number">0</span>,<br>    server_status=<span class="hljs-number">2</span>,<br>    warning_count=<span class="hljs-number">1</span>,<br>    affected_rows=<span class="hljs-number">2</span>,<br>    message=nil<br>    &#125;<br>返回值:<br>res:操作的结果集<br>err:错误信息<br>errcode:MySQL的错误码，比如<span class="hljs-number">1064</span><br><span class="hljs-built_in">sqlstate</span>:返回由<span class="hljs-number">5</span>个字符组成的标准<span class="hljs-keyword">SQL</span>错误码，比如<span class="hljs-number">42000</span><br><br></code></pre></td></tr></table></figure><h4 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h4><ul><li><p>部署静态资源</p><p>将静态资源放到html文件夹下</p></li><li><p>反向代理</p><blockquote><p>正向代理:代理的是客服端,对客服端负责,帮助客服端访问服务器</p><p>反向代理:代理的是服务端,对服务端负责,帮助服务器提供服务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs linux">#在配置文件中的http中配置反向代理,记得开放端口<br>server &#123;<br>        listen       80;#监听的端口，当访问这个端口时转发到指定服务器<br>        server_name  localhost;<br>        location / &#123;<br>proxy_pass:http://192.168.229.130:8080;#转发的服务器<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>负载均衡</p><blockquote><p>基于反向代理，根据算法将用户请求分发到集群中的一台服务器上</p></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>weight</td><td>权重方式，值越大分配几率越高</td></tr><tr><td>ip_hash</td><td>根据客户端ip</td></tr><tr><td>least_conn</td><td>根据最少连接方式</td></tr><tr><td>url_hash</td><td>根据url分配方式</td></tr><tr><td>fair</td><td>根据响应时间方式</td></tr><tr><td>轮询</td><td>默认</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs linux">#配置负载均衡<br>upstream targetserver&#123;#upstream指令来定义一组服务器<br>server 192.168.229.130:8080;<br>server 192.168.229.131:8080;<br>server 192.168.229.131:8081;<br>&#125;<br><br>server &#123;<br>        listen       80;#监听的端口，当访问这个端口时转发到指定服务器<br>        server_name  localhost;<br>        location / &#123;<br>proxy_pass:http://targetserver;#转发的服务器<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>记得<code>./sbin/nginx -s reload</code>重新加载</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>中间件</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL主从配置</title>
    <link href="/2022/08/19/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/08/19/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL主从配置"><a href="#MySQL主从配置" class="headerlink" title="MySQL主从配置"></a>MySQL主从配置</h2><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>主从服务器操作系统版本和位数一致；</li><li>Master 和 Slave 数据库的版本要一致；</li><li>Master 和 Slave 数据库中的数据要一致；</li><li>Master 开启二进制日志， Master 和 Slave 的 server_id 在局域网内必须唯一；</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>​<strong>主库配置</strong></p><ol><li><p>修改配置文件&#x2F;etc&#x2F;my.cnf(windows下在my.ini文件中)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">log-bin</span>=master-bin<span class="hljs-comment">#开启二进制文件</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">100</span><span class="hljs-comment">#服务器唯一ID</span><br></code></pre></td></tr></table></figure></li><li><p>重启mysql服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart mysqld</span><br></code></pre></td></tr></table></figure></li><li><p>登录mysql创建一个用户并赋予REPLICATION SLAVE权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &#x27;username&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;<br>GRANT REPLICATION SLAVE ON *.* TO &#x27;username&#x27;@&#x27;%&#x27;;<br>ALTER USER &#x27;username&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>查看主库状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show master status;<br></code></pre></td></tr></table></figure></li></ol><p>​<strong>从库配置</strong></p><ol><li><p>修改配置文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">101</span><span class="hljs-comment">#服务器唯一ID</span><br></code></pre></td></tr></table></figure></li><li><p>重启mysql服务</p></li><li><p>设置主节点参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CHANGE MASTER TO<br>MASTER_HOST=&#x27;192.168.229.168&#x27;,<br>MASTER_USER=&#x27;zs&#x27;,<br>MASTER_PASSWORD=&#x27;123456&#x27;,<br>MASTER_LOG_FILE=&#x27;master-bin.000001&#x27;,#查看主库状态时File列的参数<br>MASTER_LOG_POS=3578;#查看主库状态时Position列的参数<br></code></pre></td></tr></table></figure></li><li><p>开启主从服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start slave;<br></code></pre></td></tr></table></figure></li><li><p>查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show slave status \G<br></code></pre></td></tr></table></figure></li></ol><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ol><li>Slave_SQL_Running: NO</li></ol><p>解决方式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; stop slave ;<br>mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;<br>mysql&gt; start slave ;<br><br>或者主节点参数配置错误，重新配置一遍<br></code></pre></td></tr></table></figure><ol start="2"><li>Slave_IO_Running: NO&#x2F;Collecting</li></ol><p>解决方式:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">每次数据库重启后都会导致master status发生变化,重新配置从库的主节点参数<br><br>或者复制虚拟机时数据库的uuid相同，删除<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/</span>auto.cnf文件后重启数据库<br>systemctl restart mysqld<br><br>或者防火墙没关<br></code></pre></td></tr></table></figure><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>主库负责增删改，从库负责查</p><p><strong>Sharding-JDBC</strong></p><p>轻量级java框架，增强JDBC功能，可以在程序中实现数据库读写分离</p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-RC1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">shardingsphere:</span><br>    <span class="hljs-attr">datasource:</span><br>      <span class="hljs-comment"># 定义数据源名称</span><br>      <span class="hljs-attr">names:</span><br>        <span class="hljs-string">master,slave</span><br>      <span class="hljs-comment"># 主数据源</span><br>      <span class="hljs-attr">master:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.229.168:3306/rw?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>      <span class="hljs-comment"># 从数据源</span><br>      <span class="hljs-attr">slave:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.229.130:3306/rw?characterEncoding=utf-8</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">masterslave:</span><br>      <span class="hljs-comment"># 读写分离配置（轮询）</span><br>      <span class="hljs-attr">load-balance-algorithm-type:</span> <span class="hljs-string">round_robin</span><br>      <span class="hljs-comment"># 最终的数据源名称</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">dataSource</span><br>      <span class="hljs-comment"># 主库数据源名称</span><br>      <span class="hljs-attr">master-data-source-name:</span> <span class="hljs-string">master</span><br>      <span class="hljs-comment"># 从库数据源名称列表，多个逗号分隔</span><br>      <span class="hljs-attr">slave-data-source-names:</span> <span class="hljs-string">slave</span><br>    <span class="hljs-attr">props:</span><br>      <span class="hljs-attr">sql:</span><br>        <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启SQL显示，默认false</span><br>  <span class="hljs-attr">main:</span><br>  <span class="hljs-comment">#Sharding和Druid的类有重名的，需要加上这个配置</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据库</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cache</title>
    <link href="/2022/08/19/spring/Spring%20Cache/"/>
    <url>/2022/08/19/spring/Spring%20Cache/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>通过注解来实现缓存，底层可以切换不同的cache实现，通过CacheManager接口来统一不同的缓存技术</p><p>对不同的缓存技术需要实现不同的CacheManager</p><table><thead><tr><th>CacheManager</th><th>描述</th></tr></thead><tbody><tr><td>EhCacheCacheManager</td><td>使用EhCache缓存技术</td></tr><tr><td>GuavaCacheManager</td><td>使用Guava缓存技术</td></tr><tr><td>RedisCacheManager</td><td>使用Redis缓存技术</td></tr></tbody></table><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能</td></tr><tr><td>@Cacheable</td><td>优先从缓存中取数据，没有去数据库取</td></tr><tr><td>@CachePut</td><td>将方法返回值放到内存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 不使用默认缓存技术，使用到其他缓存技术时要导入这个坐标 --&gt;</span><br><span class="hljs-comment">&lt;!-- 及相应缓存技术的坐标 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置相应技术</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span> <br>    <span class="hljs-attr">redis:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>        <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">cache:</span><br>        <span class="hljs-attr">redis:</span><br>          <span class="hljs-attr">time-to-live:</span> <span class="hljs-number">1800000</span> <span class="hljs-comment">#缓存过期时间</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure><p>启动类加@EnableCaching注解</p><p>在要缓存的方法上加注解, 返回值会被存到redis中, <strong>返回值必须是可序列化的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId + &#x27;_&#x27; + #setmeal.status&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span> &#123;...&#125;<br></code></pre></td></tr></table></figure><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><blockquote><p>在微服务中使用spring cache</p><p>例子来自尚医通</p></blockquote><ul><li><p>在common组件中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在common组件中添加redis配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xw.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义key规则</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title function_">keyGenerator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyGenerator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">generate</span><span class="hljs-params">(Object target, Method method, Object... params)</span> &#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                sb.append(target.getClass().getName());<br>                sb.append(method.getName());<br>                <span class="hljs-keyword">for</span> (Object obj : params) &#123;<br>                    sb.append(obj.toString());<br>                &#125;<br>                <span class="hljs-keyword">return</span> sb.toString();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置RedisTemplate规则</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> redisConnectionFactory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br><br>     <span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span><br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        <span class="hljs-comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span><br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">//序列号key value</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.setHashKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置CacheManager缓存规则</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> factory</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br><br>        <span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        <span class="hljs-type">RedisCacheConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br><br>        <span class="hljs-type">RedisCacheManager</span> <span class="hljs-variable">cacheManager</span> <span class="hljs-operator">=</span> RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>在使用到缓存的模块中添加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.redis.host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>spring.redis.port=<span class="hljs-number">6379</span><br>spring.redis.database= <span class="hljs-number">0</span><br>spring.redis.timeout=<span class="hljs-number">1800000</span><br><br>spring.redis.lettuce.pool.max-active=<span class="hljs-number">20</span><br>spring.redis.lettuce.pool.max-wait=-<span class="hljs-number">1</span><br>#最大阻塞等待时间(负数表示没限制)<br>spring.redis.lettuce.pool.max-idle=<span class="hljs-number">5</span><br>spring.redis.lettuce.pool.min-idle=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>在需要缓存的方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据id查询子数据列表</span><br>    <span class="hljs-meta">@Cacheable(value = &quot;dict&quot;,keyGenerator = &quot;keyGenerator&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dict&gt; <span class="hljs-title function_">findChildData</span><span class="hljs-params">(Long id)</span> &#123;<br>        LambdaQueryWrapper&lt;Dict&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(Dict::getParentId, id);<br>        List&lt;Dict&gt; dictList = baseMapper.selectList(wrapper);<br>        <span class="hljs-keyword">for</span> (Dict dict : dictList) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">hasChildren</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isChildren(dict.getId());<br>            dict.setHasChildren(hasChildren);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dictList;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2022/08/16/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/"/>
    <url>/2022/08/16/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>Redis是一款基于内存的key-value结构数据库</p><p>默认端口号6379</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h3 id="使用场所"><a href="#使用场所" class="headerlink" title="使用场所"></a>使用场所</h3><ol><li>存放验证码、用户登录信息</li><li>对不常变化的数据进行缓存</li></ol><h3 id="安装及运行"><a href="#安装及运行" class="headerlink" title="安装及运行"></a>安装及运行</h3><ol><li><p>官网下载压缩包  <a href="https://redis.io/">Redis官网</a></p></li><li><p>下载redis所需依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y gcc tcl<br></code></pre></td></tr></table></figure></li><li><p>上传压缩包，解压、编译、安装，默认安装在<code>/usr/local/bin</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf redis-<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.tar.gz<br><span class="hljs-attribute">cd</span> redis-<span class="hljs-number">6</span>.<span class="hljs-number">2</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">make</span> &amp;&amp; make install<br></code></pre></td></tr></table></figure></li></ol><h4 id="linux下运行redis"><a href="#linux下运行redis" class="headerlink" title="linux下运行redis"></a>linux下运行redis</h4><ol><li><p>修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><p>其他常用配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>运行服务器端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux"># 服务器端：运行redis的src目录下的redis-server文件<br>redis-server redis.conf<br></code></pre></td></tr></table></figure></li><li><p>远程连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">要远程连接的话要把配置文件的bind 127.0.0.1注释起来<br>windows命令行: ./redis-cli.exe -h 远程ip地址 -p 6379ssss<br>出现  Error: 在驱动器 %1 上插入软盘。时要把linux上的redis的protected-mode设置成no<br></code></pre></td></tr></table></figure></li></ol><h4 id="运行redis客户端"><a href="#运行redis客户端" class="headerlink" title="运行redis客户端"></a>运行redis客户端</h4><ol><li><p>命令行客户端</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ldif">redis-cli [options] [commonds]<br><span class="hljs-comment"># 常见options</span><br><span class="hljs-literal">-</span>h 127.0.0.1：指定要连接的redis节点的IP地址，默认是127.0.0.1<br><span class="hljs-literal">-</span>p 6379：指定要连接的redis节点的端口，默认是6379<br><span class="hljs-literal">-</span>a 123456：指定redis的访问密码 <br><br><span class="hljs-comment"># 测试</span><br>ping<span class="hljs-comment"># 如果连接成功返回PONG</span><br></code></pre></td></tr></table></figure></li><li><p>图形化客户端  </p><p><a href="https://github.com/lework/RedisDesktopManager-Windows/releases">下载地址</a></p></li></ol><h4 id="windows下运行redis"><a href="#windows下运行redis" class="headerlink" title="windows下运行redis"></a>windows下运行redis</h4><p>运行redis-server.exe文件即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">遇到启动报错时<br>redis-cli.exe<br>shutdown<br><span class="hljs-keyword">exit</span><br>redis-server.exe redis.windows.conf<br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li>字符串string</li><li>哈希 hash (适合存对象)</li><li>列表 list</li><li>集合 set</li><li>有序集合 sorted set</li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><p>命令行<code>help @generic</code>查看帮助文档</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>keys pattern</td><td>查找符合模式pattern的key <br/>模糊查询会影响效率，不建议生产环境使用</td></tr><tr><td>exists key</td><td>检查key是否存在</td></tr><tr><td>type key</td><td>返回key所存储的值得类型</td></tr><tr><td>ttl key</td><td>查看key的剩余有效时间<br/>-2已失效，-1永久有效</td></tr><tr><td>expire key seconds</td><td>设置key的有效剩余时间</td></tr><tr><td>del key</td><td>删除key</td></tr></tbody></table><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>set key value</td><td>设置值</td></tr><tr><td>get key</td><td>获取值</td></tr><tr><td>mset k1 v1 k2 v2 …</td><td>multi，批量设置值</td></tr><tr><td>mget v1 v2 …</td><td>批量获取值</td></tr><tr><td>incr key</td><td>让整型的key自增1</td></tr><tr><td>incrby key step</td><td>让整型的key自增自定义步长</td></tr><tr><td>setex key seconds value</td><td>设置值并指定过期时间(秒)</td></tr><tr><td>setnx key value</td><td>当key不存在时才设置值</td></tr></tbody></table><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>hset key field value</td><td>(可以批量)设置key中字段field的值</td></tr><tr><td>hget key field</td><td>(可以批量)获取key中字段field的值</td></tr><tr><td>hdel key field</td><td>删除key中字段field</td></tr><tr><td>hkeys key</td><td>获取key中所有字段</td></tr><tr><td>hvals key</td><td>获取key中所有值</td></tr><tr><td>hgetall key</td><td>获取key中所有字段和值</td></tr><tr><td>hincrby key field step</td><td>自增</td></tr><tr><td>hsetnx key field value</td><td>field不存在时才添加</td></tr></tbody></table><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>类似java的LinkedList</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>lpush key value1 [value2…]</td><td>插入一个或多个值到列表左边</td></tr><tr><td>lrange key start stop</td><td>获取列表指定范围内的元素</td></tr><tr><td>rpop key</td><td>移除并获取列表最右边一个元素</td></tr><tr><td>llen key</td><td>获取列表长度</td></tr><tr><td>brpop key1 [key2..] timeout</td><td>在timeout时间里移除并获取列表最右一个元素</td></tr></tbody></table><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>sadd key member1 [member2…]</td><td>添加一个或多个元素</td></tr><tr><td>smembers key</td><td>返回所有元素</td></tr><tr><td>scard key</td><td>获取元素数</td></tr><tr><td>sinter key1 [key2…]</td><td>返回交集</td></tr><tr><td>sunion key1 [key2…]</td><td>返回并集</td></tr><tr><td>sdiff key1 [key2…]</td><td>返回差集</td></tr><tr><td>srem key member1 [member2…]</td><td>移除一个或多个元素</td></tr><tr><td>sismember key member</td><td>判断元素是否在集合中</td></tr></tbody></table><h4 id="Sorted-Set"><a href="#Sorted-Set" class="headerlink" title="Sorted Set"></a>Sorted Set</h4><p>类似java的TreeSet</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>zadd key score1 member1 [score2 member2…]</td><td>添加一个或多个元素，或更新已有元素的分数</td></tr><tr><td>zrange key start stop [withscores]</td><td>获取指定区间元素</td></tr><tr><td>zincrby key increment member</td><td>对指定元素的分数加上增量increment</td></tr><tr><td>zrem key member1 [member2…]</td><td>移除一个或多个元素</td></tr><tr><td>zcount key min max</td><td>统计score值在给定范围内的所有元素的个数</td></tr><tr><td>zcard key</td><td>获取sorted set中的元素个数</td></tr><tr><td>zranke key member</td><td>获取sorted set 中的指定元素的排名</td></tr></tbody></table><h4 id="key的层级关系"><a href="#key的层级关系" class="headerlink" title="key的层级关系"></a>key的层级关系</h4><p>推荐key的命名方式为<code>项目名:业务名:类型:id</code></p><p>RDM图形界面工具会自动根据<code>:</code> 来分包</p><h3 id="java操作redis"><a href="#java操作redis" class="headerlink" title="java操作redis"></a>java操作redis</h3><h4 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h4><p>jedis的方法名和redis的命令是一样的，方便学习，但是线程不安全</p><p><a href="https://github.com/redis/jedis">jedis仓库</a></p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;47.96.80.163&quot;</span>, <span class="hljs-number">6378</span>);<br>        <span class="hljs-comment">// 设置密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-comment">// 选择库，默认0</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 关闭连接</span><br>        <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>)<br>            jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​<a href="https://blog.csdn.net/ming_yeye/article/details/117789182">遇到程序包redis.clients.jedis不存在时</a></p><h5 id="jedis连接池"><a href="#jedis连接池" class="headerlink" title="jedis连接池"></a>jedis连接池</h5><p>因为jedis是线程不安全的，所以可以使用jedis连接池来给每个线程分配一个jedis，从而避免因为多线程导致的问题</p><ol><li><p>编写连接池工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);      <span class="hljs-comment">// 最大数量</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);       <span class="hljs-comment">// 最大保存待命的数量</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);       <span class="hljs-comment">// 最小保存待命的数量</span><br>        poolConfig.setMaxWait(Duration.ofSeconds(<span class="hljs-number">200</span>));     <span class="hljs-comment">// 最大等待时间，超出时间就会销毁</span><br>        <span class="hljs-comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;47.96.80.163&quot;</span>, <span class="hljs-number">6378</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试通过线程池获取jedis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 建立连接</span><br>    jedis = JedisConnectionFactory.getJedis();<br>    <span class="hljs-comment">// 设置密码</span><br>    jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-comment">// 选择库，默认0</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h4><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。</p><p>通过opsForXXX()方法获取操作某个数据类型的对象，再进行操作</p><p><a href="https://spring.io/projects/spring-data-redis">官方文档</a></p><ol><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-data-redis依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 连接池依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">47.96</span><span class="hljs-number">.80</span><span class="hljs-number">.163</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6378</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment"># 默认使用lettuce连接池，要使用jedis连接池需要导入jedis依赖</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">1000ms</span><br></code></pre></td></tr></table></figure></li><li><p>注入RedisTemplate测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDataRedisDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;aaa&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="自定义序列化器"><a href="#自定义序列化器" class="headerlink" title="自定义序列化器"></a>自定义序列化器</h5><p>默认使用jdk的序列化器，可读性差，内存占用较大</p><ol><li><p>编写配置类</p><p>使用到了json序列化器，可能要自己导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jackson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        <span class="hljs-comment">// 创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">// 创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>        <span class="hljs-comment">// 创建key序列化工具</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br>        <span class="hljs-comment">// 创建value序列化工具</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br><br>        <span class="hljs-keyword">return</span> template;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>);<br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1&quot;</span>, user);<br>    System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:1&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>redis中存的格式为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@class&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.xw.springdataredisdemo.pojo.User&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>会额外存序列化的类信息，占据额外内存，可以使用<strong>StringRedisTemplate</strong>解决这个问题</p></li></ol><h5 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h5><ol><li><p>注入StringRedisTemplate，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDataRedisDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><span class="hljs-comment">// JSON序列化工具</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-comment">// 手动序列化为json</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1&quot;</span>, json);<br>        <span class="hljs-comment">// 手动反序列化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:1&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> mapper.readValue(jsonUser, User.class);<br>        System.out.println(u);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>redis中存的格式为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h4><h5 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h5><ol><li><p><strong>内存淘汰：</strong>redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p></li><li><p><strong>超时剔除：</strong>当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p></li><li><p><strong>主动更新：</strong>我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p></li></ol><h5 id="最佳实践方案"><a href="#最佳实践方案" class="headerlink" title="最佳实践方案"></a>最佳实践方案</h5><ol><li>低一致性需求：使用redis的内存淘汰机制</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案<ul><li>读操作<ul><li>缓存未命中则查询数据库，并写入缓存，并设定超时时间</li></ul></li><li>写操作<ul><li>先写数据库再删缓存</li></ul></li></ul></li></ol><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><h5 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h5><ul><li><strong>缓存空对象</strong><ul><li>原理：即使访问的对象不存在，也在缓存中存一份空对象</li><li>优点：实现简单，维护方便</li><li>缺点：<ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li><strong>布隆过滤</strong><ul><li>原理：在缓存前多加一层，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行</li><li>优点：内存占用较少，没有多余key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p><strong>解决方案</strong></p><ul><li><p><strong>互斥锁</strong></p><ul><li>原理：第一个查询未命中的线程去(上锁)查询数据库、重建缓存数据，其他线程再此期间等待，直到缓存更新</li><li>优点：没有额外内存消耗，保证一致性，实现简单</li><li>缺点：影响性能，可能有死锁风险</li></ul></li><li><p><strong>逻辑过期</strong></p><ul><li>原理：设置一个过期时间的key，当过期时不删除缓存，而是有一个额外的线程持有锁去进行重构数据，在此期间其他线程返回的是旧数据</li><li>优点：线程无需等待，性能较好</li><li>缺点：不能保证一致性，有额外内存消耗，实现复杂</li></ul></li></ul><h5 id="互斥锁实例"><a href="#互斥锁实例" class="headerlink" title="互斥锁实例"></a>互斥锁实例</h5><ol><li><p>定义获取锁、释放锁的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-comment">// setIfAbsent只有不存在时才放入值，以此来实现互斥锁</span><br>    <span class="hljs-comment">// 尝试获取锁</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-comment">// 通过BooleanUtil，防止拆箱时空指针</span><br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithPassMutex</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 从redis中查询缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<br>        <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(shopJson)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 防止缓存击穿</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:shop:&quot;</span> + id;<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>            <span class="hljs-keyword">return</span> queryWithPassThrough(id);<br>        &#125;<br>        <span class="hljs-comment">// 没有缓存，从数据库中取数据</span><br>        shop = <span class="hljs-built_in">this</span>.getById(id);<br>        <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 将空对象保存到redis，防止缓存穿透</span><br>            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        unLock(lockKey);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> shop;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="逻辑过期实例"><a href="#逻辑过期实例" class="headerlink" title="逻辑过期实例"></a>逻辑过期实例</h5><ol><li><p>定义获取锁、释放锁的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-comment">// setIfAbsent只有不存在时才放入值，以此来实现互斥锁</span><br>    <span class="hljs-comment">// 尝试获取锁</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-comment">// 通过BooleanUtil，防止拆箱时空指针</span><br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义重建缓存的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveShop2Redis</span><span class="hljs-params">(Long id, Long expireSeconds)</span> &#123;<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>    <span class="hljs-comment">// 封装逻辑过期时间</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>    redisData.setData(shop);<br>    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));<br>    <span class="hljs-comment">// 写入Redis</span><br>    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-comment">// 固定大小的线程池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithPassLogicalExpire</span> <span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 从redis中查询缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>    <span class="hljs-keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);<br>    <span class="hljs-comment">// 判断是否过期</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>    <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 未过期，直接返回</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br>    <span class="hljs-comment">// 已过期，重建缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-keyword">if</span> (isLock) &#123;<br>        <span class="hljs-comment">// 开启新线程</span><br>        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 重建缓存</span><br>                <span class="hljs-built_in">this</span>.saveShop2Redis(id, <span class="hljs-number">30L</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 释放锁</span><br>                unLock(lockKey);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">// 返回旧数据</span><br>    <span class="hljs-keyword">return</span> shop;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h4><p>具有的功能：</p><ol><li>存<ul><li>将任意对象序列化为json存到string类型的key的缓存中，并设置TTL过期时间</li><li>将任意对象序列化为json存到string类型的key的缓存中，并设置逻辑过期时间，用于处理缓存击穿问题</li></ul></li><li>取<ul><li>根据key查询缓存，并反序列化为指定对象，利用缓存空值的方法解决缓存穿透问题</li><li>根据key查询缓存，并反序列化为指定对象，利用逻辑过期解决缓存击穿问题</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-comment">// 固定大小的线程池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonValue</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(value);<br>        stringRedisTemplate.opsForValue().set(key, jsonValue, time, unit);<br>    &#125;<br><br>    <span class="hljs-comment">// 逻辑过期，用于防止缓存穿透</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicExpire</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-comment">// 设置逻辑过期</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>        redisData.setData(value);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>        <span class="hljs-comment">// 写入Redis</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonValue</span> <span class="hljs-operator">=</span> JSONUtil.toJsonStr(redisData);<br>        stringRedisTemplate.opsForValue().set(key, jsonValue, time, unit);<br>    &#125;<br><br>    <span class="hljs-comment">// 存空对象，用于防止缓存穿透</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type,  Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 从redis中查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 没有缓存，通过用户自定义方法查询数据库</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 将空对象保存到redis，防止缓存穿透</span><br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.set(key, r, time, unit);<br><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">// 对逻辑过期数据的查询</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithPassLogicalExpire</span> <span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 从redis中查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>        <span class="hljs-comment">// 判断是否过期</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>        <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 未过期，直接返回</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br>        <span class="hljs-comment">// 已过期，重建缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>        <span class="hljs-keyword">if</span> (isLock) &#123;<br>            <span class="hljs-comment">// 开启新线程</span><br>            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 重建缓存: 查询数据库、写入缓存</span><br>                    <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>                    <span class="hljs-built_in">this</span>.setWithLogicExpire(key, r1, time, unit);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 释放锁</span><br>                    unLock(lockKey);<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-comment">// 返回旧数据</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-comment">// setIfAbsent只有不存在时才放入值，以此来实现互斥锁</span><br>        <span class="hljs-comment">// 尝试获取锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 通过BooleanUtil，防止拆箱时空指针</span><br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h4><h5 id="全局id生成器"><a href="#全局id生成器" class="headerlink" title="全局id生成器"></a>全局id生成器</h5><blockquote><p> 是一种在分布式系统下用来生成全局唯一ID的工具</p></blockquote><p>id(Long型，64位)的结构可以设计成：</p><p><code>符号位(1位，为0) ：时间戳(31位，以秒为单位) ：序列号（32位）</code></p><p>作用：</p><ul><li>增加id的复杂性，防止被猜出规律</li><li>唯一性，安全性</li></ul><p><strong>Redis自增实现全局id生成器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisIdWorker</span> &#123;<br><br>    <span class="hljs-comment">// 开始时间戳</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BEGIN_TIMESTAMP</span> <span class="hljs-operator">=</span> <span class="hljs-number">1640995200L</span>;<br><br>    <span class="hljs-comment">// 序列号位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br><br>    <span class="hljs-comment">// redis</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisIdWorker</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String keyPrefix)</span> &#123;<br>        <span class="hljs-comment">// 生成时间戳</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowSecond</span> <span class="hljs-operator">=</span> now.toEpochSecond(ZoneOffset.UTC);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> nowSecond - BEGIN_TIMESTAMP;<br>        <span class="hljs-comment">// 生成序列号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy:MM:dd&quot;</span>));  <span class="hljs-comment">// 获取当天日期</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="hljs-string">&quot;icr:&quot;</span> + keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + date);<span class="hljs-comment">// 以天为单位生成序列号</span><br>        <span class="hljs-comment">// 返回id</span><br>        <span class="hljs-keyword">return</span> timeStamp &lt;&lt; COUNT_BITS | count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 获取当前时间的秒数</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> time.toEpochSecond(ZoneOffset.UTC);<br>        System.out.println(second);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HmDianPingApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><br>    <span class="hljs-comment">// 固定大小线程池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">500</span>);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisIdWorker</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">300</span>);<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>                System.out.println(id);<br>            &#125;<br>            latch.countDown();<br>        &#125;;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>            es.submit(task);<br>        &#125;<br>        latch.await();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">&quot;执行时间 = &quot;</span> + (end - begin));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h5><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁</p><p>通常有两种解决方案</p><ul><li><strong>悲观锁</strong>：认为线程安全问题一定会发生，因此在操作数据之前先获取锁，确保线程串行执行</li><li><strong>乐观锁</strong>：认为线程安全问题不一定会发生，只在更新数据的时候去判断数据是否被其他线程修改</li></ul><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 查询数据</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">// 判断开始结束时间</span><br>    <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 判断库存</span><br>    <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 获取锁对象</span><br>    <span class="hljs-comment">// SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>    <span class="hljs-keyword">if</span> (!isLock) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>        <span class="hljs-keyword">return</span> proxy.createVoucherOrder(userId, voucherId);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long userId, Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 一人一单</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId)<br>        .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买过一次&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>        .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>        .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>        .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// 防止超卖</span><br>        .update();<br>    <span class="hljs-keyword">if</span> (!success)<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    <span class="hljs-comment">// 创建订单</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    voucherOrder.setId(orderId);<br>    voucherOrder.setUserId(userId);<br>    voucherOrder.setVoucherId(voucherId);<br>    <span class="hljs-built_in">this</span>.save(voucherOrder);<br>    <span class="hljs-comment">// 返回订单id</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h5><p>满足分布式系统或集群模式下多进程可见并且互斥的锁</p><blockquote><p>在集群部署的时候不能使用synchronized作为锁，每个tomcat都有一个属于自己的jvm，锁的时候不是锁的同一个对象，导致synchronized失效</p></blockquote><p><strong>分布式锁应满足的条件</strong>：</p><ol><li><p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p></li><li><p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p></li><li><p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p></li><li><p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p></li></ol><p><strong>基于Redis实现分布式锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILock</span> &#123;<br>      <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span>;<br><br>      <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一版锁，在业务时间超过锁过期时间时，存在锁被其他jvm的线程误删的风险</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span> &#123;<br><br>    <span class="hljs-comment">// 锁前缀</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br><br>    <span class="hljs-comment">// 锁名称</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> KEY_PREFIX + name;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();    <span class="hljs-comment">// 以当前线程的id作为值</span><br>        <span class="hljs-comment">// 获取锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, value + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 通过equlas防止拆箱时可能的空指针</span><br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        stringRedisTemplate.delete(KEY_PREFIX + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二版锁，解决锁误删的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span> &#123;<br><br>        <span class="hljs-comment">// 锁前缀</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br>    <span class="hljs-comment">// 用于标识不同线程的锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<br><br>    <span class="hljs-comment">// 锁名称</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> KEY_PREFIX + name;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();    <span class="hljs-comment">// 以当前线程的id作为值</span><br>        <span class="hljs-comment">// 获取锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, value, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 通过equlas防止拆箱时可能的空指针</span><br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 判断线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> KEY_PREFIX + name;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();    <span class="hljs-comment">// 以当前线程的id作为值</span><br>        <span class="hljs-keyword">if</span> (stringRedisTemplate.opsForValue().get(key).equals(value)) &#123;<br>            stringRedisTemplate.delete(KEY_PREFIX + name);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h5><p>执行完业务，要释放锁的时候，先判断锁标识是否一致，然后再释放锁</p><p>此时若获取锁标识后出现阻塞，在阻塞期间锁过期并被其他jvm的线程获取</p><p>当阻塞结束就有可能将锁误删除</p><blockquote><p>获取锁标识和释放锁不是原子性的</p></blockquote><p><strong>解决方式</strong></p><p>通过Lua脚本实现原子性操作多条命令</p><p><strong>客户端调用脚本</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 示例</span><br><span class="hljs-comment">-- 1 表示有一个key，后面跟参数，ky会保存到KEYS[]，value会保存到ARGV[]中</span><br><span class="hljs-comment">-- 注意lua数组下标从1开始</span><br>EVAL <span class="hljs-string">&quot;return redis.call(&#x27;set&#x27;,&#x27;KEYS[1],ARGV[1]&#x27;)&quot;</span> <span class="hljs-number">1</span> name Rose<br></code></pre></td></tr></table></figure><p><strong>java调用lua脚本</strong></p><p>创建lua脚本</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 释放锁</span><br>    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>, KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>加载lua脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解锁脚本</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;<br><span class="hljs-keyword">static</span> &#123;<br>    UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    <span class="hljs-comment">// 脚本所在位置</span><br>    UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;script/unlock.lua&quot;</span>));<br>    <span class="hljs-comment">// 设置脚本返回值类型</span><br>    UNLOCK_SCRIPT.setResultType(Long.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> KEY_PREFIX + name;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();    <span class="hljs-comment">// 以当前线程的id作为值</span><br>    stringRedisTemplate.execute(<br>        UNLOCK_SCRIPT,<br>        Collections.singletonList(key),<br>        value<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h5><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种<strong>分布式锁</strong>的实现。</p><p><strong>使用</strong></p><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.13.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置Redisson客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissionClient redissonClient;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//获取锁(可重入)，指定锁的名称</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;anyLock&quot;</span>);<br>    <span class="hljs-comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,TimeUnit.SECONDS);<br>    <span class="hljs-comment">//判断获取锁成功</span><br>    <span class="hljs-keyword">if</span>(isLock)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;执行业务&quot;</span>);          <br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>Redission分布式锁原理</strong></p><ul><li><p><strong>可重入</strong>：利用hash结构记录线程id和重入次数</p></li><li><p><strong>可重试</strong>：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制</p></li><li><p><strong>超时续约</strong>：利用watchDog，每隔一段时间(releaseTime &#x2F; 3)，重置超时时间</p></li><li><p><strong>主从一致性</strong>：多个独立的Redis节点，必须在所有节点都获取重入锁，蔡栓获取锁成功</p></li></ul><h4 id="优化秒杀"><a href="#优化秒杀" class="headerlink" title="优化秒杀"></a>优化秒杀</h4><p><strong>思路</strong>：</p><p><strong>将耗时比较短的逻辑判断放入到redis中</strong>，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息</p><p><strong>实例</strong>：</p><ol><li><p>在新增秒杀券的时候，将库存信息保存到redis中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;<br>    <span class="hljs-comment">// 保存优惠券</span><br>    save(voucher);<br>    <span class="hljs-comment">// 保存秒杀信息</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();<br>    seckillVoucher.setVoucherId(voucher.getId());<br>    seckillVoucher.setStock(voucher.getStock());<br>    seckillVoucher.setBeginTime(voucher.getBeginTime());<br>    seckillVoucher.setEndTime(voucher.getEndTime());<br>    seckillVoucherService.save(seckillVoucher);<br>    <span class="hljs-comment">// 保存优惠券库存到redis中</span><br>    stringRedisTemplate.opsForValue().set(RedisConstants.SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将判断库存和一人一单的判断逻辑写到lua脚本中，实现快速判断是否能购买</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><br><span class="hljs-comment">-- 判断库存是否充足</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 库存不足，返回1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 判断当前用户是否已下过单(一人一单)</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 以下过单，返回2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 扣除库存，下单</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)<br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;<br><span class="hljs-keyword">static</span> &#123;<br>    SECKILL_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    SECKILL_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;script/seckill.lua&quot;</span>));<br>    SECKILL_SCRIPT.setResultType(Long.class);<br>&#125;<br><br>IVoucherOrderService proxy;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 执行lua脚本判断</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<br>        SECKILL_SCRIPT,<br>        Collections.emptyList(),    <span class="hljs-comment">// keys</span><br>        voucherId.toString(), userId.toString() <span class="hljs-comment">//values</span><br>    );<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 保存到阻塞队列（之后通过lua脚本完成）</span><br>    <span class="hljs-comment">// 获取代理对象</span><br>    proxy = (IVoucherOrderService) AopContext.currentProxy();<br>    orderTasks.add(voucherOrder);<br><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>下单时将创建&#x2F;保存订单任务放到(<strong>jdk的</strong>)阻塞队列中，异步执行任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 阻塞队列和执行下单的线程</span><br><span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br><span class="hljs-comment">// 类初始化完后会调用此方法</span><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 开启处理阻塞队列的线程</span><br>    SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取阻塞队列里的订单，如果队列为空则会阻塞住</span><br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> orderTasks.take();<br>                <span class="hljs-comment">// 创建订单</span><br>                handleVoucherOrder(voucherOrder);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br>    <span class="hljs-comment">// 一人一单</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId)<br>        .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        log.error(<span class="hljs-string">&quot;用户已经购买过一次&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>        .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>        .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())<br>        .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// 防止超卖</span><br>        .update();<br>    <span class="hljs-keyword">if</span> (!success)<br>        log.error(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    <span class="hljs-comment">// 保存订单</span><br>    <span class="hljs-built_in">this</span>.save(voucherOrder);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>消息队列模型主要包括的三个角色：</p><ul><li><strong>生产者</strong>：发送消息到消息队列</li><li><strong>消息队列</strong>：存储和管理消息，也称为消息代理</li><li><strong>消费者</strong>：从消息队列获取消息并处理</li></ul><p>Redis提供了三种不同的方式来实现消息队列：</p><ul><li><strong>list</strong>：基于List结构模拟消息队列</li><li><strong>PubSub</strong>：基于点对点消息模型（发布订阅）</li><li><strong>Stream</strong>：比较完善的消息队列模型</li></ul><h5 id="基于List实现消息队列"><a href="#基于List实现消息队列" class="headerlink" title="基于List实现消息队列"></a>基于List实现消息队列</h5><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>LPUSH&#x2F;RPUSH keys values</td><td>往双端队列存数据</td></tr><tr><td>LPOP&#x2F;RPOP</td><td>从双端队列取数据并删除</td></tr><tr><td>BLPOP&#x2F;BRPOP</td><td>取数据，没有数据的时候会等待</td></tr></tbody></table><p>缺点：</p><ul><li>无法避免消息丢失</li><li>只支持单消费者</li></ul><h5 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h5><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>SUBSCRIBE channels</td><td>订阅频道</td></tr><tr><td>PUBLISH channel msg</td><td>向一个频道发送消息</td></tr><tr><td>PSUBSCRIBE pattern</td><td>订阅与pattern格式匹配的所有频道<br/>?：匹配一个字符<br/>*：匹配0到多个字符<br/>[ab]：匹配括号里的字符</td></tr></tbody></table><p>缺点：</p><ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出会数据丢失</li></ul><h5 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h5><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>XADD</td><td>发送消息</td></tr><tr><td>XREAD</td><td>读取消息，不会删除</td></tr></tbody></table><p><img src="/img/redis_img/xadd.png"></p><p><img src="/img/redis_img/xread.png"></p><p>特点：</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>基于Redis的Stream结构作为消息队列，实现异步秒杀下单</p><ol><li><p>创建消息队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs redis">XGROUP create stream.orders g1 0 mkstream <br></code></pre></td></tr></table></figure></li><li><p>修改判断是否有抢购资格的lua脚本，发送消息到消息队列</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">local</span> orderId = ARGV[<span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><br><span class="hljs-comment">-- 判断库存是否充足</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 库存不足，返回1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 判断当前用户是否已下过单(一人一单)</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 以下过单，返回2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 扣除库存，下单</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)<br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><span class="hljs-comment">-- 发送消息到队列中</span><br>redis.call(<span class="hljs-string">&#x27;xadd&#x27;</span>, <span class="hljs-string">&#x27;stream.orders&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;userId&#x27;</span>, userId, <span class="hljs-string">&#x27;voucherId&#x27;</span>, voucherId, <span class="hljs-string">&#x27;id&#x27;</span>, orderId)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>编写处理消息逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stream.orders&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取消息队列里的订单，如果队列为空则会阻塞住</span><br>                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                    Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                    StreamReadOptions.empty().count(<span class="hljs-number">1</span>).block(Duration.ofSeconds(<span class="hljs-number">2</span>)),<br>                    StreamOffset.create(queueName, ReadOffset.lastConsumed())<br>                );<br>                <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;<br>                    <span class="hljs-comment">// 没有读到消息，继续下一次循环</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                Map&lt;Object, Object&gt; values = record.getValue();<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 创建订单</span><br>                handleVoucherOrder(voucherOrder);<br>                <span class="hljs-comment">// ack确认</span><br>                stringRedisTemplate.opsForStream().acknowledge(queueName, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>                handlePendingList();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlePendingList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 获取消息队列里的订单，如果队列为空则会阻塞住</span><br>                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                    Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                    StreamReadOptions.empty().count(<span class="hljs-number">1</span>),<br>                    StreamOffset.create(queueName, ReadOffset.from(<span class="hljs-string">&quot;0&quot;</span>))<br>                );<br>                <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;<br>                    <span class="hljs-comment">// 没有读到消息，结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                Map&lt;Object, Object&gt; values = record.getValue();<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 创建订单</span><br>                handleVoucherOrder(voucherOrder);<br>                <span class="hljs-comment">// ack确认</span><br>                stringRedisTemplate.opsForStream().acknowledge(queueName, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h4><blockquote><p>通过redis存哪些用户点赞了哪些文章，实现一篇文章一个用户只能点赞一次</p></blockquote><p>点赞时调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 判断是否已经点赞，如果已点赞则取消点赞</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blog:liked:&quot;</span> + id;<br>    <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());<br>    <span class="hljs-keyword">if</span> (score == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 增加点赞数</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked + 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>        <span class="hljs-comment">// 保存点赞信息到Redis的SortedSet中，用于之后可以获取点赞的顺序</span><br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 减少点赞数</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked - 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>        <span class="hljs-comment">// 保存取消点赞信息到Redis</span><br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            stringRedisTemplate.opsForZSet().remove(key, userId.toString());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>通过id查询文章时调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-keyword">if</span> (blog == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;博客不存在&quot;</span>);<br>    &#125;<br>    queryBlogUser(blog);<br>    <span class="hljs-comment">// 查询是否被当前用户点赞</span><br>    isBlogLiked(blog);<br><br>    <span class="hljs-keyword">return</span> Result.ok(blog);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isBlogLiked</span><span class="hljs-params">(Blog blog)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blog:liked:&quot;</span> + blog.getId();<br>    <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());<br>    blog.setIsLike(score != <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查询热门文章时调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(Integer current)</span> &#123;<br>    <span class="hljs-comment">// 根据用户查询</span><br>    Page&lt;Blog&gt; page = query()<br>        .orderByDesc(<span class="hljs-string">&quot;liked&quot;</span>)<br>        .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br>    <span class="hljs-comment">// 获取当前页数据</span><br>    List&lt;Blog&gt; records = page.getRecords();<br>    <span class="hljs-comment">// 查询用户</span><br>    records.forEach(blog -&gt; &#123;<br>        <span class="hljs-built_in">this</span>.queryBlogUser(blog);<br>        <span class="hljs-built_in">this</span>.isBlogLiked(blog);<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> Result.ok(records);<br>&#125;<br></code></pre></td></tr></table></figure><p>查询点赞顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 查询redis文章前5个先点赞的用户id</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> RedisConstants.BLOG_LIKED_KEY + id;<br>    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span> (top5 == <span class="hljs-literal">null</span> || top5.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>    &#125;<br>    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());<br>    <span class="hljs-comment">// 查询用户</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    List&lt;User&gt; users = userService.query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id, &quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>    List&lt;UserDTO&gt; userDTOS = users.stream().map(user -&gt;<br>                                                BeanUtil.copyProperties(user, UserDTO.class)<br>                                               ).collect(Collectors.toList());<br><br>    <span class="hljs-keyword">return</span> Result.ok(userDTOS);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关注"><a href="#关注" class="headerlink" title="关注"></a>关注</h4><p>通过set集合的查看交集功能实现查找共同关注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 关注时将关注的用户存到redis中</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 根据isFollow判断关注还是取关</span><br>    <span class="hljs-keyword">if</span> (isFollow) &#123;<br>        <span class="hljs-type">Follow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Follow</span>();<br>        follow.setFollowUserId(followUserId);<br>        follow.setUserId(userId);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(follow);<br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            <span class="hljs-comment">// 把关注目标存到redis</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br>            stringRedisTemplate.opsForSet().add(key, followUserId.toString());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        LambdaQueryWrapper&lt;Follow&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(Follow::getFollowUserId, followUserId)<br>            .eq(Follow::getUserId, userId);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> remove(wrapper);<br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            <span class="hljs-comment">// 把关注目标从redis移除</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br>            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">commonFollow</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 查找当前用户和目标用户的共同关注</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span>;<br>    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(Arrays.asList(key + userId, key + id));<br>    <span class="hljs-keyword">if</span> (intersect == <span class="hljs-literal">null</span> || intersect.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>    &#125;<br>    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());<br>    <span class="hljs-comment">// 转换成UserDTO</span><br>    List&lt;UserDTO&gt; users = userService.listByIds(ids)<br>        .stream().map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>        .collect(Collectors.toList());<br>    <span class="hljs-keyword">return</span> Result.ok(users);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><blockquote><p>推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。</p></blockquote><p>Feed流有常见两种模式：</p><p><strong>Timeline</strong>：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈</p><ul><li>优点：信息全面，不会有缺失。并且实现也相对简单</li><li>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li></ul><p><strong>智能排序</strong>：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p><ul><li>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷</li><li>缺点：如果算法不精准，可能起到反作用</li></ul><p>Timeline模式的实现方案有三种：</p><ul><li><strong>拉模式</strong>：也叫做读扩散。被关注人发送消息后会保存到自己的邮箱，用户自己去拉取关注的人的收件箱里的消息<ul><li>优点：节约空间</li><li>缺点：比较延迟，要拉的消息多时对服务器有较大压力</li></ul></li><li><strong>推模式</strong>：也叫做写扩散。被关注人发送消息后会主动写到关注人的邮箱中<ul><li>优点：实效快</li><li>缺点：内存占用大</li></ul></li><li><strong>推拉结合</strong>：也叫做读写混合。对粉丝少的被关注人使用推模式；对于粉丝多的被关注人，对活跃粉丝使用推模式，对其他粉丝使用拉模式</li></ul><p><strong>实例</strong></p><blockquote><p>推模式，用sortedSet作为收件箱</p></blockquote><p>推给粉丝消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(Blog blog)</span> &#123;<br>    <span class="hljs-comment">// 获取登录用户</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>    blog.setUserId(user.getId());<br>    <span class="hljs-comment">// 保存探店博文</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(blog);<br>    <span class="hljs-comment">// 推送给粉丝</span><br>    <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>        List&lt;Follow&gt; followUserIds = followService.query().eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, user.getId()).list();<br>        <span class="hljs-keyword">for</span> (Follow follow : followUserIds) &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> follow.getUserId();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;feed:&quot;</span> + userId;<br>            stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Result.ok(blog.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p>粉丝查看消息</p><blockquote><p>通过滚动分页实现</p></blockquote><p><strong>滚动分页</strong>：从上一次查到的消息开始分页，避免有新消息插入导致又拿到上次已经拿到的消息</p><p><img src="/img/redis_img/gundongfenye.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(Long max, Integer offset)</span> &#123;<br>    <span class="hljs-comment">// 查询收件箱 ZREVRANGEBYSCORE key max min LIMIT offset count</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;feed:&quot;</span> + userId;<br>    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet().reverseRangeByScoreWithScores(<br>        key, <span class="hljs-number">0</span>, max, offset, <span class="hljs-number">2</span><br>    );<br>    <span class="hljs-keyword">if</span> (typedTuples == <span class="hljs-literal">null</span> || typedTuples.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    <span class="hljs-comment">// 获取数据(blogId, 最小时间戳，偏移量(查询出来的数据中score为最小时间戳的消息个数))</span><br>    List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(typedTuples.size());<br>    <span class="hljs-type">long</span> <span class="hljs-variable">minTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 偏移量offset</span><br>    <span class="hljs-keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; typedTuple : typedTuples) &#123;<br>        ids.add(Long.valueOf(typedTuple.getValue()));<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> typedTuple.getScore().longValue();<br>        os = time == minTime ? ++os : <span class="hljs-number">1</span>;<br>        minTime = time;<br>    &#125;<br>    <span class="hljs-comment">// 查询blog</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    List&lt;Blog&gt; blogs = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>        queryBlogUser(blog);    <span class="hljs-comment">// 查询博客作者</span><br>        isBlogLiked(blog);  <span class="hljs-comment">// 查询是否被当前用户点赞</span><br>    &#125;<br>    <span class="hljs-comment">// 封装返回</span><br>    <span class="hljs-type">ScrollResult</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScrollResult</span>();<br>    r.setList(blogs);<br>    r.setOffset(os);<br>    r.setMinTime(minTime);<br><br>    <span class="hljs-keyword">return</span> Result.ok(r);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="附近"><a href="#附近" class="headerlink" title="附近"></a>附近</h4><p><strong>GEO数据类型</strong>：GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据，底层基于SortedSet</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>GEOADD</td><td>添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</td></tr><tr><td>GEODIST</td><td>计算指定的两个点之间的距离并返回</td></tr><tr><td>GEOHASH</td><td>将指定member的坐标转为hash字符串形式并返回</td></tr><tr><td>GEOPOS</td><td>返回指定member的坐标</td></tr><tr><td>GEORADIUS</td><td>指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。<strong>6.以后已废弃</strong></td></tr><tr><td>GEOSEARCH</td><td>在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</td></tr><tr><td>GEOSEARCHSTORE</td><td>与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</td></tr></tbody></table><p><strong>实例</strong></p><p>按分类导入店铺id和坐标到redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">loadShopData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 查询店铺信息</span><br>    List&lt;Shop&gt; list = shopService.list();<br>    <span class="hljs-comment">// 按typeId分组</span><br>    Map&lt;Long, List&lt;Shop&gt;&gt; map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId));<br>    <span class="hljs-comment">// 存到redis</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">typeId</span> <span class="hljs-operator">=</span> entry.getKey();<br>        List&lt;Shop&gt; value = entry.getValue();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;shop:geo:&quot;</span> + typeId;<br>        ArrayList&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Shop shop : value) &#123;<br>            <span class="hljs-comment">// stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());</span><br>            locations.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(shop.getId().toString(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(shop.getX(), shop.getY())));<br>        &#125;<br>        stringRedisTemplate.opsForGeo().add(key, locations);    <span class="hljs-comment">// 一次存多个</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询附近店铺及距离，<strong>注意</strong>：redis版本要在6.2以上，否则使用不了GEOSEARCH指令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;<br>    <span class="hljs-comment">// 判断是否需要根据坐标查询</span><br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span> || y == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 根据类型分页查询</span><br>        Page&lt;Shop&gt; page = query()<br>            .eq(<span class="hljs-string">&quot;type_id&quot;</span>, typeId)<br>            .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));<br>        <span class="hljs-comment">// 返回数据</span><br>        <span class="hljs-keyword">return</span> Result.ok(page.getRecords());<br>    &#125;<br>    <span class="hljs-comment">// 计算分页参数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">from</span> <span class="hljs-operator">=</span> (current - <span class="hljs-number">1</span>) * SystemConstants.DEFAULT_PAGE_SIZE;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> current * SystemConstants.DEFAULT_PAGE_SIZE;<br>    <span class="hljs-comment">// 查询redis</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;shop:geo:&quot;</span> + typeId;<br>    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo().search(<br>        key,    <span class="hljs-comment">// 店铺类型</span><br>        GeoReference.fromCoordinate(x, y),  <span class="hljs-comment">// 当前位置</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(<span class="hljs-number">5000</span>),  <span class="hljs-comment">// 半径</span><br>        RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)  <span class="hljs-comment">// 带上距离、查询范围</span><br>    );<br>    <span class="hljs-keyword">if</span> (results == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>    &#125;<br>    <span class="hljs-comment">// 搜集店铺id和距离</span><br>    List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();<br>    <span class="hljs-keyword">if</span> (list.size() &lt;= from) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList()); <br>    &#125;<br>    List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(list.size());<br>    Map&lt;String, Distance&gt; distanceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(list.size());<br>    list.stream().skip(from).forEach(result -&gt; &#123;<br>        <span class="hljs-comment">// 店铺id和距离</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopIdStr</span> <span class="hljs-operator">=</span> result.getContent().getName();<br>        ids.add(Long.valueOf(shopIdStr));<br>        <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> result.getDistance();<br>        distanceMap.put(shopIdStr, distance);<br>    &#125;);<br>    <span class="hljs-comment">// 根据店铺id查询shop</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    List&lt;Shop&gt; shops = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id, &quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>    <span class="hljs-keyword">for</span> (Shop shop : shops) &#123;<br>        shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(shops);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><p>通过二进制位上的0和1表示当天是否有签到</p><p>使用Redis的BitMap数据结构实现，BitMap基于String实现</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>SETBIT</td><td>向指定位置（offset）存入一个0或1</td></tr><tr><td>GETBIT</td><td>获取指定位置（offset）的bit值</td></tr><tr><td>BITCOUNT</td><td>统计BitMap中值为1的bit位的数量</td></tr><tr><td>BITFIELD</td><td>操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</td></tr><tr><td>BITFIELD_RO</td><td>获取BitMap中bit数组，并以十进制形式返回</td></tr><tr><td>BITOP</td><td>将多个BitMap的结果做位运算（与 、或、异或）</td></tr><tr><td>BITPOS</td><td>查找bit数组中指定范围内第一个0或1出现的位置</td></tr></tbody></table><p><strong>实例</strong></p><p>签到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 获取日期及当天是本月的第几天</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>    <span class="hljs-comment">// 写入redis</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keySuffix</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sign:&quot;</span> + userId + keySuffix;<br>    stringRedisTemplate.opsForValue().setBit(key, dayOfMonth - <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);    <span class="hljs-comment">// true表示写入1</span><br><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>统计连续签到次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 获取日期及当天是本月的第几天</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>    <span class="hljs-comment">// 获取签到记录</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keySuffix</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sign:&quot;</span> + userId + keySuffix;<br>    List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(<br>        key,<br>        BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">0</span>)<br>    );<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">// 统计到今天为止的签到数</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-literal">null</span> || num == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ((num &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>        count++;<br>        num = num &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(count);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UV"><a href="#UV" class="headerlink" title="UV"></a>UV</h4><p>Unique Visitor(独立访客量)：一天同一个人访问网站记录一次</p><p>Page View（点击量）：访问一个页面就记录一次</p><p>Hyperloglog(HLL)：概率算法，用于确定非常大的集合的基数，对集合大小的测量有一定的误差</p><p>Redis中HLL是基于string结构实现的，内存占用很小</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>PFADD key ele…</td><td>添加元素</td></tr><tr><td>PFCOUNT key</td><td>获取大小</td></tr></tbody></table><p>java中使用stringRedisTemplate.opsForHyperLogLog()来操作</p><h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><h5 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h5><p>RDB全称Redis Database Backup file（Redis数据备份文件），备份时是替换整个rdb文件</p><ul><li><p><strong>什么时候会RDB持久化</strong>：</p><ol><li><p>执行save命令，会使用主进程持久化，在此期间其他命令都会阻塞</p></li><li><p>执行bgsave（异步持久化）命令</p></li><li><p>停机时自动save</p></li><li><p>触发RDB条件，执行bgsave(配置文件中设置)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span><br><span class="hljs-attr">save</span> <span class="hljs-string">900 1  </span><br><span class="hljs-attr">save</span> <span class="hljs-string">300 10  </span><br><span class="hljs-attr">save</span> <span class="hljs-string">60 10000 </span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>相关配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># RDB文件名称</span><br><span class="hljs-attr">dbfilename</span> <span class="hljs-string">dump.rdb  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 文件保存的路径目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">./ </span><br></code></pre></td></tr></table></figure></li></ul><h5 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h5><p>AOF全称为Append Only File（追加文件），记录所有写命令到aof中</p><ul><li><p>开启aof</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 禁用rdb</span><br><span class="hljs-attr">save</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 是否开启AOF功能，默认是no</span><br><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># AOF文件的名称</span><br><span class="hljs-attr">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>持久化频率</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 表示每执行一次写命令，立即记录到AOF文件</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">always </span><br><span class="hljs-comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">everysec </span><br><span class="hljs-comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">no</span><br></code></pre></td></tr></table></figure></li><li><p>重写命令，AOF文件执行重写功能，用最少的命令达到相同效果，以压缩文件大小。</p><p><code>BGREWRITEAOF</code></p></li><li><p>重写配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">100</span><br><span class="hljs-comment"># AOF文件体积最小多大以上才触发重写 </span><br><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">64mb </span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux部署java项目</title>
    <link href="/2022/08/14/linux/linux%E9%83%A8%E7%BD%B2java%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/08/14/linux/linux%E9%83%A8%E7%BD%B2java%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="linux部署java项目"><a href="#linux部署java项目" class="headerlink" title="linux部署java项目"></a>linux部署java项目</h2><h4 id="手工部署"><a href="#手工部署" class="headerlink" title="手工部署"></a>手工部署</h4><p>项目在后台运行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nohup Command <span class="hljs-selector-attr">[Arg...]</span><span class="hljs-selector-attr">[&amp;]</span><br></code></pre></td></tr></table></figure><p>说明:</p><p>​<strong>nohup</strong>: no hang up不挂起，退出终端也不会影响程序运行</p><p>​<strong>Command</strong>: 要执行的指令</p><p>​<strong>Arg</strong>: 参数</p><p>​<strong>&amp;</strong>: 让命令在后台运行</p><p>例子:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">运行jar包并把控制台的信息输出到<span class="hljs-keyword">log</span>.<span class="hljs-keyword">log</span>文件中<br>nohup java -jar reggieTakeOut<span class="hljs-number">-1.0</span>-<span class="hljs-keyword">SNAPSHOT</span>.jar &amp;&gt; <span class="hljs-keyword">log</span>.<span class="hljs-keyword">log</span> &amp;<br></code></pre></td></tr></table></figure><p>关闭项目</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">查找进程<br>ps -ef | <span class="hljs-keyword">grep</span> java<br>杀进程<br><span class="hljs-keyword">kill</span> -<span class="hljs-number">9</span> 进程号<br></code></pre></td></tr></table></figure><h4 id="通过Shell脚本部署"><a href="#通过Shell脚本部署" class="headerlink" title="通过Shell脚本部署"></a>通过Shell脚本部署</h4><ol><li><p>不是root管理员的话可能要授予权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 八进制表示的权限 文件名<br></code></pre></td></tr></table></figure></li><li><p>执行.sh脚本文件</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类图和用例图考点</title>
    <link href="/2022/08/13/%E8%BD%AF%E8%80%83/%E7%B1%BB%E5%9B%BE%E5%92%8C%E7%94%A8%E4%BE%8B%E5%9B%BE%E8%80%83%E7%82%B9/"/>
    <url>/2022/08/13/%E8%BD%AF%E8%80%83/%E7%B1%BB%E5%9B%BE%E5%92%8C%E7%94%A8%E4%BE%8B%E5%9B%BE%E8%80%83%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="类图和用例图考点"><a href="#类图和用例图考点" class="headerlink" title="类图和用例图考点"></a>类图和用例图考点</h2><h4 id="1-类间关系"><a href="#1-类间关系" class="headerlink" title="1.类间关系"></a>1.类间关系</h4><p><strong>依赖</strong><img src="/img/post_img/1.png"></p><p>也就是使用，只要在类中用到了对方，就叫做依赖。类的成员属性、方法的返回类型、方法接收的参数类型、在方法中用到，都是依赖。<br>类A的方法中仅仅使用了类B的对象，那么类A依赖于类B。</p><p><strong>关联</strong><img src="/img/post_img/2.png"></p><p>类与类之间的关系<br>关联具有多重性：一对一关系、一对多关系、多对多关系</p><p><strong>聚合</strong><img src="/img/post_img/3.png"><br>类A中有一个成员变量类B</p><p><strong>组合</strong><img src="/img/post_img/4.png"><br>也就是类A中有类B的对象，且通过new B()的方式创建</p><p><strong>泛化（继承）</strong><img src="/img/post_img/5.png"></p><p>也就是继承</p><p><strong>实现</strong><img src="/img/post_img/6.png"></p><p>如接口的实现</p><h4 id="2-用例间关系"><a href="#2-用例间关系" class="headerlink" title="2.用例间关系"></a>2.用例间关系</h4><p><strong>包含关系(include) :</strong></p><p>基用例中使用了被包含用例，没有被包含用例的基用例是不完整的；</p><p>使用带箭头的虚线表示，在线上标注<code>&lt;&lt;include&gt;&gt;</code>，箭头从基用例指向被包含用例;</p><p><img src="/img/post_img/20161103115539825.png"></p><p><strong>扩展关系(extend)：</strong></p><p>对基用例行为的扩展，即使没有扩展用例，基用例也是完整的；</p><p>使用带箭头的虚线表示，在线上标注<code>&lt;&lt;extend&gt;&gt;</code>，箭头从扩展用例指向基用例;</p><p><img src="/img/post_img/20161103115623076.png"></p><p><strong>泛化(generlize):</strong></p><p>一个父用例可以被特化形成多个子用例，类似于实现接口；</p><p>使用实现空心箭头表示，箭头从子用例指向基用例；</p><p><img src="/img/post_img/20161103115643014.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux软件安装</title>
    <link href="/2022/08/13/linux/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2022/08/13/linux/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="linux软件安装"><a href="#linux软件安装" class="headerlink" title="linux软件安装"></a>linux软件安装</h2><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>​<strong>查看状态</strong></p><p>​systemctl status firewalld.service</p><p>​<strong>打开防火墙</strong></p><p>​systemctl start firewalld.service</p><p>​<strong>关闭防火墙</strong></p><p>​systemctl stop firewalld.service</p><p>​<strong>开启防火墙</strong></p><p>​systemctl enable firewalld.service</p><p>​<strong>禁用防火墙</strong></p><p>​systemctl disable firewalld.service</p><p>​<strong>重启防火墙</strong></p><p>​systemctl restart firewalld</p><p>​<strong>开放单个端口</strong></p><p>​firewall-cmd –zone&#x3D;public –add-port&#x3D;端口号&#x2F;tcp –permanent</p><p>​重启防火墙后生效</p><p>​<strong>关闭单个端口</strong></p><p>​firewall-cmd –zone&#x3D;public –remove-port&#x3D;端口号&#x2F;tcp –permanent</p><p>​重启防火墙后生</p><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><ol><li><p>进入网卡配置目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/</span><br></code></pre></td></tr></table></figure></li><li><p>编辑网卡配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim ifcfg-ens33<br><br>修改网卡IP<br><span class="hljs-attribute">TYPE</span>=Ethernet#设置网卡类型，“Ethernet”表示以太网<br><span class="hljs-attribute">DEVICE</span>=ens33#设置网卡的名称<br><span class="hljs-attribute">ONBOOT</span>=<span class="hljs-literal">yes</span>#设置网卡是否在 Linux 操作系统启动时激活<br><span class="hljs-attribute">BOOTPROTO</span>=static#设置网卡的配置方式，“static”表示使用静态IP地址，“dhcp”时表示动态获取地址<br><span class="hljs-attribute">IPADDR</span>=192.168.80.3#设置网卡的<span class="hljs-built_in"> IP </span>地址<br><span class="hljs-attribute">NETMASK</span>=255.255.255.0#设置网卡的子网掩码<br><span class="hljs-attribute">GATEWAY</span>=192.168.80.2#设置网卡的默认网关地址<br><span class="hljs-attribute">DNS1</span>=192.168.80.2#设置DNS服务器的<span class="hljs-built_in"> IP </span>地址<br><br>重载网卡<br>nmcli<span class="hljs-built_in"> connection </span>reload<br></code></pre></td></tr></table></figure></li></ol><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><ol><li><p>下载jdk    <a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">官网下载</a></p></li><li><p>上传jdk的二进制发布包(tar.gz)</p></li><li><p>解压安装包 </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">tar</span> <span class="hljs-operator">-</span><span class="hljs-variable">zxvf</span> 压缩包名 <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> 解压到的路径<br></code></pre></td></tr></table></figure></li><li><p>配置环境变量 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/profile<br><br>添加到文件末尾<br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_333-amd64<br><span class="hljs-built_in">export</span> <br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib <br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><br>使环境变量立即生效<br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>查看jdk是否安装成功 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h4><ol><li><p>下载tomcat     <a href="https://mirrors.huaweicloud.com/apache/tomcat/tomcat-8/v8.5.81/bin/">镜像</a></p></li><li><p>解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf apache-tomcat-<span class="hljs-number">8</span>.<span class="hljs-number">5</span>.<span class="hljs-number">81</span>.tar.gz <br></code></pre></td></tr></table></figure></li><li><p>运行bin目录下的startup.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./startup.sh<br></code></pre></td></tr></table></figure></li><li><p>查看是否启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">查看进程<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> tomcat<br></code></pre></td></tr></table></figure></li></ol><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><p>​碰到错误：为仓库 ‘appstream’ 下载元数据失败 : Cannot prepare internal mirrorlist: No URLs in mirrorlist时解决办法: <a href="https://blog.csdn.net/wykqh/article/details/123004620">CentOS Linux 8 - AppStream 错误</a></p><ol><li><p>安装<a href="https://dev.mysql.com/downloads/repo/yum/">MySQL Yum存储库</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -ivh mysql80-community-release-el8-<span class="hljs-number">4</span>.noarch.rpm<br></code></pre></td></tr></table></figure></li><li><p>禁用默认 MySQL 模块</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum module <span class="hljs-built_in">disable</span> mysql<br></code></pre></td></tr></table></figure></li><li><p>安装 MySQL</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install mysql-community-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure></li><li><p>启动 MySQL 服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis">查看mysql服务状态<br><span class="hljs-params">system</span>ctl status mysqld<br>启动 MySQL 服务<br><span class="hljs-params">system</span>ctl start mysqld<br>开机自动启动mysql服务<br><span class="hljs-params">system</span>ctl enable mysqld<br></code></pre></td></tr></table></figure></li><li><p>查看是否启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">查看mysql进程<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> mysql<br>查看已启动的服务<br>netstat -tunpl<br></code></pre></td></tr></table></figure></li><li><p>登录mysql</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">查看临时密码<br>cat /var/<span class="hljs-keyword">log</span>/mysqld.<span class="hljs-keyword">log</span> | grep <span class="hljs-keyword">password</span><br>通过临时密码登录<br>先设置一个符合要求的密码<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;MyNewPwd1!&#x27;</span>;<br>修改密码最低位数和安全等级(MySQL <span class="hljs-number">8.0</span>以上)<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.length=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password.<span class="hljs-keyword">policy</span>=<span class="hljs-number">0</span>;<br>然后可以再设置一个简单的密码<br></code></pre></td></tr></table></figure></li><li><p>开启远程连接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use mysql; <br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> =<span class="hljs-string">&#x27;root&#x27;</span>;<br><br>(mysql8<span class="hljs-number">.0</span>以上, 远程连接时出现<span class="hljs-number">2058</span>错误)<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;远程登录密码&#x27;</span>;<br><br>刷新配置<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure></li></ol><h4 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h4><p>lrzsz是一款在linux里可代替ftp上传和下载的程序</p><ol><li><p>搜索lrzsz安装包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum list lrzsz</span><br></code></pre></td></tr></table></figure></li><li><p>在线安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> lrzsz.x86_64<br></code></pre></td></tr></table></figure></li><li><p>打开文件上传界面</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rz</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><ol><li><p>搜索git安装包</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yum list git</span><br></code></pre></td></tr></table></figure></li><li><p>在线安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></table></figure></li></ol><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><ol><li><p><a href="https://archive.apache.org/dist/maven/maven-3/">官网下载</a></p></li><li><p>解压</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tar</span> -zxvf 压缩包名<br></code></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>profile<br>export MAVEN_HOME=<span class="hljs-regexp">/home/</span>cyx<span class="hljs-regexp">/maven/</span>apache-maven-<span class="hljs-number">3.6</span>.<span class="hljs-number">3</span><br>export PATH=<span class="hljs-variable">$JAVA_HOME</span><span class="hljs-regexp">/bin:$MAVEN_HOME/</span>bin:<span class="hljs-variable">$PATH</span><br><br>使配置文件立即生效<br>source <span class="hljs-regexp">/etc/</span>profile<br>查看maven版本<br>mvn -version<br></code></pre></td></tr></table></figure></li><li><p>修改maven配置文件</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">vim /conf/settings.<span class="hljs-keyword">xml</span><br><span class="hljs-title">设置本地仓库</span><br><span class="hljs-title">&lt;localRepository</span>&gt;仓库路径<span class="hljs-tag">&lt;/localRepository&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><ol><li><p><a href="https://download.redis.io/releases/">官网下载</a></p></li><li><p>上传解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">-tar -zxvf 压缩包名<br></code></pre></td></tr></table></figure></li><li><p>安装依赖环境gcc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum install gcc-c++<br></code></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs linux">到redis目录下<br>make<br>到redis/src目录下<br>make install<br></code></pre></td></tr></table></figure></li><li><p>修改redis.conf文件中的一些配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 绑定地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问</span><br><span class="hljs-built_in">bind</span> 0.0.0.0<br><span class="hljs-comment"># 数据库数量，设置为1</span><br>databases 1<br></code></pre></td></tr></table></figure></li><li><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止redis服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli shutdown<br></code></pre></td></tr></table></figure></li></ol><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><ol><li><p>安装python-pip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">yum -y install epel-release<br>dnf install -y python3<br>dnf install python3-paramiko<br></code></pre></td></tr></table></figure></li><li><p>安装docker-compose</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">pip3 install docker-compose<br></code></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">docker-compose --version<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据流图考点</title>
    <link href="/2022/08/12/%E8%BD%AF%E8%80%83/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE%E8%80%83%E7%82%B9/"/>
    <url>/2022/08/12/%E8%BD%AF%E8%80%83/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE%E8%80%83%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="数据流图考点"><a href="#数据流图考点" class="headerlink" title="数据流图考点"></a>数据流图考点</h2><h4 id="1-黑洞，白洞，灰洞"><a href="#1-黑洞，白洞，灰洞" class="headerlink" title="1.黑洞，白洞，灰洞"></a>1.黑洞，白洞，灰洞</h4><p><strong>数据平衡原则</strong>: </p><p>加工的输入数据流和输出数据流要平衡，即保证加工的输出数据流都有其对应的输入数据流与输出数据流。父图和子图之间的数据流必须保持一致，如果上层数据流底部某加工的一个输入（输出）数据流对应于下层数据流图中若干个输入（输出）数据流，而且下层数据流中这些数据流的成分之和正好等于上层数据流底部的这个数据流，那么，它仍算是平衡的。</p><p><strong>分解时三种常见错误</strong>:</p><p>黑洞: 只有输入数据流,没有输出数据流的数据加工</p><p>奇迹: 只有输出数据流,没有输入数据流的数据加工</p><p>灰洞: 输入数据流无法通过加工产生输出流</p><h4 id="2-找缺失的数据流"><a href="#2-找缺失的数据流" class="headerlink" title="2.找缺失的数据流"></a>2.找缺失的数据流</h4><p>三步：</p><ol><li>从父图中找子图是否有缺失的数据流</li><li>找是否有加工缺少输入或输出</li><li>从题的说明中找加工的数据流</li></ol><p>数据流至少有一头为加工</p><h4 id="3-结构化语言描述加工逻辑"><a href="#3-结构化语言描述加工逻辑" class="headerlink" title="3.结构化语言描述加工逻辑"></a>3.结构化语言描述加工逻辑</h4><ul><li><p>选择语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 选择语句">IF 条件 THEN<br>    分支内容<br>ELSE IF 条件 THEN<br>    分支内容<br>ELSE<br>    分支内容<br>ENDIF<br></code></pre></td></tr></table></figure></li><li><p>循环语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 循环语句">WHILE 条件<br>DO<br>&#123;<br>    IF 条件 THEN<br>        内容<br>    ENDIF<br>&#125;<br>ENDDO<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-父图和子图如何保持数据流图平衡"><a href="#4-父图和子图如何保持数据流图平衡" class="headerlink" title="4.父图和子图如何保持数据流图平衡"></a>4.父图和子图如何保持数据流图平衡</h4><p>父图中某加工的输入输出数据流必须与其子图的输入输出数据流在数量和名字上相同，或者父图中的一个输入（或输出）数据流应对应于子图中几个输入（或输出）数据流并集，而子图中组成这些数据流的数据项正好是父图中的这一个数据流</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用命令</title>
    <link href="/2022/08/12/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/12/linux/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><table><thead><tr><th align="left"></th><th>命令</th><th>对应单词</th><th>作用</th></tr></thead><tbody><tr><td align="left">1</td><td>ls [-a所有-l详细]</td><td>list</td><td>查看当前目录内容</td></tr><tr><td align="left">2</td><td>pwd</td><td>print work directory</td><td>查看当前所在目录</td></tr><tr><td align="left">3</td><td>cd 目录名</td><td>change directory</td><td>切换目录</td></tr><tr><td align="left">4</td><td>mkdir  目录名</td><td>make directory</td><td>创建目录</td></tr><tr><td align="left">5</td><td>rmdir [-p嵌套删除] 目录名</td><td>remove directory</td><td>删除空目录</td></tr><tr><td align="left">6</td><td>rm [-r所有-f无需确认]目录名</td><td>remove</td><td>可以删除非空目录</td></tr><tr><td align="left">7</td><td>cp [-r拷贝目录] 源目录 目标目录</td><td>copy</td><td>拷贝目录</td></tr><tr><td align="left">8</td><td>mv 源目录 目标目录&#x2F;[新目录名]&#x2F;</td><td>move</td><td>移动目录</td></tr></tbody></table><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><table><thead><tr><th></th><th>命令</th><th>对应单词</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>touch 文件名</td><td>touch</td><td>若文件不存在则创建目录</td></tr><tr><td>2</td><td>rm 文件名</td><td>remove</td><td>删除文件</td></tr><tr><td>3</td><td>cat [-n显示行数] 文件名</td><td></td><td>显示文件所有内容</td></tr><tr><td>4</td><td>more 文件名</td><td></td><td>分页显示文件内容(回车下一行,空格下一屏,b上一屏,q退出)</td></tr><tr><td>5</td><td>tail [-f动态显示] 文件名</td><td></td><td>读取文件末尾内容</td></tr><tr><td>6</td><td>cp 源文件 目标目录</td><td>copy</td><td>拷贝文件</td></tr><tr><td>7</td><td>mv 源文件 目标目录&#x2F;[新文件名]</td><td>move</td><td>移动文件</td></tr></tbody></table><h4 id="压缩打包-x2F-解压"><a href="#压缩打包-x2F-解压" class="headerlink" title="压缩打包&#x2F;解压"></a>压缩打包&#x2F;解压</h4><p>tar [-zcxvf] 压缩包名 打包的文件</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-c</td><td>将多个文件或目录进行打包。</td></tr><tr><td>-z</td><td>通过gzip来压缩&#x2F;解压</td></tr><tr><td>-f 包名</td><td>指定包的文件名。包的扩展名是用来给管理员识别格式的，所以一定要正确指定扩展名；</td></tr><tr><td>-v</td><td>显示打包文件过程；</td></tr><tr><td>-x</td><td>解压缩</td></tr></tbody></table><h4 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h4><p>vi&#x2F;vim 文件名</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><table><thead><tr><th>语法</th><th>作用</th></tr></thead><tbody><tr><td>find 目录名 -name 文件名</td><td>通过文件名来模糊查找文件</td></tr><tr><td>grep 单词 文件名</td><td>从文件中查找文本内容</td></tr></tbody></table><h4 id="选项对应的单词"><a href="#选项对应的单词" class="headerlink" title="选项对应的单词"></a>选项对应的单词</h4><p>-a<br>all : 全部，所有 (ls , lsattr , uname)<br>archive : 存档 (cp , rsync)<br>append : 附加 (tar -A , 7z)</p><p>-c<br>commands : 执行命令，带参数 (bash , ksh , python)<br>create : 创建 (tar)</p><p>-f<br>force : 强制，不经确认(cp , rm ,mv)<br>file : 文件，带参数 (tar)</p><p>-h<br>–help : 帮助<br>human readable : 人性化显示(ls , du , df)<br>headers : 头部</p><p>-i<br>interactive : 交互模式，提示(rm , mv)<br>include : 包含</p><p>-k<br>keep : 保留</p><p>-l<br>long listing format : 长格式(ls)<br>list : 列表<br>load : 读取 (gcc , emacs)</p><p>-m<br>message : 消息 (cvs)<br>manual : 手册 (whereis)<br>create home : 创建 home 目录 (usermod , useradd)</p><p>-n<br>number : 行号、编号 (cat , head , tail , pstree , lspci)<br>no : (useradd , make)</p><p>-p<br>parents 需要时创建上层目录，如目录早已存在则不当作错误</p><p>-q<br>quiet : 静默</p><p>-r<br>reverse : 反转<br>recursive : 递归 (cp , rm , chmod -R)</p><p>-u<br>user : 用户名、UID，带参数</p><p>-v<br>verbose : 冗长<br>version : 版本</p><p>-x<br>exclude : 排除 (tar , zip)</p><p>-y<br>yes</p><p>-z<br>zip : 启用压缩 (bzip , tar , zcat , zip , cvs)</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/2022/08/10/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/10/git/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h4 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h4><p>设置用户信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;用户名&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>查看配置信息</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>创建git本地仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>获取git远程仓库</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">仓库地址</span><br></code></pre></td></tr></table></figure><p>将文件存入暂存区</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> *或者文件名<br></code></pre></td></tr></table></figure><p>将文件取消暂存 &#x2F; 切换版本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> *或者文件名<br></code></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span> <br></code></pre></td></tr></table></figure><p>提交到版本库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;备注&quot;</span><br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h4 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h4><p>查看远程仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><p>添加远程仓库</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git remote <span class="hljs-keyword">add </span><span class="hljs-keyword">origin </span>仓库地址<br></code></pre></td></tr></table></figure><p>拉取远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git pull <span class="hljs-built_in">origin</span> 远程分支名<br></code></pre></td></tr></table></figure><p>推送到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 远程分支名<br></code></pre></td></tr></table></figure><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><p>查看分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>分支名<br></code></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 分支名<br></code></pre></td></tr></table></figure><p>推送到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 分支名<br></code></pre></td></tr></table></figure><p>合并分支</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 分支名<br></code></pre></td></tr></table></figure><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>列出已有的标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span><br></code></pre></td></tr></table></figure><p>创建标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">tag</span> <span class="hljs-title">标签名</span><br></code></pre></td></tr></table></figure><p>将标签推送至远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 标签名<br></code></pre></td></tr></table></figure><p>取出创建这个标签时的代码</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 新的分支名 标签名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在SpringBoot中使用过滤器</title>
    <link href="/2022/08/09/spring/springboot/%E5%9C%A8SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2022/08/09/spring/springboot/%E5%9C%A8SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="在SpringBoot中使用过滤器"><a href="#在SpringBoot中使用过滤器" class="headerlink" title="在SpringBoot中使用过滤器"></a>在SpringBoot中使用过滤器</h2><h4 id="1-实现Filter接口"><a href="#1-实现Filter接口" class="headerlink" title="1.实现Filter接口"></a>1.实现<code>Filter</code>接口</h4><p>可以重写Filter中的三个方法</p><table><thead><tr><th>name</th><th>说明</th></tr></thead><tbody><tr><td>init(FilterConfig)</td><td>创建filter时会调用一次</td></tr><tr><td>doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</td><td>拦截客户端请求时调用</td></tr><tr><td>destroy()</td><td>销毁filter时会调用一次</td></tr></tbody></table><h4 id="2-注册拦截器"><a href="#2-注册拦截器" class="headerlink" title="2.注册拦截器"></a>2.注册拦截器</h4><p>方式1: 注解注册</p><p>通过<code>@WebFilter(filterName, urlPatterns)</code>注解来说明这是一个过滤器</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>filterName</td><td>过滤器名字</td></tr><tr><td>urlPatterns</td><td>拦截的路径</td></tr></tbody></table><p>然后在主启动类上使用<code>@ServletComponentScan</code>注解开启扫描</p><p>加上这个注解可以扫描<code>@Servlet</code>、<code>@Filter</code>、<code>@Listener</code></p><p>方式2: 配置类方式注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterConfig</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Filter1 filter;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">filter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//通过FilterRegistrationBean注入Bean</span><br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>        <span class="hljs-comment">//设置过滤器</span><br>        registration.setFilter(filter);<br>        <span class="hljs-comment">//设置过滤器名和拦截路径</span><br>        registration.setName(<span class="hljs-string">&quot;filter&quot;</span>);<br>        registration.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>        <span class="hljs-comment">//设置优先级别</span><br>        registration.setOrder(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> registration;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">//路径匹配器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">PATH_MATCHER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) servletResponse;<br><br>        <span class="hljs-comment">//获取请求的uri</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><br>        <span class="hljs-comment">//判断是否需要处理</span><br>        String[] urls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-comment">//不需要处理的路径</span><br>                <span class="hljs-string">&quot;/employee/login&quot;</span>,<br>                <span class="hljs-string">&quot;/employee/logout&quot;</span>,<br>                <span class="hljs-string">&quot;/backend/**&quot;</span>,<br>                <span class="hljs-string">&quot;/front/**&quot;</span>,<br>                <span class="hljs-string">&quot;/common/**&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">if</span> (check(urls, requestURI)) &#123;<br>            <span class="hljs-comment">//不用处理, 放行</span><br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (request.getSession().getAttribute(<span class="hljs-string">&quot;employee&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//网页端验证有没有登录</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> (Long) request.getSession().getAttribute(<span class="hljs-string">&quot;employee&quot;</span>);<br>            BaseContext.setCurrentId(id);<br>            <span class="hljs-comment">//已登录, 放行</span><br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//未登录, 拦截</span><br>            response.getWriter().write(JSON.toJSONString(R.error(<span class="hljs-string">&quot;NOTLOGIN&quot;</span>)));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配请求路径是否不需要处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> urls</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> requestURI</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(String[] urls, String requestURI)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String url : urls) &#123;<br>            <span class="hljs-keyword">if</span> (PATH_MATCHER.match(url, requestURI)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
      <category>springBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MP公共字段自动填充</title>
    <link href="/2022/08/08/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/"/>
    <url>/2022/08/08/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mybatis-plus/MP%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h2 id="MP公共字段自动填充"><a href="#MP公共字段自动填充" class="headerlink" title="MP公共字段自动填充"></a>MP公共字段自动填充</h2><ol><li>在需要自动填充的字段上添加<code>@TableField(fill)</code>注解</li></ol><p>参数:</p><p>fill</p><table><thead><tr><th>可填入的值</th><th>说明</th></tr></thead><tbody><tr><td>FieldFill.INSERT</td><td>插入表时填充</td></tr><tr><td>FieldFill.UPDATE</td><td>更新时填充</td></tr><tr><td>FieldFill.INSERT_UPDATE</td><td>更新和插入表时填充</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><span class="hljs-comment">//插入表时时填充</span><br><span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><span class="hljs-comment">//更新和插入表时填充</span><br><span class="hljs-keyword">private</span> LocalDateTime updateTime;<br><br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><span class="hljs-comment">//插入表时时填充</span><br><span class="hljs-keyword">private</span> Long createUser;<br><br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><span class="hljs-comment">//更新和插入表时填充</span><br><span class="hljs-keyword">private</span> Long updateUser;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现<code>MetaObjectHandler</code>接口， 重写<code>insertFill()</code>和<code>updateFill()</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-comment">//插入时填充的字段名及填充的值</span><br>        metaObject.setValue(<span class="hljs-string">&quot;createTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        <span class="hljs-comment">//更新时填充的字段名及填充的值</span><br>        metaObject.setValue(<span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.now());<br>        metaObject.setValue(<span class="hljs-string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>数据库</category>
      
      <category>mysql</category>
      
      <category>mybatis-plus</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.v-if和v-show区别</title>
    <link href="/2022/08/05/%E5%89%8D%E7%AB%AF/vue/7.v-if%E5%92%8Cv-show%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/08/05/%E5%89%8D%E7%AB%AF/vue/7.v-if%E5%92%8Cv-show%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="7-v-if和v-show区别"><a href="#7-v-if和v-show区别" class="headerlink" title="7.v-if和v-show区别"></a>7.v-if和v-show区别</h2><p><code>v-if</code>只有条件为真时才渲染到dom上,条件为假时从DOM中销毁</p><p><code>v-for</code>是一次性全都记载到DOM中,通过<code>display</code>来控制是否展示元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;ok&#x27;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;!ok&#x27;</span>&gt;</span>bbb<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">ok</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ok&#x3D;true时</p><p><img src="/img/post_img/SLK%25HS%5DU1$G4N8Z3NDIE3H7.png"></p><p>ok&#x3D;false时</p><p><img src="/img/post_img/20220805164227.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.Vue绑定样式</title>
    <link href="/2022/08/03/%E5%89%8D%E7%AB%AF/vue/6.Vue%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
    <url>/2022/08/03/%E5%89%8D%E7%AB%AF/vue/6.Vue%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="6-Vue绑定样式"><a href="#6-Vue绑定样式" class="headerlink" title="6.Vue绑定样式"></a>6.Vue绑定样式</h2><h3 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h3><p>通过<code>v-bind:class</code>来绑定class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&#x27;&#123;active: isActive&#125;&#x27;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span><span class="hljs-comment">//当isActive为true时active生效</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="绑定css"><a href="#绑定css" class="headerlink" title="绑定css"></a>绑定css</h3><p>通过<code>v-bind:style</code>来绑定css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&#x27;styleObject&#x27;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">styleObject</span>: &#123;<span class="hljs-comment">//通过声明数据对象来绑定css</span></span><br><span class="language-javascript">                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;20px&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>:  </p><ol><li>原来的<code>class</code>&#x2F;<code>style</code>不会被覆盖掉</li><li>可以用<code>[&#123;...&#125;. &#123;...&#125;, ...]</code>来绑定多个</li><li>也可以声明数据对象来绑定多个</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.Vue计算属性和监听器</title>
    <link href="/2022/08/02/%E5%89%8D%E7%AB%AF/vue/5.Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <url>/2022/08/02/%E5%89%8D%E7%AB%AF/vue/5.Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="5-Vue计算属性和监听器"><a href="#5-Vue计算属性和监听器" class="headerlink" title="5.Vue计算属性和监听器"></a>5.Vue计算属性和监听器</h2><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>用<code>computed</code>来定义计算属性</p><p>作用: 调用计算属性时会显示return的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;print&#125;&#125;<span class="hljs-comment">&lt;!-- Hello World --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">print</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> + <span class="hljs-string">&quot; World&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以在计算属性中定义get和set，当给计算属性赋值时会调用set，使用计算属性则会调用get</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;print&#125;&#125;<span class="hljs-comment">&lt;!-- Hi World --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">print</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> + <span class="hljs-string">&quot; World&quot;</span>;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newMsg</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = newMsg;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    vm.<span class="hljs-property">print</span> = <span class="hljs-string">&quot;Hi&quot;</span>;<span class="hljs-comment">//调用了set</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>: 不同于<code>methods</code>, 计算属性是有缓存的，只有值改变时才会重新计算</p><h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><p>用<code>watch</code>来定义侦听器</p><p>作用: 当值发生改变时会调用侦听器的方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldVal + <span class="hljs-string">&quot;--&gt;&quot;</span> + newVal);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    vm.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;Hi&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.Vue钩子函数</title>
    <link href="/2022/07/30/%E5%89%8D%E7%AB%AF/vue/4.Vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    <url>/2022/07/30/%E5%89%8D%E7%AB%AF/vue/4.Vue%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="4-Vue钩子函数"><a href="#4-Vue钩子函数" class="headerlink" title="4.Vue钩子函数"></a>4.Vue钩子函数</h2><p>Vue对象初始化过程调用的函数称为<strong>钩子函数</strong>;</p><p>不应该使用箭头函数来定义一个生命周期方法;</p><p>钩子函数调用的时机:</p><ol><li><p>new Vue()</p></li><li><p><font color='green'>beforeCreate     (数据侦听和事件&#x2F;侦听器的配置之前)</font></p></li><li><p><font color='green'>created               (数据侦听和事件&#x2F;侦听器的配置之后)</font></p></li><li><p><font color='blue'>beforeMount     (数据挂载前)</font></p></li><li><p><font color='blue'>mounted            (数据挂载后, 视图的数据被Vue的替换)</font></p></li><li><p><font color='purple'>beforeUpdate   (数据改变,加载到视图前)</font></p></li><li><p><font color='purple'>updated             (加载到视图后)</font></p></li><li><p><font color='red'>beforeDestroy  (调用vm.$destroy()后,Vue对象销毁前)</font></p></li><li><p><font color='red'>destroy               (Vue对象销毁后)</font></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;a&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">beforeCreate</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeCreate&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;created&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">beforeMount</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeMount&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mounted&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">beforeUpdate</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeUpdate&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">updated</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;updated&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">activated</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;activated&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">deactivated</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;deactivated&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">beforeDestroy</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeDestroy&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">destroyed</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;destroyed&#x27;</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-attr">errorCaptured</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;errorCaptured&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    vm.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;b&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&#x27;vm.$destroy()&#x27;</span>, <span class="hljs-number">2000</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">API — Vue.js (vuejs.org)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.Vue数据和方法</title>
    <link href="/2022/07/30/%E5%89%8D%E7%AB%AF/vue/3.Vue%E6%95%B0%E6%8D%AE%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <url>/2022/07/30/%E5%89%8D%E7%AB%AF/vue/3.Vue%E6%95%B0%E6%8D%AE%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="3-Vue数据和方法"><a href="#3-Vue数据和方法" class="headerlink" title="3.Vue数据和方法"></a>3.Vue数据和方法</h2><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><h5 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h5><p><strong>响应式</strong>: data中的property改变时，视图也会更新为新的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;// 1 ---&gt; 2<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">message</span>: <span class="hljs-number">1</span>&#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: data</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    vm.<span class="hljs-property">message</span> = <span class="hljs-number">2</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>Object.freeze()</code>可以使property变为<strong>非响应式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;// 仍然为1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">message</span>: <span class="hljs-number">1</span>&#125;;</span><br><span class="language-javascript">    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(data);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: data</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    vm.<span class="hljs-property">message</span> = <span class="hljs-number">2</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以使用 <code>v-once</code>来一次性插值,之后就不会更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span> <span class="hljs-attr">v-once</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;// 仍然为1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">message</span>: <span class="hljs-number">1</span>&#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: data</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    vm.<span class="hljs-property">message</span> = <span class="hljs-number">2</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="展示原始html"><a href="#展示原始html" class="headerlink" title="展示原始html"></a>展示原始html</h5><p>用插值表达式的话会按字符串输出，使用<code>v-html</code>可以展示原始html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&#x27;message&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;&lt;font color=&quot;red&quot;&gt;a&lt;/font&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="在插值表达式里使用js"><a href="#在插值表达式里使用js" class="headerlink" title="在插值表达式里使用js"></a>在插值表达式里使用js</h5><p><code>&#123;&#123;&#125;&#125;</code>里面还可以使用单个js的表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;message + 10&#125;&#125;//11<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h5><p><code>v-bind:...</code> 可以缩写为<code>:...</code></p><p><code>v-on:...</code>可以缩写为<code>@...</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&#x27;class1&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;click1&#x27;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">class1</span>: <span class="hljs-string">&#x27;class1&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            click1 : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;被点击了&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>前缀带<code>$</code>的为Vue提供的方法</p><p>如:</p><p>$watch(prop, function), 当prop值改变时调用function</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    vm.$watch(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;oldVal:&#x27;</span> + oldVal + <span class="hljs-string">&#x27;, newVal:&#x27;</span> + newVal);</span><br><span class="language-javascript">    &#125;) </span><br><span class="language-javascript"></span><br><span class="language-javascript">    vm.<span class="hljs-property">message</span> = <span class="hljs-number">2</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property">API — Vue.js (vuejs.org)</a></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.Vue入门</title>
    <link href="/2022/07/29/%E5%89%8D%E7%AB%AF/vue/2.Vue%E5%85%A5%E9%97%A8/"/>
    <url>/2022/07/29/%E5%89%8D%E7%AB%AF/vue/2.Vue%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="2-Vue入门"><a href="#2-Vue入门" class="headerlink" title="2.Vue入门"></a>2.Vue入门</h2><h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><p><code>&#123;&#123;...&#125;&#125;</code>  :  文本插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 Attribute</p><h5 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h5><p>v-bind:title : 将元素的 <code>title</code> 和 Vue 实例的 <code>message</code> 绑定起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&#x27;message&#x27;</span>&gt;</span>动态绑定的信息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app2&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;页面加载与&#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleString</span>()</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><p>v-if : 条件控制,当Vue 实例的seen为true时显示元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;seen&quot;</span>&gt;</span>aaaaaaa<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app3&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">seen</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><p>v-for : 遍历Vue中绑定的数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;</span><br>                &#123;&#123; todo.text &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app4&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">todos</span>: [</span><br><span class="language-javascript">                &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;,</span><br><span class="language-javascript">                &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;,</span><br><span class="language-javascript">                &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h5><p>v-on添加事件监听器</p><p>v-on:click : 添加单击事件监听</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app5&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app5&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">reverseMessage</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>v-model : 将输入框和Vue中实例绑定起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app6&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.Vue下载</title>
    <link href="/2022/07/29/%E5%89%8D%E7%AB%AF/vue/1.Vue%E4%B8%8B%E8%BD%BD/"/>
    <url>/2022/07/29/%E5%89%8D%E7%AB%AF/vue/1.Vue%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Vue下载"><a href="#1-Vue下载" class="headerlink" title="1.Vue下载"></a>1.Vue下载</h2><h3 id="通过js"><a href="#通过js" class="headerlink" title="通过js"></a>通过js</h3><p>vue教程</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cn.vuejs.org<span class="hljs-regexp">/v2/gui</span>de/<br></code></pre></td></tr></table></figure><p>vue下载链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cn.vuejs.org<span class="hljs-regexp">/js/</span>vue.js<br></code></pre></td></tr></table></figure><p>导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="通过npm"><a href="#通过npm" class="headerlink" title="通过npm"></a>通过npm</h3><ul><li><p>npm安装vue脚手架</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue ui</span><br></code></pre></td></tr></table></figure></li><li><p>之后会进入ui界面进行创建项目</p><p><img src="/img/post_img/npm%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE1.png"></p><p><img src="/img/post_img/npm%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE2.png"></p><p><img src="/img/post_img/npm%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE3.png"></p></li><li><p>之后就会自己创建了，如果报错试试管理员打开cmd来创建</p></li><li><p><a href="https://devtools.vuejs.org/guide/installation.html">安装</a>开发者工具</p></li></ul><p><strong>运行项目</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> serve<br></code></pre></td></tr></table></figure><p><strong>修改端口和添加代理</strong></p><p>官方文档：<a href="https://webpack.js.org/configuration/dev-server/#devserverport">DevServer | webpack</a></p><ul><li><p>在vue.config.js中修改配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-comment">// 配置端口</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7070</span>,<br>    <span class="hljs-comment">// 添加代理</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bean的依赖属性配置管理</title>
    <link href="/2022/07/26/spring/bean%E7%9A%84%E4%BE%9D%E8%B5%96%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2022/07/26/spring/bean%E7%9A%84%E4%BE%9D%E8%B5%96%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="bean的依赖属性配置管理"><a href="#bean的依赖属性配置管理" class="headerlink" title="bean的依赖属性配置管理"></a>bean的依赖属性配置管理</h2><p>在配置文件中设置值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">zoo:</span><br>  <span class="hljs-attr">cat:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;zs&quot;</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;ls&quot;</span><br></code></pre></td></tr></table></figure><p>定义一个类，通过<strong>ConfigurationProperties注解</strong>来读取和封装配置中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;zoo&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZooProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><p>在需要使用配置的地方使用<strong>EnableConfigurationProperties注解</strong>来注入配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableConfigurationProperties(ZooProperties.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSpringboot23BeanPropApplication</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ZooProperties zooProperties;<br>&#125;<br></code></pre></td></tr></table></figure><p>在需要使用属性类的位置通过注解<strong>EnableConfigurationProperties注解</strong>加载bean，而不要直接在属性配置类上定义bean，<strong>减少资源加载的数量</strong>，因需加载而不要饱和式加载。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bean的加载控制</title>
    <link href="/2022/07/24/spring/Bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/07/24/spring/Bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="bean的加载控制"><a href="#bean的加载控制" class="headerlink" title="bean的加载控制"></a>bean的加载控制</h2><p><strong>springboot</strong>提供了几个注解，当条件满足时才加载相应的bean</p><h4 id="ConditionalOnClass-x2F-ConditionalOnMissingClass"><a href="#ConditionalOnClass-x2F-ConditionalOnMissingClass" class="headerlink" title="@ConditionalOnClass &#x2F; @ConditionalOnMissingClass"></a>@ConditionalOnClass &#x2F; @ConditionalOnMissingClass</h4><p>当虚拟机中有指定类时加载bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnClass(name = &quot;com.xw.bean.Dog&quot;)</span><br><span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>当虚拟机中有没有指定类时加载bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingClass(&quot;com.xw.bean.Dog&quot;)</span><br><span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConditionalOnBean-x2F-ConditionalOnMissingBean"><a href="#ConditionalOnBean-x2F-ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnBean &#x2F; @ConditionalOnMissingBean"></a>@ConditionalOnBean &#x2F; @ConditionalOnMissingBean</h4><p>当加载了指定名称的bean时加载bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(name = &quot;dog&quot;)</span><br><span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>当没有加载了指定名称的bean时加载bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;dog&quot;)</span><br><span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一系列的条件控制注解</p><p><img src="/img/post_img/image-20220724133812086.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="/2022/07/23/git/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/07/23/git/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> 或 hexo s<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th></th></tr></thead><tbody><tr><td>-p</td><td>post,自定义端口</td></tr><tr><td>-l</td><td>log,启动日志</td></tr></tbody></table><p>默认访问网址<code>http://localhost:4000/</code></p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span> 或 hexo g<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th></th></tr></thead><tbody><tr><td>-d</td><td>deploy, 生成后立即部署到服务器</td></tr><tr><td>-f</td><td>force,强制重新生成全部文件,不加则只生成改动的文件</td></tr></tbody></table><h4 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo <span class="hljs-keyword">deploy</span> 或 hexo d<br></code></pre></td></tr></table></figure><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><h4 id="Hexo版本"><a href="#Hexo版本" class="headerlink" title="Hexo版本"></a>Hexo版本</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo <span class="hljs-built_in">version</span> 或 hexo -v<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bean的加载方式(2)</title>
    <link href="/2022/07/23/spring/bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F(2)/"/>
    <url>/2022/07/23/spring/bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F(2)/</url>
    
    <content type="html"><![CDATA[<h2 id="bean的加载方式-2"><a href="#bean的加载方式-2" class="headerlink" title="bean的加载方式(2)"></a>bean的加载方式(2)</h2><h4 id="5-容器初始化完成后手动加载bean"><a href="#5-容器初始化完成后手动加载bean" class="headerlink" title="5.容器初始化完成后手动加载bean"></a>5.容器初始化完成后手动加载bean</h4><p>通过AnnotationConfigApplicationContext的<strong>register</strong>方法，可以在容器初始化完成后手动加载bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig5.class);<br>        <span class="hljs-comment">//上下文容器对象已经初始化完毕后，手工加载bean</span><br>        ctx.register(Cat.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以用<strong>registerBean</strong>方法指定bean的名称和参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig5.class);<br><br>        <span class="hljs-comment">//容器中有同名称的bean时会覆盖之前的</span><br>        app.registerBean(<span class="hljs-string">&quot;tom&quot;</span>, Cat.class, <span class="hljs-number">0</span>);<br>        app.registerBean(<span class="hljs-string">&quot;tom&quot;</span>, Cat.class, <span class="hljs-number">1</span>);<br>        app.registerBean(<span class="hljs-string">&quot;tom&quot;</span>, Cat.class, <span class="hljs-number">2</span>);<br><br>        System.out.println(app.getBean(<span class="hljs-string">&quot;tom&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            结果</span><br><span class="hljs-comment">            Cat&#123;id=&#x27;2&#x27;&#125;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="6-在容器初始化过程中加载bean"><a href="#6-在容器初始化过程中加载bean" class="headerlink" title="6.在容器初始化过程中加载bean"></a>6.在容器初始化过程中加载bean</h4><h5 id="1-ImportSelector接口"><a href="#1-ImportSelector接口" class="headerlink" title="(1)ImportSelector接口"></a>(1)ImportSelector接口</h5><p>实现<strong>ImportSelector</strong>接口,selectImports方法的返回值会被注入到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> importingClassMetadata.hasAnnotation(<span class="hljs-string">&quot;org.springframework.context.annotation.ComponentScan&quot;</span>);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.xw.bean.Dog&quot;</span>&#125;;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入Selector配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&quot;com.xw.bean&quot;)</span><br><span class="hljs-meta">@Import(MySelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig6</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig6.class);<br><br>        String[] names = app.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            结果</span><br><span class="hljs-comment">            com.xw.bean.Dog</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-ImportBeanDefinitionRegistrar接口"><a href="#2-ImportBeanDefinitionRegistrar接口" class="headerlink" title="(2)ImportBeanDefinitionRegistrar接口"></a>(2)ImportBeanDefinitionRegistrar接口</h5><p>bean的加载不是一个简简单单的对象，spring中定义了一个叫做<strong>BeanDefinition</strong>的东西，它才是控制bean初始化加载的核心</p><p><strong>ImportBeanDefinitionRegistrar</strong>相比于ImportSelector，对注入的bean有更大的操作空间</p><p>实现ImportBeanDefinitionRegistrar接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRegister</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//获取bean的beanDefinition</span><br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder.rootBeanDefinition(Dog.class).getBeanDefinition();<br>        <span class="hljs-comment">//注入到容器中</span><br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;dog&quot;</span>, beanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入Registrar配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&quot;com.xw.bean&quot;)</span><br><span class="hljs-meta">@Import(MyRegister.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig6</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig6.class);<br><br>        String[] names = app.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            结果</span><br><span class="hljs-comment">            dog</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="7-对容器中bean的最终裁定"><a href="#7-对容器中bean的最终裁定" class="headerlink" title="7.对容器中bean的最终裁定"></a>7.对容器中bean的最终裁定</h4><p>postProcessor为最后执行的对容器中bean的注册</p><p>实现<strong>BeanDefinitionRegistryPostProcessor</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistryPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">//获取bean的beanDefinition</span><br>        <span class="hljs-type">AbstractBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> BeanDefinitionBuilder.rootBeanDefinition(Cat.class).getBeanDefinition();<br>        <span class="hljs-comment">//将之前的dog删掉换成cat</span><br>        registry.removeBeanDefinition(<span class="hljs-string">&quot;dog&quot;</span>);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;cat&quot;</span>, beanDefinition);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>导入PostProcessor配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&quot;com.xw.bean&quot;)</span><br><span class="hljs-meta">@Import(&#123;MyRegister.class, MyPostProcessor.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig6</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取bean</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bean">public class App6 &#123;<br>    public static void main(String[] args) &#123;<br>        AnnotationConfigApplicationContext app = new AnnotationConfigApplicationContext(SpringConfig6.class);<br><br>        String[] names = app.getBeanDefinitionNames();<br>        for (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>        /*<br>            结果<br>            cat<br>        */<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bean的加载方式(1)</title>
    <link href="/2022/07/22/spring/bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F(1)/"/>
    <url>/2022/07/22/spring/bean%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="bean的加载方式-1"><a href="#bean的加载方式-1" class="headerlink" title="bean的加载方式(1)"></a>bean的加载方式(1)</h2><h4 id="1-lt-bean-gt-标签"><a href="#1-lt-bean-gt-标签" class="headerlink" title="1.&lt;bean/&gt;标签"></a>1.<code>&lt;bean/&gt;</code>标签</h4><p>通过xml配置来注入bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--xml方式声明自己开发的bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xw.bean.Cat&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.xw.bean.Dog&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--xml方式声明第三方开发的bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-config.xml&quot;</span>);<br>        String[] names = app.getBeanDefinitionNames(); <span class="hljs-comment">// 获取容器中所有bean的名称</span><br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cat<br>com<span class="hljs-selector-class">.xw</span><span class="hljs-selector-class">.bean</span>.Dog#<span class="hljs-number">0</span><br>dataSource<br>com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.pool</span>.DruidDataSource#<span class="hljs-number">0</span><br>com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.druid</span><span class="hljs-selector-class">.pool</span>.DruidDataSource#<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="2-注解定义bean"><a href="#2-注解定义bean" class="headerlink" title="2.注解定义bean"></a>2.注解定义bean</h4><p>可以使用的注解有@Component以及三个衍生注解@Service、@Controller、@Repository。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;jerry&quot;)</span><span class="hljs-comment">//可以给bean起个名字</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>加载第三方bean时可通过@bean来注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DbConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后记得开启注解扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    &quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定扫描加载bean的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.xw.bean,com.xw.config&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-ComponentScan扫描bean"><a href="#3-ComponentScan扫描bean" class="headerlink" title="3.@ComponentScan扫描bean"></a>3.@ComponentScan扫描bean</h4><p>使用<strong>FactoryBean接口</strong></p><p>造出来的bean并不是DogFactoryBean，而是Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DogFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;Dog&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-comment">//可以对对象进行一系列操作后再注入</span><br>        <span class="hljs-keyword">return</span> d;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> Dog.class;<br>    &#125;<br>    <span class="hljs-comment">//是否单例</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个类并使用**@ComponentScan**替代原始xml配置中的包扫描这个动作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&#123;&quot;com.xw.bean&quot;,&quot;com.xw.config&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig3</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DogFactoryBean <span class="hljs-title function_">dog</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//通过FactoryBean来注入，可以在对象初始化前做一些事情</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DogFactoryBean</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<strong>AnnotationConfigApplicationContext</strong>获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig3.class);<br>        String[] names = app.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>可用**@ImportResource**将xml配置文件中的bean和配置类中的bean融合在一起，在配置类上直接写上要被融合的xml配置文件名即可，算的上一种兼容性解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ImportResource(&quot;applicationContext1.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig3</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>@Configuration</strong>注解的proxyBeanMethods属性，此属性默认值为true，若设为false，则表示注入到容器中的对象不再是唯一的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig3</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">cat</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-Import指定bean"><a href="#4-Import指定bean" class="headerlink" title="4.@Import指定bean"></a>4.@Import指定bean</h4><p>通过@Import可指定要注入的bean，不需要在bean上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(Dog.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig4</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig4.class);<br>        String[] names = app.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">springConfig4<br>com<span class="hljs-selector-class">.xw</span><span class="hljs-selector-class">.bean</span>.Dog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
